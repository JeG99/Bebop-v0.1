Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    CONST_BOOL
    NOT
    OR

Grammar

Rule 0     S' -> routine0
Rule 1     routine0 -> goto_main_neur ROUTINE ID SEMICOLON global_scope routine1 main0
Rule 2     goto_main_neur -> <empty>
Rule 3     routine1 -> statement routine1
Rule 4     routine1 -> class0 routine1
Rule 5     routine1 -> function0 routine1
Rule 6     routine1 -> declaration0 routine1
Rule 7     routine1 -> assignment0 routine1
Rule 8     routine1 -> empty
Rule 9     global_scope -> <empty>
Rule 10    class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global
Rule 11    revert_global -> <empty>
Rule 12    revert_scope -> <empty>
Rule 13    id_def -> ID
Rule 14    class_id_def -> ID
Rule 15    class1 -> COLON ID
Rule 16    class1 -> empty
Rule 17    class2 -> attributes
Rule 18    class2 -> empty
Rule 19    class3 -> methods
Rule 20    class3 -> empty
Rule 21    function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
Rule 22    endParamNeur -> <empty>
Rule 23    startFuncNeur -> <empty>
Rule 24    function1 -> type
Rule 25    function1 -> VOID
Rule 26    function2 -> simple_declaration function2
Rule 27    function2 -> simple_assignment function2
Rule 28    function2 -> empty
Rule 29    declaration0 -> decl_id_def COLON declaration1 SEMICOLON
Rule 30    decl_id_def -> ID
Rule 31    declaration1 -> type simpleMemoryNeur
Rule 32    declaration1 -> complex_type simpleMemoryNeur
Rule 33    declaration1 -> type isArrayNeur LSQRBRACKET exp0 limitNeur RSQRBRACKET declaration2 neurMemory
Rule 34    limitNeur -> <empty>
Rule 35    simpleMemoryNeur -> <empty>
Rule 36    isArrayNeur -> <empty>
Rule 37    neurMemory -> <empty>
Rule 38    declaration2 -> dim2Neur LSQRBRACKET exp0 limitNeur2 RSQRBRACKET
Rule 39    declaration2 -> empty
Rule 40    dim2Neur -> <empty>
Rule 41    limitNeur2 -> <empty>
Rule 42    assignment0 -> ID EQUALS expression0 SEMICOLON
Rule 43    assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
Rule 44    assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
Rule 45    lsqrbracket_assign -> LSQRBRACKET
Rule 46    assign_id_def -> ID
Rule 47    arrAccNeur1 -> <empty>
Rule 48    constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0
Rule 49    attributes -> data_access simple_declaration attributes
Rule 50    attributes -> simple_assignment attributes
Rule 51    attributes -> empty
Rule 52    methods -> data_access function0 methods
Rule 53    methods -> empty
Rule 54    params0 -> type ID paramsNeur params1
Rule 55    params0 -> empty
Rule 56    paramsNeur -> <empty>
Rule 57    params1 -> COMMA params0
Rule 58    params1 -> empty
Rule 59    function_block0 -> LBRACKET function_block1 RBRACKET
Rule 60    function_block1 -> function_statement function_block1
Rule 61    function_block1 -> empty
Rule 62    type -> INT
Rule 63    type -> FLOAT
Rule 64    type -> STRING
Rule 65    type -> BOOL
Rule 66    simple_declaration -> ID COLON type SEMICOLON
Rule 67    simple_assignment -> ID EQUALS expression0 SEMICOLON
Rule 68    complex_type -> ID
Rule 69    exp0 -> term0 check_last_plus_minus_operator exp1
Rule 70    exp1 -> PLUS push_plus_minus_op exp0
Rule 71    exp1 -> MINUS push_plus_minus_op exp0
Rule 72    exp1 -> empty
Rule 73    push_plus_minus_op -> <empty>
Rule 74    check_last_plus_minus_operator -> <empty>
Rule 75    term0 -> power0 check_last_times_division_operator term1
Rule 76    term1 -> MULTIPLY push_times_division_op term0
Rule 77    term1 -> DIVIDE push_times_division_op term0
Rule 78    term1 -> empty
Rule 79    push_times_division_op -> <empty>
Rule 80    check_last_times_division_operator -> <empty>
Rule 81    power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
Rule 82    power0 -> const_var check_pow_rad_operator power2
Rule 83    power0 -> function_call check_pow_rad_operator power2
Rule 84    power0 -> method_call0 check_pow_rad_operator power2
Rule 85    power0 -> attr_access0 check_pow_rad_operator power2
Rule 86    power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
Rule 87    open_paren -> <empty>
Rule 88    close_paren -> <empty>
Rule 89    power1 -> LSQRBRACKET exp0 RSQRBRACKET
Rule 90    power1 -> empty
Rule 91    power2 -> POWER push_pow_rad_op power0
Rule 92    power2 -> SQRT push_pow_rad_op power0
Rule 93    power2 -> empty
Rule 94    push_pow_rad_op -> <empty>
Rule 95    check_pow_rad_operator -> <empty>
Rule 96    const_var -> CONST_INT neurInt
Rule 97    const_var -> CONST_FLOAT neurFloat
Rule 98    const_var -> ID
Rule 99    neurInt -> <empty>
Rule 100   neurFloat -> <empty>
Rule 101   function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
Rule 102   neurFuncCall -> <empty>
Rule 103   id_funcCall -> ID
Rule 104   function_call_params0 -> expression0 neurFuncCallParams1 function_call_params1
Rule 105   function_call_params0 -> CONST_STRING neurFuncCallParams1 function_call_params1
Rule 106   function_call_params0 -> empty function_call_params1
Rule 107   neurFuncCallParams1 -> <empty>
Rule 108   function_call_params1 -> COMMA function_call_params0
Rule 109   function_call_params1 -> empty
Rule 110   expression0 -> exp0 expression1
Rule 111   expression0 -> attr_access0 expression1
Rule 112   expression1 -> LTHAN push_rel_op expression3
Rule 113   expression1 -> GTHAN push_rel_op expression3
Rule 114   expression1 -> DIFFERENT push_rel_op expression3
Rule 115   expression1 -> EQUIVALENT push_rel_op expression3
Rule 116   expression1 -> empty
Rule 117   push_rel_op -> <empty>
Rule 118   check_rel_operator -> <empty>
Rule 119   expression3 -> exp0 check_rel_operator
Rule 120   expression3 -> attr_access0
Rule 121   attr_access0 -> ID DOT ID
Rule 122   method_call0 -> ID DOT function_call
Rule 123   data_access -> PRIVATE
Rule 124   data_access -> PUBLIC
Rule 125   function_statement -> simple_assignment
Rule 126   function_statement -> condition0
Rule 127   function_statement -> writing0
Rule 128   function_statement -> reading
Rule 129   function_statement -> return
Rule 130   function_statement -> function_call SEMICOLON
Rule 131   function_statement -> method_call0 SEMICOLON
Rule 132   function_statement -> while
Rule 133   condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3
Rule 134   condNeur1 -> <empty>
Rule 135   condNeur3 -> <empty>
Rule 136   condition1 -> ELSE condNeur2 block0
Rule 137   condition1 -> empty
Rule 138   condNeur2 -> <empty>
Rule 139   writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
Rule 140   push_writing_op -> <empty>
Rule 141   push_string_val -> <empty>
Rule 142   writing1 -> expression0 writing2
Rule 143   writing1 -> CONST_STRING push_string_val writing2
Rule 144   writing2 -> COMMA writing1
Rule 145   writing2 -> empty
Rule 146   reading -> READ ID SEMICOLON
Rule 147   return -> RETURN expression0 SEMICOLON
Rule 148   return -> RETURN SEMICOLON
Rule 149   while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
Rule 150   wNeur1 -> <empty>
Rule 151   wNeur2 -> <empty>
Rule 152   wNeur3 -> <empty>
Rule 153   block0 -> LBRACKET block1 RBRACKET
Rule 154   block1 -> statement block1
Rule 155   block1 -> empty
Rule 156   statement -> assignment0
Rule 157   statement -> object_assignment
Rule 158   statement -> condition0
Rule 159   statement -> writing0
Rule 160   statement -> reading
Rule 161   statement -> return
Rule 162   statement -> function_call SEMICOLON
Rule 163   statement -> method_call0 SEMICOLON
Rule 164   statement -> while
Rule 165   object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
Rule 166   main0 -> MAIN main_scope LBRACKET main1 RBRACKET
Rule 167   main1 -> declaration0 main1
Rule 168   main1 -> statement main1
Rule 169   main1 -> empty
Rule 170   main_scope -> <empty>
Rule 171   empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ARROW                : 21
BOOL                 : 65
CLASS                : 10
COLON                : 15 29 66
COMMA                : 57 108 144
CONSTRUCT            : 48
CONST_BOOL           : 
CONST_FLOAT          : 97
CONST_INT            : 96
CONST_STRING         : 105 143
DEF                  : 21
DIFFERENT            : 114
DIVIDE               : 77
DOT                  : 121 122
ELSE                 : 136
EQUALS               : 42 43 44 67 165
EQUIVALENT           : 115
FLOAT                : 63
GTHAN                : 113
ID                   : 1 13 14 15 30 42 46 48 54 66 67 68 86 98 103 121 121 122 146 165 165
IF                   : 133
INT                  : 62
LBRACKET             : 10 59 153 166
LPAREN               : 21 48 81 101 133 139 149 165
LSQRBRACKET          : 21 21 33 38 44 45 86 89
LTHAN                : 112
MAIN                 : 166
MINUS                : 71
MULTIPLY             : 76
NEW                  : 165
NOT                  : 
OR                   : 
PLUS                 : 70
POWER                : 91
PRIVATE              : 123
PUBLIC               : 124
RBRACKET             : 10 59 153 166
READ                 : 146
RETURN               : 147 148
ROUTINE              : 1
RPAREN               : 21 48 81 101 133 139 149 165
RSQRBRACKET          : 21 21 33 38 43 44 44 86 89
SEMICOLON            : 1 10 29 42 43 44 66 67 130 131 133 139 146 147 148 162 163 165
SQRT                 : 92
STRING               : 64
VOID                 : 25
WHILE                : 149
WRITE                : 139
error                : 

Nonterminals, with rules where they appear

arrAccNeur1          : 
assign_id_def        : 43 44
assignment0          : 7 156
attr_access0         : 85 111 120
attributes           : 17 49 50
block0               : 133 136 149
block1               : 153 154
check_last_plus_minus_operator : 69
check_last_times_division_operator : 75
check_pow_rad_operator : 81 82 83 84 85 86
check_rel_operator   : 119
class0               : 4
class1               : 10
class2               : 10
class3               : 10
class_id_def         : 10
close_paren          : 81
complex_type         : 32
condNeur1            : 133
condNeur2            : 136
condNeur3            : 133
condition0           : 126 158
condition1           : 133
const_var            : 82
constructor          : 10
data_access          : 49 52
decl_id_def          : 29
declaration0         : 6 167
declaration1         : 29
declaration2         : 33
dim2Neur             : 38
empty                : 8 16 18 20 28 39 51 53 55 58 61 72 78 90 93 106 109 116 137 145 155 169
endParamNeur         : 21
exp0                 : 33 38 43 44 44 70 71 81 86 89 110 119
exp1                 : 69
expression0          : 42 43 44 67 104 133 142 147 149
expression1          : 110 111
expression3          : 112 113 114 115
function0            : 5 52
function1            : 21
function2            : 21 26 27
function_block0      : 21 48
function_block1      : 59 60
function_call        : 83 122 130 162
function_call_params0 : 101 108 165
function_call_params1 : 104 105 106
function_statement   : 60
global_scope         : 1
goto_main_neur       : 1
id_def               : 21
id_funcCall          : 101
isArrayNeur          : 33
limitNeur            : 33
limitNeur2           : 38
lsqrbracket_assign   : 43 44
main0                : 1
main1                : 166 167 168
main_scope           : 166
method_call0         : 84 131 163
methods              : 19 52
neurFloat            : 97
neurFuncCall         : 101
neurFuncCallParams1  : 104 105
neurInt              : 96
neurMemory           : 33
object_assignment    : 157
open_paren           : 81
params0              : 21 48 57
params1              : 54
paramsNeur           : 54
power0               : 75 91 92
power1               : 86
power2               : 81 82 83 84 85 86
push_plus_minus_op   : 70 71
push_pow_rad_op      : 91 92
push_rel_op          : 112 113 114 115
push_string_val      : 143
push_times_division_op : 76 77
push_writing_op      : 139
reading              : 128 160
return               : 129 161
revert_global        : 10
revert_scope         : 21
routine0             : 0
routine1             : 1 3 4 5 6 7
simpleMemoryNeur     : 31 32
simple_assignment    : 27 50 125
simple_declaration   : 26 49
startFuncNeur        : 21
statement            : 3 154 168
term0                : 69 76 77
term1                : 75
type                 : 24 31 33 54 66
wNeur1               : 149
wNeur2               : 149
wNeur3               : 149
while                : 132 164
writing0             : 127 159
writing1             : 139 144
writing2             : 142 143

Parsing method: LALR

state 0

    (0) S' -> . routine0
    (1) routine0 -> . goto_main_neur ROUTINE ID SEMICOLON global_scope routine1 main0
    (2) goto_main_neur -> .

    ROUTINE         reduce using rule 2 (goto_main_neur -> .)

    routine0                       shift and go to state 1
    goto_main_neur                 shift and go to state 2

state 1

    (0) S' -> routine0 .



state 2

    (1) routine0 -> goto_main_neur . ROUTINE ID SEMICOLON global_scope routine1 main0

    ROUTINE         shift and go to state 3


state 3

    (1) routine0 -> goto_main_neur ROUTINE . ID SEMICOLON global_scope routine1 main0

    ID              shift and go to state 4


state 4

    (1) routine0 -> goto_main_neur ROUTINE ID . SEMICOLON global_scope routine1 main0

    SEMICOLON       shift and go to state 5


state 5

    (1) routine0 -> goto_main_neur ROUTINE ID SEMICOLON . global_scope routine1 main0
    (9) global_scope -> .

    CLASS           reduce using rule 9 (global_scope -> .)
    DEF             reduce using rule 9 (global_scope -> .)
    ID              reduce using rule 9 (global_scope -> .)
    IF              reduce using rule 9 (global_scope -> .)
    WRITE           reduce using rule 9 (global_scope -> .)
    READ            reduce using rule 9 (global_scope -> .)
    RETURN          reduce using rule 9 (global_scope -> .)
    WHILE           reduce using rule 9 (global_scope -> .)
    MAIN            reduce using rule 9 (global_scope -> .)

    global_scope                   shift and go to state 6

state 6

    (1) routine0 -> goto_main_neur ROUTINE ID SEMICOLON global_scope . routine1 main0
    (3) routine1 -> . statement routine1
    (4) routine1 -> . class0 routine1
    (5) routine1 -> . function0 routine1
    (6) routine1 -> . declaration0 routine1
    (7) routine1 -> . assignment0 routine1
    (8) routine1 -> . empty
    (156) statement -> . assignment0
    (157) statement -> . object_assignment
    (158) statement -> . condition0
    (159) statement -> . writing0
    (160) statement -> . reading
    (161) statement -> . return
    (162) statement -> . function_call SEMICOLON
    (163) statement -> . method_call0 SEMICOLON
    (164) statement -> . while
    (10) class0 -> . CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global
    (21) function0 -> . DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (29) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (171) empty -> .
    (165) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (133) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3
    (139) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (146) reading -> . READ ID SEMICOLON
    (147) return -> . RETURN expression0 SEMICOLON
    (148) return -> . RETURN SEMICOLON
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (149) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (30) decl_id_def -> . ID
    (46) assign_id_def -> . ID
    (103) id_funcCall -> . ID

    CLASS           shift and go to state 23
    DEF             shift and go to state 24
    ID              shift and go to state 7
    MAIN            reduce using rule 171 (empty -> .)
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    routine1                       shift and go to state 8
    statement                      shift and go to state 9
    class0                         shift and go to state 10
    function0                      shift and go to state 11
    declaration0                   shift and go to state 12
    assignment0                    shift and go to state 13
    empty                          shift and go to state 14
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    decl_id_def                    shift and go to state 25
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 7

    (42) assignment0 -> ID . EQUALS expression0 SEMICOLON
    (165) object_assignment -> ID . EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (122) method_call0 -> ID . DOT function_call
    (30) decl_id_def -> ID .
    (46) assign_id_def -> ID .
    (103) id_funcCall -> ID .

    EQUALS          shift and go to state 33
    DOT             shift and go to state 34
    COLON           reduce using rule 30 (decl_id_def -> ID .)
    LSQRBRACKET     reduce using rule 46 (assign_id_def -> ID .)
    LPAREN          reduce using rule 103 (id_funcCall -> ID .)


state 8

    (1) routine0 -> goto_main_neur ROUTINE ID SEMICOLON global_scope routine1 . main0
    (166) main0 -> . MAIN main_scope LBRACKET main1 RBRACKET

    MAIN            shift and go to state 36

    main0                          shift and go to state 35

state 9

    (3) routine1 -> statement . routine1
    (3) routine1 -> . statement routine1
    (4) routine1 -> . class0 routine1
    (5) routine1 -> . function0 routine1
    (6) routine1 -> . declaration0 routine1
    (7) routine1 -> . assignment0 routine1
    (8) routine1 -> . empty
    (156) statement -> . assignment0
    (157) statement -> . object_assignment
    (158) statement -> . condition0
    (159) statement -> . writing0
    (160) statement -> . reading
    (161) statement -> . return
    (162) statement -> . function_call SEMICOLON
    (163) statement -> . method_call0 SEMICOLON
    (164) statement -> . while
    (10) class0 -> . CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global
    (21) function0 -> . DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (29) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (171) empty -> .
    (165) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (133) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3
    (139) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (146) reading -> . READ ID SEMICOLON
    (147) return -> . RETURN expression0 SEMICOLON
    (148) return -> . RETURN SEMICOLON
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (149) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (30) decl_id_def -> . ID
    (46) assign_id_def -> . ID
    (103) id_funcCall -> . ID

    CLASS           shift and go to state 23
    DEF             shift and go to state 24
    ID              shift and go to state 7
    MAIN            reduce using rule 171 (empty -> .)
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    statement                      shift and go to state 9
    routine1                       shift and go to state 37
    class0                         shift and go to state 10
    function0                      shift and go to state 11
    declaration0                   shift and go to state 12
    assignment0                    shift and go to state 13
    empty                          shift and go to state 14
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    decl_id_def                    shift and go to state 25
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 10

    (4) routine1 -> class0 . routine1
    (3) routine1 -> . statement routine1
    (4) routine1 -> . class0 routine1
    (5) routine1 -> . function0 routine1
    (6) routine1 -> . declaration0 routine1
    (7) routine1 -> . assignment0 routine1
    (8) routine1 -> . empty
    (156) statement -> . assignment0
    (157) statement -> . object_assignment
    (158) statement -> . condition0
    (159) statement -> . writing0
    (160) statement -> . reading
    (161) statement -> . return
    (162) statement -> . function_call SEMICOLON
    (163) statement -> . method_call0 SEMICOLON
    (164) statement -> . while
    (10) class0 -> . CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global
    (21) function0 -> . DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (29) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (171) empty -> .
    (165) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (133) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3
    (139) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (146) reading -> . READ ID SEMICOLON
    (147) return -> . RETURN expression0 SEMICOLON
    (148) return -> . RETURN SEMICOLON
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (149) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (30) decl_id_def -> . ID
    (46) assign_id_def -> . ID
    (103) id_funcCall -> . ID

    CLASS           shift and go to state 23
    DEF             shift and go to state 24
    ID              shift and go to state 7
    MAIN            reduce using rule 171 (empty -> .)
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    class0                         shift and go to state 10
    routine1                       shift and go to state 38
    statement                      shift and go to state 9
    function0                      shift and go to state 11
    declaration0                   shift and go to state 12
    assignment0                    shift and go to state 13
    empty                          shift and go to state 14
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    decl_id_def                    shift and go to state 25
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 11

    (5) routine1 -> function0 . routine1
    (3) routine1 -> . statement routine1
    (4) routine1 -> . class0 routine1
    (5) routine1 -> . function0 routine1
    (6) routine1 -> . declaration0 routine1
    (7) routine1 -> . assignment0 routine1
    (8) routine1 -> . empty
    (156) statement -> . assignment0
    (157) statement -> . object_assignment
    (158) statement -> . condition0
    (159) statement -> . writing0
    (160) statement -> . reading
    (161) statement -> . return
    (162) statement -> . function_call SEMICOLON
    (163) statement -> . method_call0 SEMICOLON
    (164) statement -> . while
    (10) class0 -> . CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global
    (21) function0 -> . DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (29) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (171) empty -> .
    (165) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (133) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3
    (139) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (146) reading -> . READ ID SEMICOLON
    (147) return -> . RETURN expression0 SEMICOLON
    (148) return -> . RETURN SEMICOLON
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (149) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (30) decl_id_def -> . ID
    (46) assign_id_def -> . ID
    (103) id_funcCall -> . ID

    CLASS           shift and go to state 23
    DEF             shift and go to state 24
    ID              shift and go to state 7
    MAIN            reduce using rule 171 (empty -> .)
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    function0                      shift and go to state 11
    routine1                       shift and go to state 39
    statement                      shift and go to state 9
    class0                         shift and go to state 10
    declaration0                   shift and go to state 12
    assignment0                    shift and go to state 13
    empty                          shift and go to state 14
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    decl_id_def                    shift and go to state 25
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 12

    (6) routine1 -> declaration0 . routine1
    (3) routine1 -> . statement routine1
    (4) routine1 -> . class0 routine1
    (5) routine1 -> . function0 routine1
    (6) routine1 -> . declaration0 routine1
    (7) routine1 -> . assignment0 routine1
    (8) routine1 -> . empty
    (156) statement -> . assignment0
    (157) statement -> . object_assignment
    (158) statement -> . condition0
    (159) statement -> . writing0
    (160) statement -> . reading
    (161) statement -> . return
    (162) statement -> . function_call SEMICOLON
    (163) statement -> . method_call0 SEMICOLON
    (164) statement -> . while
    (10) class0 -> . CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global
    (21) function0 -> . DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (29) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (171) empty -> .
    (165) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (133) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3
    (139) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (146) reading -> . READ ID SEMICOLON
    (147) return -> . RETURN expression0 SEMICOLON
    (148) return -> . RETURN SEMICOLON
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (149) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (30) decl_id_def -> . ID
    (46) assign_id_def -> . ID
    (103) id_funcCall -> . ID

    CLASS           shift and go to state 23
    DEF             shift and go to state 24
    ID              shift and go to state 7
    MAIN            reduce using rule 171 (empty -> .)
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    declaration0                   shift and go to state 12
    routine1                       shift and go to state 40
    statement                      shift and go to state 9
    class0                         shift and go to state 10
    function0                      shift and go to state 11
    assignment0                    shift and go to state 13
    empty                          shift and go to state 14
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    decl_id_def                    shift and go to state 25
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 13

    (7) routine1 -> assignment0 . routine1
    (156) statement -> assignment0 .
    (3) routine1 -> . statement routine1
    (4) routine1 -> . class0 routine1
    (5) routine1 -> . function0 routine1
    (6) routine1 -> . declaration0 routine1
    (7) routine1 -> . assignment0 routine1
    (8) routine1 -> . empty
    (156) statement -> . assignment0
    (157) statement -> . object_assignment
    (158) statement -> . condition0
    (159) statement -> . writing0
    (160) statement -> . reading
    (161) statement -> . return
    (162) statement -> . function_call SEMICOLON
    (163) statement -> . method_call0 SEMICOLON
    (164) statement -> . while
    (10) class0 -> . CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global
    (21) function0 -> . DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (29) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (171) empty -> .
    (165) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (133) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3
    (139) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (146) reading -> . READ ID SEMICOLON
    (147) return -> . RETURN expression0 SEMICOLON
    (148) return -> . RETURN SEMICOLON
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (149) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (30) decl_id_def -> . ID
    (46) assign_id_def -> . ID
    (103) id_funcCall -> . ID

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for MAIN resolved using rule 156 (statement -> assignment0 .)
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    MAIN            reduce using rule 156 (statement -> assignment0 .)
    CLASS           shift and go to state 23
    DEF             shift and go to state 24
    ID              shift and go to state 7
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

  ! CLASS           [ reduce using rule 156 (statement -> assignment0 .) ]
  ! DEF             [ reduce using rule 156 (statement -> assignment0 .) ]
  ! ID              [ reduce using rule 156 (statement -> assignment0 .) ]
  ! IF              [ reduce using rule 156 (statement -> assignment0 .) ]
  ! WRITE           [ reduce using rule 156 (statement -> assignment0 .) ]
  ! READ            [ reduce using rule 156 (statement -> assignment0 .) ]
  ! RETURN          [ reduce using rule 156 (statement -> assignment0 .) ]
  ! WHILE           [ reduce using rule 156 (statement -> assignment0 .) ]
  ! MAIN            [ reduce using rule 171 (empty -> .) ]

    assignment0                    shift and go to state 13
    routine1                       shift and go to state 41
    statement                      shift and go to state 9
    class0                         shift and go to state 10
    function0                      shift and go to state 11
    declaration0                   shift and go to state 12
    empty                          shift and go to state 14
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    decl_id_def                    shift and go to state 25
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 14

    (8) routine1 -> empty .

    MAIN            reduce using rule 8 (routine1 -> empty .)


state 15

    (157) statement -> object_assignment .

    CLASS           reduce using rule 157 (statement -> object_assignment .)
    DEF             reduce using rule 157 (statement -> object_assignment .)
    ID              reduce using rule 157 (statement -> object_assignment .)
    IF              reduce using rule 157 (statement -> object_assignment .)
    WRITE           reduce using rule 157 (statement -> object_assignment .)
    READ            reduce using rule 157 (statement -> object_assignment .)
    RETURN          reduce using rule 157 (statement -> object_assignment .)
    WHILE           reduce using rule 157 (statement -> object_assignment .)
    MAIN            reduce using rule 157 (statement -> object_assignment .)
    RBRACKET        reduce using rule 157 (statement -> object_assignment .)


state 16

    (158) statement -> condition0 .

    CLASS           reduce using rule 158 (statement -> condition0 .)
    DEF             reduce using rule 158 (statement -> condition0 .)
    ID              reduce using rule 158 (statement -> condition0 .)
    IF              reduce using rule 158 (statement -> condition0 .)
    WRITE           reduce using rule 158 (statement -> condition0 .)
    READ            reduce using rule 158 (statement -> condition0 .)
    RETURN          reduce using rule 158 (statement -> condition0 .)
    WHILE           reduce using rule 158 (statement -> condition0 .)
    MAIN            reduce using rule 158 (statement -> condition0 .)
    RBRACKET        reduce using rule 158 (statement -> condition0 .)


state 17

    (159) statement -> writing0 .

    CLASS           reduce using rule 159 (statement -> writing0 .)
    DEF             reduce using rule 159 (statement -> writing0 .)
    ID              reduce using rule 159 (statement -> writing0 .)
    IF              reduce using rule 159 (statement -> writing0 .)
    WRITE           reduce using rule 159 (statement -> writing0 .)
    READ            reduce using rule 159 (statement -> writing0 .)
    RETURN          reduce using rule 159 (statement -> writing0 .)
    WHILE           reduce using rule 159 (statement -> writing0 .)
    MAIN            reduce using rule 159 (statement -> writing0 .)
    RBRACKET        reduce using rule 159 (statement -> writing0 .)


state 18

    (160) statement -> reading .

    CLASS           reduce using rule 160 (statement -> reading .)
    DEF             reduce using rule 160 (statement -> reading .)
    ID              reduce using rule 160 (statement -> reading .)
    IF              reduce using rule 160 (statement -> reading .)
    WRITE           reduce using rule 160 (statement -> reading .)
    READ            reduce using rule 160 (statement -> reading .)
    RETURN          reduce using rule 160 (statement -> reading .)
    WHILE           reduce using rule 160 (statement -> reading .)
    MAIN            reduce using rule 160 (statement -> reading .)
    RBRACKET        reduce using rule 160 (statement -> reading .)


state 19

    (161) statement -> return .

    CLASS           reduce using rule 161 (statement -> return .)
    DEF             reduce using rule 161 (statement -> return .)
    ID              reduce using rule 161 (statement -> return .)
    IF              reduce using rule 161 (statement -> return .)
    WRITE           reduce using rule 161 (statement -> return .)
    READ            reduce using rule 161 (statement -> return .)
    RETURN          reduce using rule 161 (statement -> return .)
    WHILE           reduce using rule 161 (statement -> return .)
    MAIN            reduce using rule 161 (statement -> return .)
    RBRACKET        reduce using rule 161 (statement -> return .)


state 20

    (162) statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 42


state 21

    (163) statement -> method_call0 . SEMICOLON

    SEMICOLON       shift and go to state 43


state 22

    (164) statement -> while .

    CLASS           reduce using rule 164 (statement -> while .)
    DEF             reduce using rule 164 (statement -> while .)
    ID              reduce using rule 164 (statement -> while .)
    IF              reduce using rule 164 (statement -> while .)
    WRITE           reduce using rule 164 (statement -> while .)
    READ            reduce using rule 164 (statement -> while .)
    RETURN          reduce using rule 164 (statement -> while .)
    WHILE           reduce using rule 164 (statement -> while .)
    MAIN            reduce using rule 164 (statement -> while .)
    RBRACKET        reduce using rule 164 (statement -> while .)


state 23

    (10) class0 -> CLASS . class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global
    (14) class_id_def -> . ID

    ID              shift and go to state 45

    class_id_def                   shift and go to state 44

state 24

    (21) function0 -> DEF . id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (13) id_def -> . ID

    ID              shift and go to state 47

    id_def                         shift and go to state 46

state 25

    (29) declaration0 -> decl_id_def . COLON declaration1 SEMICOLON

    COLON           shift and go to state 48


state 26

    (43) assignment0 -> assign_id_def . lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (44) assignment0 -> assign_id_def . lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (45) lsqrbracket_assign -> . LSQRBRACKET

    LSQRBRACKET     shift and go to state 50

    lsqrbracket_assign             shift and go to state 49

state 27

    (133) condition0 -> IF . LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3

    LPAREN          shift and go to state 51


state 28

    (139) writing0 -> WRITE . push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (140) push_writing_op -> .

    LPAREN          reduce using rule 140 (push_writing_op -> .)

    push_writing_op                shift and go to state 52

state 29

    (146) reading -> READ . ID SEMICOLON

    ID              shift and go to state 53


state 30

    (147) return -> RETURN . expression0 SEMICOLON
    (148) return -> RETURN . SEMICOLON
    (110) expression0 -> . exp0 expression1
    (111) expression0 -> . attr_access0 expression1
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (121) attr_access0 -> . ID DOT ID
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (103) id_funcCall -> . ID

    SEMICOLON       shift and go to state 55
    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    expression0                    shift and go to state 54
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 31

    (101) function_call -> id_funcCall . LPAREN neurFuncCall function_call_params0 RPAREN

    LPAREN          shift and go to state 67


state 32

    (149) while -> WHILE . wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (150) wNeur1 -> .

    LPAREN          reduce using rule 150 (wNeur1 -> .)

    wNeur1                         shift and go to state 68

state 33

    (42) assignment0 -> ID EQUALS . expression0 SEMICOLON
    (165) object_assignment -> ID EQUALS . NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (110) expression0 -> . exp0 expression1
    (111) expression0 -> . attr_access0 expression1
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (121) attr_access0 -> . ID DOT ID
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (103) id_funcCall -> . ID

    NEW             shift and go to state 70
    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    expression0                    shift and go to state 69
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 34

    (122) method_call0 -> ID DOT . function_call
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (103) id_funcCall -> . ID

    ID              shift and go to state 71

    function_call                  shift and go to state 72
    id_funcCall                    shift and go to state 31

state 35

    (1) routine0 -> goto_main_neur ROUTINE ID SEMICOLON global_scope routine1 main0 .

    $end            reduce using rule 1 (routine0 -> goto_main_neur ROUTINE ID SEMICOLON global_scope routine1 main0 .)


state 36

    (166) main0 -> MAIN . main_scope LBRACKET main1 RBRACKET
    (170) main_scope -> .

    LBRACKET        reduce using rule 170 (main_scope -> .)

    main_scope                     shift and go to state 73

state 37

    (3) routine1 -> statement routine1 .

    MAIN            reduce using rule 3 (routine1 -> statement routine1 .)


state 38

    (4) routine1 -> class0 routine1 .

    MAIN            reduce using rule 4 (routine1 -> class0 routine1 .)


state 39

    (5) routine1 -> function0 routine1 .

    MAIN            reduce using rule 5 (routine1 -> function0 routine1 .)


state 40

    (6) routine1 -> declaration0 routine1 .

    MAIN            reduce using rule 6 (routine1 -> declaration0 routine1 .)


state 41

    (7) routine1 -> assignment0 routine1 .

    MAIN            reduce using rule 7 (routine1 -> assignment0 routine1 .)


state 42

    (162) statement -> function_call SEMICOLON .

    CLASS           reduce using rule 162 (statement -> function_call SEMICOLON .)
    DEF             reduce using rule 162 (statement -> function_call SEMICOLON .)
    ID              reduce using rule 162 (statement -> function_call SEMICOLON .)
    IF              reduce using rule 162 (statement -> function_call SEMICOLON .)
    WRITE           reduce using rule 162 (statement -> function_call SEMICOLON .)
    READ            reduce using rule 162 (statement -> function_call SEMICOLON .)
    RETURN          reduce using rule 162 (statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 162 (statement -> function_call SEMICOLON .)
    MAIN            reduce using rule 162 (statement -> function_call SEMICOLON .)
    RBRACKET        reduce using rule 162 (statement -> function_call SEMICOLON .)


state 43

    (163) statement -> method_call0 SEMICOLON .

    CLASS           reduce using rule 163 (statement -> method_call0 SEMICOLON .)
    DEF             reduce using rule 163 (statement -> method_call0 SEMICOLON .)
    ID              reduce using rule 163 (statement -> method_call0 SEMICOLON .)
    IF              reduce using rule 163 (statement -> method_call0 SEMICOLON .)
    WRITE           reduce using rule 163 (statement -> method_call0 SEMICOLON .)
    READ            reduce using rule 163 (statement -> method_call0 SEMICOLON .)
    RETURN          reduce using rule 163 (statement -> method_call0 SEMICOLON .)
    WHILE           reduce using rule 163 (statement -> method_call0 SEMICOLON .)
    MAIN            reduce using rule 163 (statement -> method_call0 SEMICOLON .)
    RBRACKET        reduce using rule 163 (statement -> method_call0 SEMICOLON .)


state 44

    (10) class0 -> CLASS class_id_def . class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global
    (15) class1 -> . COLON ID
    (16) class1 -> . empty
    (171) empty -> .

    COLON           shift and go to state 75
    LBRACKET        reduce using rule 171 (empty -> .)

    class1                         shift and go to state 74
    empty                          shift and go to state 76

state 45

    (14) class_id_def -> ID .

    COLON           reduce using rule 14 (class_id_def -> ID .)
    LBRACKET        reduce using rule 14 (class_id_def -> ID .)


state 46

    (21) function0 -> DEF id_def . LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope

    LPAREN          shift and go to state 77


state 47

    (13) id_def -> ID .

    LPAREN          reduce using rule 13 (id_def -> ID .)


state 48

    (29) declaration0 -> decl_id_def COLON . declaration1 SEMICOLON
    (31) declaration1 -> . type simpleMemoryNeur
    (32) declaration1 -> . complex_type simpleMemoryNeur
    (33) declaration1 -> . type isArrayNeur LSQRBRACKET exp0 limitNeur RSQRBRACKET declaration2 neurMemory
    (62) type -> . INT
    (63) type -> . FLOAT
    (64) type -> . STRING
    (65) type -> . BOOL
    (68) complex_type -> . ID

    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    STRING          shift and go to state 83
    BOOL            shift and go to state 84
    ID              shift and go to state 85

    declaration1                   shift and go to state 78
    type                           shift and go to state 79
    complex_type                   shift and go to state 80

state 49

    (43) assignment0 -> assign_id_def lsqrbracket_assign . exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (44) assignment0 -> assign_id_def lsqrbracket_assign . exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (121) attr_access0 -> . ID DOT ID
    (103) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 88
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 86
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 87
    id_funcCall                    shift and go to state 31

state 50

    (45) lsqrbracket_assign -> LSQRBRACKET .

    LPAREN          reduce using rule 45 (lsqrbracket_assign -> LSQRBRACKET .)
    ID              reduce using rule 45 (lsqrbracket_assign -> LSQRBRACKET .)
    CONST_INT       reduce using rule 45 (lsqrbracket_assign -> LSQRBRACKET .)
    CONST_FLOAT     reduce using rule 45 (lsqrbracket_assign -> LSQRBRACKET .)


state 51

    (133) condition0 -> IF LPAREN . expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3
    (110) expression0 -> . exp0 expression1
    (111) expression0 -> . attr_access0 expression1
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (121) attr_access0 -> . ID DOT ID
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (103) id_funcCall -> . ID

    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    expression0                    shift and go to state 89
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 52

    (139) writing0 -> WRITE push_writing_op . LPAREN writing1 RPAREN SEMICOLON

    LPAREN          shift and go to state 90


state 53

    (146) reading -> READ ID . SEMICOLON

    SEMICOLON       shift and go to state 91


state 54

    (147) return -> RETURN expression0 . SEMICOLON

    SEMICOLON       shift and go to state 92


state 55

    (148) return -> RETURN SEMICOLON .

    CLASS           reduce using rule 148 (return -> RETURN SEMICOLON .)
    DEF             reduce using rule 148 (return -> RETURN SEMICOLON .)
    ID              reduce using rule 148 (return -> RETURN SEMICOLON .)
    IF              reduce using rule 148 (return -> RETURN SEMICOLON .)
    WRITE           reduce using rule 148 (return -> RETURN SEMICOLON .)
    READ            reduce using rule 148 (return -> RETURN SEMICOLON .)
    RETURN          reduce using rule 148 (return -> RETURN SEMICOLON .)
    WHILE           reduce using rule 148 (return -> RETURN SEMICOLON .)
    MAIN            reduce using rule 148 (return -> RETURN SEMICOLON .)
    RBRACKET        reduce using rule 148 (return -> RETURN SEMICOLON .)


state 56

    (110) expression0 -> exp0 . expression1
    (112) expression1 -> . LTHAN push_rel_op expression3
    (113) expression1 -> . GTHAN push_rel_op expression3
    (114) expression1 -> . DIFFERENT push_rel_op expression3
    (115) expression1 -> . EQUIVALENT push_rel_op expression3
    (116) expression1 -> . empty
    (171) empty -> .

    LTHAN           shift and go to state 94
    GTHAN           shift and go to state 95
    DIFFERENT       shift and go to state 96
    EQUIVALENT      shift and go to state 97
    SEMICOLON       reduce using rule 171 (empty -> .)
    RPAREN          reduce using rule 171 (empty -> .)
    COMMA           reduce using rule 171 (empty -> .)

    expression1                    shift and go to state 93
    empty                          shift and go to state 98

state 57

    (111) expression0 -> attr_access0 . expression1
    (85) power0 -> attr_access0 . check_pow_rad_operator power2
    (112) expression1 -> . LTHAN push_rel_op expression3
    (113) expression1 -> . GTHAN push_rel_op expression3
    (114) expression1 -> . DIFFERENT push_rel_op expression3
    (115) expression1 -> . EQUIVALENT push_rel_op expression3
    (116) expression1 -> . empty
    (95) check_pow_rad_operator -> .
    (171) empty -> .

  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for EQUIVALENT resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 95 (check_pow_rad_operator -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 95 (check_pow_rad_operator -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 95 (check_pow_rad_operator -> .)
    LTHAN           shift and go to state 94
    GTHAN           shift and go to state 95
    DIFFERENT       shift and go to state 96
    EQUIVALENT      shift and go to state 97
    POWER           reduce using rule 95 (check_pow_rad_operator -> .)
    SQRT            reduce using rule 95 (check_pow_rad_operator -> .)
    MULTIPLY        reduce using rule 95 (check_pow_rad_operator -> .)
    DIVIDE          reduce using rule 95 (check_pow_rad_operator -> .)
    PLUS            reduce using rule 95 (check_pow_rad_operator -> .)
    MINUS           reduce using rule 95 (check_pow_rad_operator -> .)
    SEMICOLON       reduce using rule 95 (check_pow_rad_operator -> .)
    RPAREN          reduce using rule 95 (check_pow_rad_operator -> .)
    COMMA           reduce using rule 95 (check_pow_rad_operator -> .)

  ! LTHAN           [ reduce using rule 95 (check_pow_rad_operator -> .) ]
  ! GTHAN           [ reduce using rule 95 (check_pow_rad_operator -> .) ]
  ! DIFFERENT       [ reduce using rule 95 (check_pow_rad_operator -> .) ]
  ! EQUIVALENT      [ reduce using rule 95 (check_pow_rad_operator -> .) ]
  ! SEMICOLON       [ reduce using rule 171 (empty -> .) ]
  ! RPAREN          [ reduce using rule 171 (empty -> .) ]
  ! COMMA           [ reduce using rule 171 (empty -> .) ]

    expression1                    shift and go to state 99
    check_pow_rad_operator         shift and go to state 100
    empty                          shift and go to state 98

state 58

    (69) exp0 -> term0 . check_last_plus_minus_operator exp1
    (74) check_last_plus_minus_operator -> .

    PLUS            reduce using rule 74 (check_last_plus_minus_operator -> .)
    MINUS           reduce using rule 74 (check_last_plus_minus_operator -> .)
    LTHAN           reduce using rule 74 (check_last_plus_minus_operator -> .)
    GTHAN           reduce using rule 74 (check_last_plus_minus_operator -> .)
    DIFFERENT       reduce using rule 74 (check_last_plus_minus_operator -> .)
    EQUIVALENT      reduce using rule 74 (check_last_plus_minus_operator -> .)
    SEMICOLON       reduce using rule 74 (check_last_plus_minus_operator -> .)
    RSQRBRACKET     reduce using rule 74 (check_last_plus_minus_operator -> .)
    RPAREN          reduce using rule 74 (check_last_plus_minus_operator -> .)
    COMMA           reduce using rule 74 (check_last_plus_minus_operator -> .)

    check_last_plus_minus_operator shift and go to state 101

state 59

    (121) attr_access0 -> ID . DOT ID
    (86) power0 -> ID . LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> ID .
    (122) method_call0 -> ID . DOT function_call
    (103) id_funcCall -> ID .

    DOT             shift and go to state 102
    LSQRBRACKET     shift and go to state 103
    POWER           reduce using rule 98 (const_var -> ID .)
    SQRT            reduce using rule 98 (const_var -> ID .)
    MULTIPLY        reduce using rule 98 (const_var -> ID .)
    DIVIDE          reduce using rule 98 (const_var -> ID .)
    PLUS            reduce using rule 98 (const_var -> ID .)
    MINUS           reduce using rule 98 (const_var -> ID .)
    LTHAN           reduce using rule 98 (const_var -> ID .)
    GTHAN           reduce using rule 98 (const_var -> ID .)
    DIFFERENT       reduce using rule 98 (const_var -> ID .)
    EQUIVALENT      reduce using rule 98 (const_var -> ID .)
    SEMICOLON       reduce using rule 98 (const_var -> ID .)
    RPAREN          reduce using rule 98 (const_var -> ID .)
    COMMA           reduce using rule 98 (const_var -> ID .)
    LPAREN          reduce using rule 103 (id_funcCall -> ID .)


state 60

    (75) term0 -> power0 . check_last_times_division_operator term1
    (80) check_last_times_division_operator -> .

    MULTIPLY        reduce using rule 80 (check_last_times_division_operator -> .)
    DIVIDE          reduce using rule 80 (check_last_times_division_operator -> .)
    PLUS            reduce using rule 80 (check_last_times_division_operator -> .)
    MINUS           reduce using rule 80 (check_last_times_division_operator -> .)
    LTHAN           reduce using rule 80 (check_last_times_division_operator -> .)
    GTHAN           reduce using rule 80 (check_last_times_division_operator -> .)
    DIFFERENT       reduce using rule 80 (check_last_times_division_operator -> .)
    EQUIVALENT      reduce using rule 80 (check_last_times_division_operator -> .)
    SEMICOLON       reduce using rule 80 (check_last_times_division_operator -> .)
    RSQRBRACKET     reduce using rule 80 (check_last_times_division_operator -> .)
    RPAREN          reduce using rule 80 (check_last_times_division_operator -> .)
    COMMA           reduce using rule 80 (check_last_times_division_operator -> .)

    check_last_times_division_operator shift and go to state 104

state 61

    (81) power0 -> LPAREN . open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (87) open_paren -> .

    LPAREN          reduce using rule 87 (open_paren -> .)
    ID              reduce using rule 87 (open_paren -> .)
    CONST_INT       reduce using rule 87 (open_paren -> .)
    CONST_FLOAT     reduce using rule 87 (open_paren -> .)

    open_paren                     shift and go to state 105

state 62

    (82) power0 -> const_var . check_pow_rad_operator power2
    (95) check_pow_rad_operator -> .

    POWER           reduce using rule 95 (check_pow_rad_operator -> .)
    SQRT            reduce using rule 95 (check_pow_rad_operator -> .)
    MULTIPLY        reduce using rule 95 (check_pow_rad_operator -> .)
    DIVIDE          reduce using rule 95 (check_pow_rad_operator -> .)
    PLUS            reduce using rule 95 (check_pow_rad_operator -> .)
    MINUS           reduce using rule 95 (check_pow_rad_operator -> .)
    LTHAN           reduce using rule 95 (check_pow_rad_operator -> .)
    GTHAN           reduce using rule 95 (check_pow_rad_operator -> .)
    DIFFERENT       reduce using rule 95 (check_pow_rad_operator -> .)
    EQUIVALENT      reduce using rule 95 (check_pow_rad_operator -> .)
    SEMICOLON       reduce using rule 95 (check_pow_rad_operator -> .)
    RSQRBRACKET     reduce using rule 95 (check_pow_rad_operator -> .)
    RPAREN          reduce using rule 95 (check_pow_rad_operator -> .)
    COMMA           reduce using rule 95 (check_pow_rad_operator -> .)

    check_pow_rad_operator         shift and go to state 106

state 63

    (83) power0 -> function_call . check_pow_rad_operator power2
    (95) check_pow_rad_operator -> .

    POWER           reduce using rule 95 (check_pow_rad_operator -> .)
    SQRT            reduce using rule 95 (check_pow_rad_operator -> .)
    MULTIPLY        reduce using rule 95 (check_pow_rad_operator -> .)
    DIVIDE          reduce using rule 95 (check_pow_rad_operator -> .)
    PLUS            reduce using rule 95 (check_pow_rad_operator -> .)
    MINUS           reduce using rule 95 (check_pow_rad_operator -> .)
    LTHAN           reduce using rule 95 (check_pow_rad_operator -> .)
    GTHAN           reduce using rule 95 (check_pow_rad_operator -> .)
    DIFFERENT       reduce using rule 95 (check_pow_rad_operator -> .)
    EQUIVALENT      reduce using rule 95 (check_pow_rad_operator -> .)
    SEMICOLON       reduce using rule 95 (check_pow_rad_operator -> .)
    RSQRBRACKET     reduce using rule 95 (check_pow_rad_operator -> .)
    RPAREN          reduce using rule 95 (check_pow_rad_operator -> .)
    COMMA           reduce using rule 95 (check_pow_rad_operator -> .)

    check_pow_rad_operator         shift and go to state 107

state 64

    (84) power0 -> method_call0 . check_pow_rad_operator power2
    (95) check_pow_rad_operator -> .

    POWER           reduce using rule 95 (check_pow_rad_operator -> .)
    SQRT            reduce using rule 95 (check_pow_rad_operator -> .)
    MULTIPLY        reduce using rule 95 (check_pow_rad_operator -> .)
    DIVIDE          reduce using rule 95 (check_pow_rad_operator -> .)
    PLUS            reduce using rule 95 (check_pow_rad_operator -> .)
    MINUS           reduce using rule 95 (check_pow_rad_operator -> .)
    LTHAN           reduce using rule 95 (check_pow_rad_operator -> .)
    GTHAN           reduce using rule 95 (check_pow_rad_operator -> .)
    DIFFERENT       reduce using rule 95 (check_pow_rad_operator -> .)
    EQUIVALENT      reduce using rule 95 (check_pow_rad_operator -> .)
    SEMICOLON       reduce using rule 95 (check_pow_rad_operator -> .)
    RSQRBRACKET     reduce using rule 95 (check_pow_rad_operator -> .)
    RPAREN          reduce using rule 95 (check_pow_rad_operator -> .)
    COMMA           reduce using rule 95 (check_pow_rad_operator -> .)

    check_pow_rad_operator         shift and go to state 108

state 65

    (96) const_var -> CONST_INT . neurInt
    (99) neurInt -> .

    POWER           reduce using rule 99 (neurInt -> .)
    SQRT            reduce using rule 99 (neurInt -> .)
    MULTIPLY        reduce using rule 99 (neurInt -> .)
    DIVIDE          reduce using rule 99 (neurInt -> .)
    PLUS            reduce using rule 99 (neurInt -> .)
    MINUS           reduce using rule 99 (neurInt -> .)
    LTHAN           reduce using rule 99 (neurInt -> .)
    GTHAN           reduce using rule 99 (neurInt -> .)
    DIFFERENT       reduce using rule 99 (neurInt -> .)
    EQUIVALENT      reduce using rule 99 (neurInt -> .)
    SEMICOLON       reduce using rule 99 (neurInt -> .)
    RSQRBRACKET     reduce using rule 99 (neurInt -> .)
    RPAREN          reduce using rule 99 (neurInt -> .)
    COMMA           reduce using rule 99 (neurInt -> .)

    neurInt                        shift and go to state 109

state 66

    (97) const_var -> CONST_FLOAT . neurFloat
    (100) neurFloat -> .

    POWER           reduce using rule 100 (neurFloat -> .)
    SQRT            reduce using rule 100 (neurFloat -> .)
    MULTIPLY        reduce using rule 100 (neurFloat -> .)
    DIVIDE          reduce using rule 100 (neurFloat -> .)
    PLUS            reduce using rule 100 (neurFloat -> .)
    MINUS           reduce using rule 100 (neurFloat -> .)
    LTHAN           reduce using rule 100 (neurFloat -> .)
    GTHAN           reduce using rule 100 (neurFloat -> .)
    DIFFERENT       reduce using rule 100 (neurFloat -> .)
    EQUIVALENT      reduce using rule 100 (neurFloat -> .)
    SEMICOLON       reduce using rule 100 (neurFloat -> .)
    RSQRBRACKET     reduce using rule 100 (neurFloat -> .)
    RPAREN          reduce using rule 100 (neurFloat -> .)
    COMMA           reduce using rule 100 (neurFloat -> .)

    neurFloat                      shift and go to state 110

state 67

    (101) function_call -> id_funcCall LPAREN . neurFuncCall function_call_params0 RPAREN
    (102) neurFuncCall -> .

    CONST_STRING    reduce using rule 102 (neurFuncCall -> .)
    ID              reduce using rule 102 (neurFuncCall -> .)
    LPAREN          reduce using rule 102 (neurFuncCall -> .)
    CONST_INT       reduce using rule 102 (neurFuncCall -> .)
    CONST_FLOAT     reduce using rule 102 (neurFuncCall -> .)
    RPAREN          reduce using rule 102 (neurFuncCall -> .)
    COMMA           reduce using rule 102 (neurFuncCall -> .)

    neurFuncCall                   shift and go to state 111

state 68

    (149) while -> WHILE wNeur1 . LPAREN expression0 RPAREN wNeur2 block0 wNeur3

    LPAREN          shift and go to state 112


state 69

    (42) assignment0 -> ID EQUALS expression0 . SEMICOLON

    SEMICOLON       shift and go to state 113


state 70

    (165) object_assignment -> ID EQUALS NEW . ID LPAREN function_call_params0 RPAREN SEMICOLON

    ID              shift and go to state 114


state 71

    (103) id_funcCall -> ID .

    LPAREN          reduce using rule 103 (id_funcCall -> ID .)


state 72

    (122) method_call0 -> ID DOT function_call .

    SEMICOLON       reduce using rule 122 (method_call0 -> ID DOT function_call .)
    POWER           reduce using rule 122 (method_call0 -> ID DOT function_call .)
    SQRT            reduce using rule 122 (method_call0 -> ID DOT function_call .)
    MULTIPLY        reduce using rule 122 (method_call0 -> ID DOT function_call .)
    DIVIDE          reduce using rule 122 (method_call0 -> ID DOT function_call .)
    PLUS            reduce using rule 122 (method_call0 -> ID DOT function_call .)
    MINUS           reduce using rule 122 (method_call0 -> ID DOT function_call .)
    LTHAN           reduce using rule 122 (method_call0 -> ID DOT function_call .)
    GTHAN           reduce using rule 122 (method_call0 -> ID DOT function_call .)
    DIFFERENT       reduce using rule 122 (method_call0 -> ID DOT function_call .)
    EQUIVALENT      reduce using rule 122 (method_call0 -> ID DOT function_call .)
    RSQRBRACKET     reduce using rule 122 (method_call0 -> ID DOT function_call .)
    RPAREN          reduce using rule 122 (method_call0 -> ID DOT function_call .)
    COMMA           reduce using rule 122 (method_call0 -> ID DOT function_call .)


state 73

    (166) main0 -> MAIN main_scope . LBRACKET main1 RBRACKET

    LBRACKET        shift and go to state 115


state 74

    (10) class0 -> CLASS class_id_def class1 . LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global

    LBRACKET        shift and go to state 116


state 75

    (15) class1 -> COLON . ID

    ID              shift and go to state 117


state 76

    (16) class1 -> empty .

    LBRACKET        reduce using rule 16 (class1 -> empty .)


state 77

    (21) function0 -> DEF id_def LPAREN . params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (54) params0 -> . type ID paramsNeur params1
    (55) params0 -> . empty
    (62) type -> . INT
    (63) type -> . FLOAT
    (64) type -> . STRING
    (65) type -> . BOOL
    (171) empty -> .

    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    STRING          shift and go to state 83
    BOOL            shift and go to state 84
    RPAREN          reduce using rule 171 (empty -> .)

    params0                        shift and go to state 118
    type                           shift and go to state 119
    empty                          shift and go to state 120

state 78

    (29) declaration0 -> decl_id_def COLON declaration1 . SEMICOLON

    SEMICOLON       shift and go to state 121


state 79

    (31) declaration1 -> type . simpleMemoryNeur
    (33) declaration1 -> type . isArrayNeur LSQRBRACKET exp0 limitNeur RSQRBRACKET declaration2 neurMemory
    (35) simpleMemoryNeur -> .
    (36) isArrayNeur -> .

    SEMICOLON       reduce using rule 35 (simpleMemoryNeur -> .)
    LSQRBRACKET     reduce using rule 36 (isArrayNeur -> .)

    simpleMemoryNeur               shift and go to state 122
    isArrayNeur                    shift and go to state 123

state 80

    (32) declaration1 -> complex_type . simpleMemoryNeur
    (35) simpleMemoryNeur -> .

    SEMICOLON       reduce using rule 35 (simpleMemoryNeur -> .)

    simpleMemoryNeur               shift and go to state 124

state 81

    (62) type -> INT .

    LSQRBRACKET     reduce using rule 62 (type -> INT .)
    SEMICOLON       reduce using rule 62 (type -> INT .)
    ID              reduce using rule 62 (type -> INT .)


state 82

    (63) type -> FLOAT .

    LSQRBRACKET     reduce using rule 63 (type -> FLOAT .)
    SEMICOLON       reduce using rule 63 (type -> FLOAT .)
    ID              reduce using rule 63 (type -> FLOAT .)


state 83

    (64) type -> STRING .

    LSQRBRACKET     reduce using rule 64 (type -> STRING .)
    SEMICOLON       reduce using rule 64 (type -> STRING .)
    ID              reduce using rule 64 (type -> STRING .)


state 84

    (65) type -> BOOL .

    LSQRBRACKET     reduce using rule 65 (type -> BOOL .)
    SEMICOLON       reduce using rule 65 (type -> BOOL .)
    ID              reduce using rule 65 (type -> BOOL .)


state 85

    (68) complex_type -> ID .

    SEMICOLON       reduce using rule 68 (complex_type -> ID .)


state 86

    (43) assignment0 -> assign_id_def lsqrbracket_assign exp0 . RSQRBRACKET EQUALS expression0 SEMICOLON
    (44) assignment0 -> assign_id_def lsqrbracket_assign exp0 . RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON

    RSQRBRACKET     shift and go to state 125


state 87

    (85) power0 -> attr_access0 . check_pow_rad_operator power2
    (95) check_pow_rad_operator -> .

    POWER           reduce using rule 95 (check_pow_rad_operator -> .)
    SQRT            reduce using rule 95 (check_pow_rad_operator -> .)
    MULTIPLY        reduce using rule 95 (check_pow_rad_operator -> .)
    DIVIDE          reduce using rule 95 (check_pow_rad_operator -> .)
    PLUS            reduce using rule 95 (check_pow_rad_operator -> .)
    MINUS           reduce using rule 95 (check_pow_rad_operator -> .)
    RSQRBRACKET     reduce using rule 95 (check_pow_rad_operator -> .)
    RPAREN          reduce using rule 95 (check_pow_rad_operator -> .)
    LTHAN           reduce using rule 95 (check_pow_rad_operator -> .)
    GTHAN           reduce using rule 95 (check_pow_rad_operator -> .)
    DIFFERENT       reduce using rule 95 (check_pow_rad_operator -> .)
    EQUIVALENT      reduce using rule 95 (check_pow_rad_operator -> .)
    SEMICOLON       reduce using rule 95 (check_pow_rad_operator -> .)
    COMMA           reduce using rule 95 (check_pow_rad_operator -> .)

    check_pow_rad_operator         shift and go to state 100

state 88

    (86) power0 -> ID . LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> ID .
    (122) method_call0 -> ID . DOT function_call
    (121) attr_access0 -> ID . DOT ID
    (103) id_funcCall -> ID .

    LSQRBRACKET     shift and go to state 103
    POWER           reduce using rule 98 (const_var -> ID .)
    SQRT            reduce using rule 98 (const_var -> ID .)
    MULTIPLY        reduce using rule 98 (const_var -> ID .)
    DIVIDE          reduce using rule 98 (const_var -> ID .)
    PLUS            reduce using rule 98 (const_var -> ID .)
    MINUS           reduce using rule 98 (const_var -> ID .)
    RSQRBRACKET     reduce using rule 98 (const_var -> ID .)
    RPAREN          reduce using rule 98 (const_var -> ID .)
    LTHAN           reduce using rule 98 (const_var -> ID .)
    GTHAN           reduce using rule 98 (const_var -> ID .)
    DIFFERENT       reduce using rule 98 (const_var -> ID .)
    EQUIVALENT      reduce using rule 98 (const_var -> ID .)
    SEMICOLON       reduce using rule 98 (const_var -> ID .)
    COMMA           reduce using rule 98 (const_var -> ID .)
    DOT             shift and go to state 126
    LPAREN          reduce using rule 103 (id_funcCall -> ID .)


state 89

    (133) condition0 -> IF LPAREN expression0 . condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3
    (134) condNeur1 -> .

    RPAREN          reduce using rule 134 (condNeur1 -> .)

    condNeur1                      shift and go to state 127

state 90

    (139) writing0 -> WRITE push_writing_op LPAREN . writing1 RPAREN SEMICOLON
    (142) writing1 -> . expression0 writing2
    (143) writing1 -> . CONST_STRING push_string_val writing2
    (110) expression0 -> . exp0 expression1
    (111) expression0 -> . attr_access0 expression1
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (121) attr_access0 -> . ID DOT ID
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (103) id_funcCall -> . ID

    CONST_STRING    shift and go to state 130
    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    writing1                       shift and go to state 128
    expression0                    shift and go to state 129
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 91

    (146) reading -> READ ID SEMICOLON .

    CLASS           reduce using rule 146 (reading -> READ ID SEMICOLON .)
    DEF             reduce using rule 146 (reading -> READ ID SEMICOLON .)
    ID              reduce using rule 146 (reading -> READ ID SEMICOLON .)
    IF              reduce using rule 146 (reading -> READ ID SEMICOLON .)
    WRITE           reduce using rule 146 (reading -> READ ID SEMICOLON .)
    READ            reduce using rule 146 (reading -> READ ID SEMICOLON .)
    RETURN          reduce using rule 146 (reading -> READ ID SEMICOLON .)
    WHILE           reduce using rule 146 (reading -> READ ID SEMICOLON .)
    MAIN            reduce using rule 146 (reading -> READ ID SEMICOLON .)
    RBRACKET        reduce using rule 146 (reading -> READ ID SEMICOLON .)


state 92

    (147) return -> RETURN expression0 SEMICOLON .

    CLASS           reduce using rule 147 (return -> RETURN expression0 SEMICOLON .)
    DEF             reduce using rule 147 (return -> RETURN expression0 SEMICOLON .)
    ID              reduce using rule 147 (return -> RETURN expression0 SEMICOLON .)
    IF              reduce using rule 147 (return -> RETURN expression0 SEMICOLON .)
    WRITE           reduce using rule 147 (return -> RETURN expression0 SEMICOLON .)
    READ            reduce using rule 147 (return -> RETURN expression0 SEMICOLON .)
    RETURN          reduce using rule 147 (return -> RETURN expression0 SEMICOLON .)
    WHILE           reduce using rule 147 (return -> RETURN expression0 SEMICOLON .)
    MAIN            reduce using rule 147 (return -> RETURN expression0 SEMICOLON .)
    RBRACKET        reduce using rule 147 (return -> RETURN expression0 SEMICOLON .)


state 93

    (110) expression0 -> exp0 expression1 .

    SEMICOLON       reduce using rule 110 (expression0 -> exp0 expression1 .)
    RPAREN          reduce using rule 110 (expression0 -> exp0 expression1 .)
    COMMA           reduce using rule 110 (expression0 -> exp0 expression1 .)


state 94

    (112) expression1 -> LTHAN . push_rel_op expression3
    (117) push_rel_op -> .

    ID              reduce using rule 117 (push_rel_op -> .)
    LPAREN          reduce using rule 117 (push_rel_op -> .)
    CONST_INT       reduce using rule 117 (push_rel_op -> .)
    CONST_FLOAT     reduce using rule 117 (push_rel_op -> .)

    push_rel_op                    shift and go to state 131

state 95

    (113) expression1 -> GTHAN . push_rel_op expression3
    (117) push_rel_op -> .

    ID              reduce using rule 117 (push_rel_op -> .)
    LPAREN          reduce using rule 117 (push_rel_op -> .)
    CONST_INT       reduce using rule 117 (push_rel_op -> .)
    CONST_FLOAT     reduce using rule 117 (push_rel_op -> .)

    push_rel_op                    shift and go to state 132

state 96

    (114) expression1 -> DIFFERENT . push_rel_op expression3
    (117) push_rel_op -> .

    ID              reduce using rule 117 (push_rel_op -> .)
    LPAREN          reduce using rule 117 (push_rel_op -> .)
    CONST_INT       reduce using rule 117 (push_rel_op -> .)
    CONST_FLOAT     reduce using rule 117 (push_rel_op -> .)

    push_rel_op                    shift and go to state 133

state 97

    (115) expression1 -> EQUIVALENT . push_rel_op expression3
    (117) push_rel_op -> .

    ID              reduce using rule 117 (push_rel_op -> .)
    LPAREN          reduce using rule 117 (push_rel_op -> .)
    CONST_INT       reduce using rule 117 (push_rel_op -> .)
    CONST_FLOAT     reduce using rule 117 (push_rel_op -> .)

    push_rel_op                    shift and go to state 134

state 98

    (116) expression1 -> empty .

    SEMICOLON       reduce using rule 116 (expression1 -> empty .)
    RPAREN          reduce using rule 116 (expression1 -> empty .)
    COMMA           reduce using rule 116 (expression1 -> empty .)


state 99

    (111) expression0 -> attr_access0 expression1 .

    SEMICOLON       reduce using rule 111 (expression0 -> attr_access0 expression1 .)
    RPAREN          reduce using rule 111 (expression0 -> attr_access0 expression1 .)
    COMMA           reduce using rule 111 (expression0 -> attr_access0 expression1 .)


state 100

    (85) power0 -> attr_access0 check_pow_rad_operator . power2
    (91) power2 -> . POWER push_pow_rad_op power0
    (92) power2 -> . SQRT push_pow_rad_op power0
    (93) power2 -> . empty
    (171) empty -> .

    POWER           shift and go to state 136
    SQRT            shift and go to state 137
    MULTIPLY        reduce using rule 171 (empty -> .)
    DIVIDE          reduce using rule 171 (empty -> .)
    PLUS            reduce using rule 171 (empty -> .)
    MINUS           reduce using rule 171 (empty -> .)
    LTHAN           reduce using rule 171 (empty -> .)
    GTHAN           reduce using rule 171 (empty -> .)
    DIFFERENT       reduce using rule 171 (empty -> .)
    EQUIVALENT      reduce using rule 171 (empty -> .)
    SEMICOLON       reduce using rule 171 (empty -> .)
    RSQRBRACKET     reduce using rule 171 (empty -> .)
    RPAREN          reduce using rule 171 (empty -> .)
    COMMA           reduce using rule 171 (empty -> .)

    power2                         shift and go to state 135
    empty                          shift and go to state 138

state 101

    (69) exp0 -> term0 check_last_plus_minus_operator . exp1
    (70) exp1 -> . PLUS push_plus_minus_op exp0
    (71) exp1 -> . MINUS push_plus_minus_op exp0
    (72) exp1 -> . empty
    (171) empty -> .

    PLUS            shift and go to state 140
    MINUS           shift and go to state 141
    LTHAN           reduce using rule 171 (empty -> .)
    GTHAN           reduce using rule 171 (empty -> .)
    DIFFERENT       reduce using rule 171 (empty -> .)
    EQUIVALENT      reduce using rule 171 (empty -> .)
    SEMICOLON       reduce using rule 171 (empty -> .)
    RSQRBRACKET     reduce using rule 171 (empty -> .)
    RPAREN          reduce using rule 171 (empty -> .)
    COMMA           reduce using rule 171 (empty -> .)

    exp1                           shift and go to state 139
    empty                          shift and go to state 142

state 102

    (121) attr_access0 -> ID DOT . ID
    (122) method_call0 -> ID DOT . function_call
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (103) id_funcCall -> . ID

    ID              shift and go to state 143

    function_call                  shift and go to state 72
    id_funcCall                    shift and go to state 31

state 103

    (86) power0 -> ID LSQRBRACKET . exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (121) attr_access0 -> . ID DOT ID
    (103) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 88
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 144
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 87
    id_funcCall                    shift and go to state 31

state 104

    (75) term0 -> power0 check_last_times_division_operator . term1
    (76) term1 -> . MULTIPLY push_times_division_op term0
    (77) term1 -> . DIVIDE push_times_division_op term0
    (78) term1 -> . empty
    (171) empty -> .

    MULTIPLY        shift and go to state 146
    DIVIDE          shift and go to state 147
    PLUS            reduce using rule 171 (empty -> .)
    MINUS           reduce using rule 171 (empty -> .)
    LTHAN           reduce using rule 171 (empty -> .)
    GTHAN           reduce using rule 171 (empty -> .)
    DIFFERENT       reduce using rule 171 (empty -> .)
    EQUIVALENT      reduce using rule 171 (empty -> .)
    SEMICOLON       reduce using rule 171 (empty -> .)
    RSQRBRACKET     reduce using rule 171 (empty -> .)
    RPAREN          reduce using rule 171 (empty -> .)
    COMMA           reduce using rule 171 (empty -> .)

    term1                          shift and go to state 145
    empty                          shift and go to state 148

state 105

    (81) power0 -> LPAREN open_paren . exp0 RPAREN close_paren check_pow_rad_operator power2
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (121) attr_access0 -> . ID DOT ID
    (103) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 88
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 149
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 87
    id_funcCall                    shift and go to state 31

state 106

    (82) power0 -> const_var check_pow_rad_operator . power2
    (91) power2 -> . POWER push_pow_rad_op power0
    (92) power2 -> . SQRT push_pow_rad_op power0
    (93) power2 -> . empty
    (171) empty -> .

    POWER           shift and go to state 136
    SQRT            shift and go to state 137
    MULTIPLY        reduce using rule 171 (empty -> .)
    DIVIDE          reduce using rule 171 (empty -> .)
    PLUS            reduce using rule 171 (empty -> .)
    MINUS           reduce using rule 171 (empty -> .)
    LTHAN           reduce using rule 171 (empty -> .)
    GTHAN           reduce using rule 171 (empty -> .)
    DIFFERENT       reduce using rule 171 (empty -> .)
    EQUIVALENT      reduce using rule 171 (empty -> .)
    SEMICOLON       reduce using rule 171 (empty -> .)
    RSQRBRACKET     reduce using rule 171 (empty -> .)
    RPAREN          reduce using rule 171 (empty -> .)
    COMMA           reduce using rule 171 (empty -> .)

    power2                         shift and go to state 150
    empty                          shift and go to state 138

state 107

    (83) power0 -> function_call check_pow_rad_operator . power2
    (91) power2 -> . POWER push_pow_rad_op power0
    (92) power2 -> . SQRT push_pow_rad_op power0
    (93) power2 -> . empty
    (171) empty -> .

    POWER           shift and go to state 136
    SQRT            shift and go to state 137
    MULTIPLY        reduce using rule 171 (empty -> .)
    DIVIDE          reduce using rule 171 (empty -> .)
    PLUS            reduce using rule 171 (empty -> .)
    MINUS           reduce using rule 171 (empty -> .)
    LTHAN           reduce using rule 171 (empty -> .)
    GTHAN           reduce using rule 171 (empty -> .)
    DIFFERENT       reduce using rule 171 (empty -> .)
    EQUIVALENT      reduce using rule 171 (empty -> .)
    SEMICOLON       reduce using rule 171 (empty -> .)
    RSQRBRACKET     reduce using rule 171 (empty -> .)
    RPAREN          reduce using rule 171 (empty -> .)
    COMMA           reduce using rule 171 (empty -> .)

    power2                         shift and go to state 151
    empty                          shift and go to state 138

state 108

    (84) power0 -> method_call0 check_pow_rad_operator . power2
    (91) power2 -> . POWER push_pow_rad_op power0
    (92) power2 -> . SQRT push_pow_rad_op power0
    (93) power2 -> . empty
    (171) empty -> .

    POWER           shift and go to state 136
    SQRT            shift and go to state 137
    MULTIPLY        reduce using rule 171 (empty -> .)
    DIVIDE          reduce using rule 171 (empty -> .)
    PLUS            reduce using rule 171 (empty -> .)
    MINUS           reduce using rule 171 (empty -> .)
    LTHAN           reduce using rule 171 (empty -> .)
    GTHAN           reduce using rule 171 (empty -> .)
    DIFFERENT       reduce using rule 171 (empty -> .)
    EQUIVALENT      reduce using rule 171 (empty -> .)
    SEMICOLON       reduce using rule 171 (empty -> .)
    RSQRBRACKET     reduce using rule 171 (empty -> .)
    RPAREN          reduce using rule 171 (empty -> .)
    COMMA           reduce using rule 171 (empty -> .)

    power2                         shift and go to state 152
    empty                          shift and go to state 138

state 109

    (96) const_var -> CONST_INT neurInt .

    POWER           reduce using rule 96 (const_var -> CONST_INT neurInt .)
    SQRT            reduce using rule 96 (const_var -> CONST_INT neurInt .)
    MULTIPLY        reduce using rule 96 (const_var -> CONST_INT neurInt .)
    DIVIDE          reduce using rule 96 (const_var -> CONST_INT neurInt .)
    PLUS            reduce using rule 96 (const_var -> CONST_INT neurInt .)
    MINUS           reduce using rule 96 (const_var -> CONST_INT neurInt .)
    LTHAN           reduce using rule 96 (const_var -> CONST_INT neurInt .)
    GTHAN           reduce using rule 96 (const_var -> CONST_INT neurInt .)
    DIFFERENT       reduce using rule 96 (const_var -> CONST_INT neurInt .)
    EQUIVALENT      reduce using rule 96 (const_var -> CONST_INT neurInt .)
    SEMICOLON       reduce using rule 96 (const_var -> CONST_INT neurInt .)
    RSQRBRACKET     reduce using rule 96 (const_var -> CONST_INT neurInt .)
    RPAREN          reduce using rule 96 (const_var -> CONST_INT neurInt .)
    COMMA           reduce using rule 96 (const_var -> CONST_INT neurInt .)


state 110

    (97) const_var -> CONST_FLOAT neurFloat .

    POWER           reduce using rule 97 (const_var -> CONST_FLOAT neurFloat .)
    SQRT            reduce using rule 97 (const_var -> CONST_FLOAT neurFloat .)
    MULTIPLY        reduce using rule 97 (const_var -> CONST_FLOAT neurFloat .)
    DIVIDE          reduce using rule 97 (const_var -> CONST_FLOAT neurFloat .)
    PLUS            reduce using rule 97 (const_var -> CONST_FLOAT neurFloat .)
    MINUS           reduce using rule 97 (const_var -> CONST_FLOAT neurFloat .)
    LTHAN           reduce using rule 97 (const_var -> CONST_FLOAT neurFloat .)
    GTHAN           reduce using rule 97 (const_var -> CONST_FLOAT neurFloat .)
    DIFFERENT       reduce using rule 97 (const_var -> CONST_FLOAT neurFloat .)
    EQUIVALENT      reduce using rule 97 (const_var -> CONST_FLOAT neurFloat .)
    SEMICOLON       reduce using rule 97 (const_var -> CONST_FLOAT neurFloat .)
    RSQRBRACKET     reduce using rule 97 (const_var -> CONST_FLOAT neurFloat .)
    RPAREN          reduce using rule 97 (const_var -> CONST_FLOAT neurFloat .)
    COMMA           reduce using rule 97 (const_var -> CONST_FLOAT neurFloat .)


state 111

    (101) function_call -> id_funcCall LPAREN neurFuncCall . function_call_params0 RPAREN
    (104) function_call_params0 -> . expression0 neurFuncCallParams1 function_call_params1
    (105) function_call_params0 -> . CONST_STRING neurFuncCallParams1 function_call_params1
    (106) function_call_params0 -> . empty function_call_params1
    (110) expression0 -> . exp0 expression1
    (111) expression0 -> . attr_access0 expression1
    (171) empty -> .
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (121) attr_access0 -> . ID DOT ID
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (103) id_funcCall -> . ID

    CONST_STRING    shift and go to state 155
    COMMA           reduce using rule 171 (empty -> .)
    RPAREN          reduce using rule 171 (empty -> .)
    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    id_funcCall                    shift and go to state 31
    function_call_params0          shift and go to state 153
    expression0                    shift and go to state 154
    empty                          shift and go to state 156
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64

state 112

    (149) while -> WHILE wNeur1 LPAREN . expression0 RPAREN wNeur2 block0 wNeur3
    (110) expression0 -> . exp0 expression1
    (111) expression0 -> . attr_access0 expression1
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (121) attr_access0 -> . ID DOT ID
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (103) id_funcCall -> . ID

    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    expression0                    shift and go to state 157
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 113

    (42) assignment0 -> ID EQUALS expression0 SEMICOLON .

    CLASS           reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    DEF             reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    ID              reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    IF              reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    WRITE           reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    READ            reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    RETURN          reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    WHILE           reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    MAIN            reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    RBRACKET        reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)


state 114

    (165) object_assignment -> ID EQUALS NEW ID . LPAREN function_call_params0 RPAREN SEMICOLON

    LPAREN          shift and go to state 158


state 115

    (166) main0 -> MAIN main_scope LBRACKET . main1 RBRACKET
    (167) main1 -> . declaration0 main1
    (168) main1 -> . statement main1
    (169) main1 -> . empty
    (29) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (156) statement -> . assignment0
    (157) statement -> . object_assignment
    (158) statement -> . condition0
    (159) statement -> . writing0
    (160) statement -> . reading
    (161) statement -> . return
    (162) statement -> . function_call SEMICOLON
    (163) statement -> . method_call0 SEMICOLON
    (164) statement -> . while
    (171) empty -> .
    (30) decl_id_def -> . ID
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (165) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (133) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3
    (139) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (146) reading -> . READ ID SEMICOLON
    (147) return -> . RETURN expression0 SEMICOLON
    (148) return -> . RETURN SEMICOLON
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (149) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (46) assign_id_def -> . ID
    (103) id_funcCall -> . ID

    RBRACKET        reduce using rule 171 (empty -> .)
    ID              shift and go to state 164
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    main1                          shift and go to state 159
    declaration0                   shift and go to state 160
    statement                      shift and go to state 161
    empty                          shift and go to state 162
    decl_id_def                    shift and go to state 25
    assignment0                    shift and go to state 163
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 116

    (10) class0 -> CLASS class_id_def class1 LBRACKET . class2 constructor class3 RBRACKET SEMICOLON revert_global
    (17) class2 -> . attributes
    (18) class2 -> . empty
    (49) attributes -> . data_access simple_declaration attributes
    (50) attributes -> . simple_assignment attributes
    (51) attributes -> . empty
    (171) empty -> .
    (123) data_access -> . PRIVATE
    (124) data_access -> . PUBLIC
    (67) simple_assignment -> . ID EQUALS expression0 SEMICOLON

    CONSTRUCT       reduce using rule 171 (empty -> .)
    PRIVATE         shift and go to state 170
    PUBLIC          shift and go to state 171
    ID              shift and go to state 172

    class2                         shift and go to state 165
    attributes                     shift and go to state 166
    empty                          shift and go to state 167
    data_access                    shift and go to state 168
    simple_assignment              shift and go to state 169

state 117

    (15) class1 -> COLON ID .

    LBRACKET        reduce using rule 15 (class1 -> COLON ID .)


state 118

    (21) function0 -> DEF id_def LPAREN params0 . RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope

    RPAREN          shift and go to state 173


state 119

    (54) params0 -> type . ID paramsNeur params1

    ID              shift and go to state 174


state 120

    (55) params0 -> empty .

    RPAREN          reduce using rule 55 (params0 -> empty .)


state 121

    (29) declaration0 -> decl_id_def COLON declaration1 SEMICOLON .

    CLASS           reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    DEF             reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    ID              reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    IF              reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    WRITE           reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    READ            reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    RETURN          reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    WHILE           reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    MAIN            reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    RBRACKET        reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)


state 122

    (31) declaration1 -> type simpleMemoryNeur .

    SEMICOLON       reduce using rule 31 (declaration1 -> type simpleMemoryNeur .)


state 123

    (33) declaration1 -> type isArrayNeur . LSQRBRACKET exp0 limitNeur RSQRBRACKET declaration2 neurMemory

    LSQRBRACKET     shift and go to state 175


state 124

    (32) declaration1 -> complex_type simpleMemoryNeur .

    SEMICOLON       reduce using rule 32 (declaration1 -> complex_type simpleMemoryNeur .)


state 125

    (43) assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET . EQUALS expression0 SEMICOLON
    (44) assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET . LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON

    EQUALS          shift and go to state 176
    LSQRBRACKET     shift and go to state 177


state 126

    (122) method_call0 -> ID DOT . function_call
    (121) attr_access0 -> ID DOT . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (103) id_funcCall -> . ID

    ID              shift and go to state 143

    function_call                  shift and go to state 72
    id_funcCall                    shift and go to state 31

state 127

    (133) condition0 -> IF LPAREN expression0 condNeur1 . RPAREN block0 condition1 SEMICOLON condNeur3

    RPAREN          shift and go to state 178


state 128

    (139) writing0 -> WRITE push_writing_op LPAREN writing1 . RPAREN SEMICOLON

    RPAREN          shift and go to state 179


state 129

    (142) writing1 -> expression0 . writing2
    (144) writing2 -> . COMMA writing1
    (145) writing2 -> . empty
    (171) empty -> .

    COMMA           shift and go to state 181
    RPAREN          reduce using rule 171 (empty -> .)

    writing2                       shift and go to state 180
    empty                          shift and go to state 182

state 130

    (143) writing1 -> CONST_STRING . push_string_val writing2
    (141) push_string_val -> .

    COMMA           reduce using rule 141 (push_string_val -> .)
    RPAREN          reduce using rule 141 (push_string_val -> .)

    push_string_val                shift and go to state 183

state 131

    (112) expression1 -> LTHAN push_rel_op . expression3
    (119) expression3 -> . exp0 check_rel_operator
    (120) expression3 -> . attr_access0
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (121) attr_access0 -> . ID DOT ID
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (103) id_funcCall -> . ID

    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    expression3                    shift and go to state 184
    exp0                           shift and go to state 185
    attr_access0                   shift and go to state 186
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 132

    (113) expression1 -> GTHAN push_rel_op . expression3
    (119) expression3 -> . exp0 check_rel_operator
    (120) expression3 -> . attr_access0
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (121) attr_access0 -> . ID DOT ID
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (103) id_funcCall -> . ID

    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    expression3                    shift and go to state 187
    exp0                           shift and go to state 185
    attr_access0                   shift and go to state 186
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 133

    (114) expression1 -> DIFFERENT push_rel_op . expression3
    (119) expression3 -> . exp0 check_rel_operator
    (120) expression3 -> . attr_access0
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (121) attr_access0 -> . ID DOT ID
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (103) id_funcCall -> . ID

    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    expression3                    shift and go to state 188
    exp0                           shift and go to state 185
    attr_access0                   shift and go to state 186
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 134

    (115) expression1 -> EQUIVALENT push_rel_op . expression3
    (119) expression3 -> . exp0 check_rel_operator
    (120) expression3 -> . attr_access0
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (121) attr_access0 -> . ID DOT ID
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (103) id_funcCall -> . ID

    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    expression3                    shift and go to state 189
    exp0                           shift and go to state 185
    attr_access0                   shift and go to state 186
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 135

    (85) power0 -> attr_access0 check_pow_rad_operator power2 .

    MULTIPLY        reduce using rule 85 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    DIVIDE          reduce using rule 85 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    PLUS            reduce using rule 85 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    MINUS           reduce using rule 85 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    LTHAN           reduce using rule 85 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    GTHAN           reduce using rule 85 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    DIFFERENT       reduce using rule 85 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    EQUIVALENT      reduce using rule 85 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    SEMICOLON       reduce using rule 85 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    RSQRBRACKET     reduce using rule 85 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    RPAREN          reduce using rule 85 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    COMMA           reduce using rule 85 (power0 -> attr_access0 check_pow_rad_operator power2 .)


state 136

    (91) power2 -> POWER . push_pow_rad_op power0
    (94) push_pow_rad_op -> .

    LPAREN          reduce using rule 94 (push_pow_rad_op -> .)
    ID              reduce using rule 94 (push_pow_rad_op -> .)
    CONST_INT       reduce using rule 94 (push_pow_rad_op -> .)
    CONST_FLOAT     reduce using rule 94 (push_pow_rad_op -> .)

    push_pow_rad_op                shift and go to state 190

state 137

    (92) power2 -> SQRT . push_pow_rad_op power0
    (94) push_pow_rad_op -> .

    LPAREN          reduce using rule 94 (push_pow_rad_op -> .)
    ID              reduce using rule 94 (push_pow_rad_op -> .)
    CONST_INT       reduce using rule 94 (push_pow_rad_op -> .)
    CONST_FLOAT     reduce using rule 94 (push_pow_rad_op -> .)

    push_pow_rad_op                shift and go to state 191

state 138

    (93) power2 -> empty .

    MULTIPLY        reduce using rule 93 (power2 -> empty .)
    DIVIDE          reduce using rule 93 (power2 -> empty .)
    PLUS            reduce using rule 93 (power2 -> empty .)
    MINUS           reduce using rule 93 (power2 -> empty .)
    LTHAN           reduce using rule 93 (power2 -> empty .)
    GTHAN           reduce using rule 93 (power2 -> empty .)
    DIFFERENT       reduce using rule 93 (power2 -> empty .)
    EQUIVALENT      reduce using rule 93 (power2 -> empty .)
    SEMICOLON       reduce using rule 93 (power2 -> empty .)
    RSQRBRACKET     reduce using rule 93 (power2 -> empty .)
    RPAREN          reduce using rule 93 (power2 -> empty .)
    COMMA           reduce using rule 93 (power2 -> empty .)


state 139

    (69) exp0 -> term0 check_last_plus_minus_operator exp1 .

    LTHAN           reduce using rule 69 (exp0 -> term0 check_last_plus_minus_operator exp1 .)
    GTHAN           reduce using rule 69 (exp0 -> term0 check_last_plus_minus_operator exp1 .)
    DIFFERENT       reduce using rule 69 (exp0 -> term0 check_last_plus_minus_operator exp1 .)
    EQUIVALENT      reduce using rule 69 (exp0 -> term0 check_last_plus_minus_operator exp1 .)
    SEMICOLON       reduce using rule 69 (exp0 -> term0 check_last_plus_minus_operator exp1 .)
    RSQRBRACKET     reduce using rule 69 (exp0 -> term0 check_last_plus_minus_operator exp1 .)
    RPAREN          reduce using rule 69 (exp0 -> term0 check_last_plus_minus_operator exp1 .)
    COMMA           reduce using rule 69 (exp0 -> term0 check_last_plus_minus_operator exp1 .)


state 140

    (70) exp1 -> PLUS . push_plus_minus_op exp0
    (73) push_plus_minus_op -> .

    LPAREN          reduce using rule 73 (push_plus_minus_op -> .)
    ID              reduce using rule 73 (push_plus_minus_op -> .)
    CONST_INT       reduce using rule 73 (push_plus_minus_op -> .)
    CONST_FLOAT     reduce using rule 73 (push_plus_minus_op -> .)

    push_plus_minus_op             shift and go to state 192

state 141

    (71) exp1 -> MINUS . push_plus_minus_op exp0
    (73) push_plus_minus_op -> .

    LPAREN          reduce using rule 73 (push_plus_minus_op -> .)
    ID              reduce using rule 73 (push_plus_minus_op -> .)
    CONST_INT       reduce using rule 73 (push_plus_minus_op -> .)
    CONST_FLOAT     reduce using rule 73 (push_plus_minus_op -> .)

    push_plus_minus_op             shift and go to state 193

state 142

    (72) exp1 -> empty .

    LTHAN           reduce using rule 72 (exp1 -> empty .)
    GTHAN           reduce using rule 72 (exp1 -> empty .)
    DIFFERENT       reduce using rule 72 (exp1 -> empty .)
    EQUIVALENT      reduce using rule 72 (exp1 -> empty .)
    SEMICOLON       reduce using rule 72 (exp1 -> empty .)
    RSQRBRACKET     reduce using rule 72 (exp1 -> empty .)
    RPAREN          reduce using rule 72 (exp1 -> empty .)
    COMMA           reduce using rule 72 (exp1 -> empty .)


state 143

    (121) attr_access0 -> ID DOT ID .
    (103) id_funcCall -> ID .

    LTHAN           reduce using rule 121 (attr_access0 -> ID DOT ID .)
    GTHAN           reduce using rule 121 (attr_access0 -> ID DOT ID .)
    DIFFERENT       reduce using rule 121 (attr_access0 -> ID DOT ID .)
    EQUIVALENT      reduce using rule 121 (attr_access0 -> ID DOT ID .)
    POWER           reduce using rule 121 (attr_access0 -> ID DOT ID .)
    SQRT            reduce using rule 121 (attr_access0 -> ID DOT ID .)
    SEMICOLON       reduce using rule 121 (attr_access0 -> ID DOT ID .)
    MULTIPLY        reduce using rule 121 (attr_access0 -> ID DOT ID .)
    DIVIDE          reduce using rule 121 (attr_access0 -> ID DOT ID .)
    PLUS            reduce using rule 121 (attr_access0 -> ID DOT ID .)
    MINUS           reduce using rule 121 (attr_access0 -> ID DOT ID .)
    RSQRBRACKET     reduce using rule 121 (attr_access0 -> ID DOT ID .)
    RPAREN          reduce using rule 121 (attr_access0 -> ID DOT ID .)
    COMMA           reduce using rule 121 (attr_access0 -> ID DOT ID .)
    LPAREN          reduce using rule 103 (id_funcCall -> ID .)


state 144

    (86) power0 -> ID LSQRBRACKET exp0 . RSQRBRACKET check_pow_rad_operator power1 power2

    RSQRBRACKET     shift and go to state 194


state 145

    (75) term0 -> power0 check_last_times_division_operator term1 .

    PLUS            reduce using rule 75 (term0 -> power0 check_last_times_division_operator term1 .)
    MINUS           reduce using rule 75 (term0 -> power0 check_last_times_division_operator term1 .)
    LTHAN           reduce using rule 75 (term0 -> power0 check_last_times_division_operator term1 .)
    GTHAN           reduce using rule 75 (term0 -> power0 check_last_times_division_operator term1 .)
    DIFFERENT       reduce using rule 75 (term0 -> power0 check_last_times_division_operator term1 .)
    EQUIVALENT      reduce using rule 75 (term0 -> power0 check_last_times_division_operator term1 .)
    SEMICOLON       reduce using rule 75 (term0 -> power0 check_last_times_division_operator term1 .)
    RSQRBRACKET     reduce using rule 75 (term0 -> power0 check_last_times_division_operator term1 .)
    RPAREN          reduce using rule 75 (term0 -> power0 check_last_times_division_operator term1 .)
    COMMA           reduce using rule 75 (term0 -> power0 check_last_times_division_operator term1 .)


state 146

    (76) term1 -> MULTIPLY . push_times_division_op term0
    (79) push_times_division_op -> .

    LPAREN          reduce using rule 79 (push_times_division_op -> .)
    ID              reduce using rule 79 (push_times_division_op -> .)
    CONST_INT       reduce using rule 79 (push_times_division_op -> .)
    CONST_FLOAT     reduce using rule 79 (push_times_division_op -> .)

    push_times_division_op         shift and go to state 195

state 147

    (77) term1 -> DIVIDE . push_times_division_op term0
    (79) push_times_division_op -> .

    LPAREN          reduce using rule 79 (push_times_division_op -> .)
    ID              reduce using rule 79 (push_times_division_op -> .)
    CONST_INT       reduce using rule 79 (push_times_division_op -> .)
    CONST_FLOAT     reduce using rule 79 (push_times_division_op -> .)

    push_times_division_op         shift and go to state 196

state 148

    (78) term1 -> empty .

    PLUS            reduce using rule 78 (term1 -> empty .)
    MINUS           reduce using rule 78 (term1 -> empty .)
    LTHAN           reduce using rule 78 (term1 -> empty .)
    GTHAN           reduce using rule 78 (term1 -> empty .)
    DIFFERENT       reduce using rule 78 (term1 -> empty .)
    EQUIVALENT      reduce using rule 78 (term1 -> empty .)
    SEMICOLON       reduce using rule 78 (term1 -> empty .)
    RSQRBRACKET     reduce using rule 78 (term1 -> empty .)
    RPAREN          reduce using rule 78 (term1 -> empty .)
    COMMA           reduce using rule 78 (term1 -> empty .)


state 149

    (81) power0 -> LPAREN open_paren exp0 . RPAREN close_paren check_pow_rad_operator power2

    RPAREN          shift and go to state 197


state 150

    (82) power0 -> const_var check_pow_rad_operator power2 .

    MULTIPLY        reduce using rule 82 (power0 -> const_var check_pow_rad_operator power2 .)
    DIVIDE          reduce using rule 82 (power0 -> const_var check_pow_rad_operator power2 .)
    PLUS            reduce using rule 82 (power0 -> const_var check_pow_rad_operator power2 .)
    MINUS           reduce using rule 82 (power0 -> const_var check_pow_rad_operator power2 .)
    LTHAN           reduce using rule 82 (power0 -> const_var check_pow_rad_operator power2 .)
    GTHAN           reduce using rule 82 (power0 -> const_var check_pow_rad_operator power2 .)
    DIFFERENT       reduce using rule 82 (power0 -> const_var check_pow_rad_operator power2 .)
    EQUIVALENT      reduce using rule 82 (power0 -> const_var check_pow_rad_operator power2 .)
    SEMICOLON       reduce using rule 82 (power0 -> const_var check_pow_rad_operator power2 .)
    RSQRBRACKET     reduce using rule 82 (power0 -> const_var check_pow_rad_operator power2 .)
    RPAREN          reduce using rule 82 (power0 -> const_var check_pow_rad_operator power2 .)
    COMMA           reduce using rule 82 (power0 -> const_var check_pow_rad_operator power2 .)


state 151

    (83) power0 -> function_call check_pow_rad_operator power2 .

    MULTIPLY        reduce using rule 83 (power0 -> function_call check_pow_rad_operator power2 .)
    DIVIDE          reduce using rule 83 (power0 -> function_call check_pow_rad_operator power2 .)
    PLUS            reduce using rule 83 (power0 -> function_call check_pow_rad_operator power2 .)
    MINUS           reduce using rule 83 (power0 -> function_call check_pow_rad_operator power2 .)
    LTHAN           reduce using rule 83 (power0 -> function_call check_pow_rad_operator power2 .)
    GTHAN           reduce using rule 83 (power0 -> function_call check_pow_rad_operator power2 .)
    DIFFERENT       reduce using rule 83 (power0 -> function_call check_pow_rad_operator power2 .)
    EQUIVALENT      reduce using rule 83 (power0 -> function_call check_pow_rad_operator power2 .)
    SEMICOLON       reduce using rule 83 (power0 -> function_call check_pow_rad_operator power2 .)
    RSQRBRACKET     reduce using rule 83 (power0 -> function_call check_pow_rad_operator power2 .)
    RPAREN          reduce using rule 83 (power0 -> function_call check_pow_rad_operator power2 .)
    COMMA           reduce using rule 83 (power0 -> function_call check_pow_rad_operator power2 .)


state 152

    (84) power0 -> method_call0 check_pow_rad_operator power2 .

    MULTIPLY        reduce using rule 84 (power0 -> method_call0 check_pow_rad_operator power2 .)
    DIVIDE          reduce using rule 84 (power0 -> method_call0 check_pow_rad_operator power2 .)
    PLUS            reduce using rule 84 (power0 -> method_call0 check_pow_rad_operator power2 .)
    MINUS           reduce using rule 84 (power0 -> method_call0 check_pow_rad_operator power2 .)
    LTHAN           reduce using rule 84 (power0 -> method_call0 check_pow_rad_operator power2 .)
    GTHAN           reduce using rule 84 (power0 -> method_call0 check_pow_rad_operator power2 .)
    DIFFERENT       reduce using rule 84 (power0 -> method_call0 check_pow_rad_operator power2 .)
    EQUIVALENT      reduce using rule 84 (power0 -> method_call0 check_pow_rad_operator power2 .)
    SEMICOLON       reduce using rule 84 (power0 -> method_call0 check_pow_rad_operator power2 .)
    RSQRBRACKET     reduce using rule 84 (power0 -> method_call0 check_pow_rad_operator power2 .)
    RPAREN          reduce using rule 84 (power0 -> method_call0 check_pow_rad_operator power2 .)
    COMMA           reduce using rule 84 (power0 -> method_call0 check_pow_rad_operator power2 .)


state 153

    (101) function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 . RPAREN

    RPAREN          shift and go to state 198


state 154

    (104) function_call_params0 -> expression0 . neurFuncCallParams1 function_call_params1
    (107) neurFuncCallParams1 -> .

    COMMA           reduce using rule 107 (neurFuncCallParams1 -> .)
    RPAREN          reduce using rule 107 (neurFuncCallParams1 -> .)

    neurFuncCallParams1            shift and go to state 199

state 155

    (105) function_call_params0 -> CONST_STRING . neurFuncCallParams1 function_call_params1
    (107) neurFuncCallParams1 -> .

    COMMA           reduce using rule 107 (neurFuncCallParams1 -> .)
    RPAREN          reduce using rule 107 (neurFuncCallParams1 -> .)

    neurFuncCallParams1            shift and go to state 200

state 156

    (106) function_call_params0 -> empty . function_call_params1
    (108) function_call_params1 -> . COMMA function_call_params0
    (109) function_call_params1 -> . empty
    (171) empty -> .

    COMMA           shift and go to state 203
    RPAREN          reduce using rule 171 (empty -> .)

    empty                          shift and go to state 201
    function_call_params1          shift and go to state 202

state 157

    (149) while -> WHILE wNeur1 LPAREN expression0 . RPAREN wNeur2 block0 wNeur3

    RPAREN          shift and go to state 204


state 158

    (165) object_assignment -> ID EQUALS NEW ID LPAREN . function_call_params0 RPAREN SEMICOLON
    (104) function_call_params0 -> . expression0 neurFuncCallParams1 function_call_params1
    (105) function_call_params0 -> . CONST_STRING neurFuncCallParams1 function_call_params1
    (106) function_call_params0 -> . empty function_call_params1
    (110) expression0 -> . exp0 expression1
    (111) expression0 -> . attr_access0 expression1
    (171) empty -> .
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (121) attr_access0 -> . ID DOT ID
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (103) id_funcCall -> . ID

    CONST_STRING    shift and go to state 155
    COMMA           reduce using rule 171 (empty -> .)
    RPAREN          reduce using rule 171 (empty -> .)
    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    function_call_params0          shift and go to state 205
    expression0                    shift and go to state 154
    empty                          shift and go to state 156
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 159

    (166) main0 -> MAIN main_scope LBRACKET main1 . RBRACKET

    RBRACKET        shift and go to state 206


state 160

    (167) main1 -> declaration0 . main1
    (167) main1 -> . declaration0 main1
    (168) main1 -> . statement main1
    (169) main1 -> . empty
    (29) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (156) statement -> . assignment0
    (157) statement -> . object_assignment
    (158) statement -> . condition0
    (159) statement -> . writing0
    (160) statement -> . reading
    (161) statement -> . return
    (162) statement -> . function_call SEMICOLON
    (163) statement -> . method_call0 SEMICOLON
    (164) statement -> . while
    (171) empty -> .
    (30) decl_id_def -> . ID
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (165) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (133) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3
    (139) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (146) reading -> . READ ID SEMICOLON
    (147) return -> . RETURN expression0 SEMICOLON
    (148) return -> . RETURN SEMICOLON
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (149) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (46) assign_id_def -> . ID
    (103) id_funcCall -> . ID

    RBRACKET        reduce using rule 171 (empty -> .)
    ID              shift and go to state 164
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    declaration0                   shift and go to state 160
    main1                          shift and go to state 207
    statement                      shift and go to state 161
    empty                          shift and go to state 162
    decl_id_def                    shift and go to state 25
    assignment0                    shift and go to state 163
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 161

    (168) main1 -> statement . main1
    (167) main1 -> . declaration0 main1
    (168) main1 -> . statement main1
    (169) main1 -> . empty
    (29) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (156) statement -> . assignment0
    (157) statement -> . object_assignment
    (158) statement -> . condition0
    (159) statement -> . writing0
    (160) statement -> . reading
    (161) statement -> . return
    (162) statement -> . function_call SEMICOLON
    (163) statement -> . method_call0 SEMICOLON
    (164) statement -> . while
    (171) empty -> .
    (30) decl_id_def -> . ID
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (165) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (133) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3
    (139) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (146) reading -> . READ ID SEMICOLON
    (147) return -> . RETURN expression0 SEMICOLON
    (148) return -> . RETURN SEMICOLON
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (149) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (46) assign_id_def -> . ID
    (103) id_funcCall -> . ID

    RBRACKET        reduce using rule 171 (empty -> .)
    ID              shift and go to state 164
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    statement                      shift and go to state 161
    main1                          shift and go to state 208
    declaration0                   shift and go to state 160
    empty                          shift and go to state 162
    decl_id_def                    shift and go to state 25
    assignment0                    shift and go to state 163
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 162

    (169) main1 -> empty .

    RBRACKET        reduce using rule 169 (main1 -> empty .)


state 163

    (156) statement -> assignment0 .

    ID              reduce using rule 156 (statement -> assignment0 .)
    IF              reduce using rule 156 (statement -> assignment0 .)
    WRITE           reduce using rule 156 (statement -> assignment0 .)
    READ            reduce using rule 156 (statement -> assignment0 .)
    RETURN          reduce using rule 156 (statement -> assignment0 .)
    WHILE           reduce using rule 156 (statement -> assignment0 .)
    RBRACKET        reduce using rule 156 (statement -> assignment0 .)


state 164

    (30) decl_id_def -> ID .
    (42) assignment0 -> ID . EQUALS expression0 SEMICOLON
    (165) object_assignment -> ID . EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (122) method_call0 -> ID . DOT function_call
    (46) assign_id_def -> ID .
    (103) id_funcCall -> ID .

    COLON           reduce using rule 30 (decl_id_def -> ID .)
    EQUALS          shift and go to state 33
    DOT             shift and go to state 34
    LSQRBRACKET     reduce using rule 46 (assign_id_def -> ID .)
    LPAREN          reduce using rule 103 (id_funcCall -> ID .)


state 165

    (10) class0 -> CLASS class_id_def class1 LBRACKET class2 . constructor class3 RBRACKET SEMICOLON revert_global
    (48) constructor -> . CONSTRUCT ID LPAREN params0 RPAREN function_block0

    CONSTRUCT       shift and go to state 210

    constructor                    shift and go to state 209

state 166

    (17) class2 -> attributes .

    CONSTRUCT       reduce using rule 17 (class2 -> attributes .)


state 167

    (18) class2 -> empty .
    (51) attributes -> empty .

  ! reduce/reduce conflict for CONSTRUCT resolved using rule 18 (class2 -> empty .)
    CONSTRUCT       reduce using rule 18 (class2 -> empty .)

  ! CONSTRUCT       [ reduce using rule 51 (attributes -> empty .) ]


state 168

    (49) attributes -> data_access . simple_declaration attributes
    (66) simple_declaration -> . ID COLON type SEMICOLON

    ID              shift and go to state 212

    simple_declaration             shift and go to state 211

state 169

    (50) attributes -> simple_assignment . attributes
    (49) attributes -> . data_access simple_declaration attributes
    (50) attributes -> . simple_assignment attributes
    (51) attributes -> . empty
    (123) data_access -> . PRIVATE
    (124) data_access -> . PUBLIC
    (67) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (171) empty -> .

    PRIVATE         shift and go to state 170
    PUBLIC          shift and go to state 171
    ID              shift and go to state 172
    CONSTRUCT       reduce using rule 171 (empty -> .)

    simple_assignment              shift and go to state 169
    attributes                     shift and go to state 213
    data_access                    shift and go to state 168
    empty                          shift and go to state 214

state 170

    (123) data_access -> PRIVATE .

    ID              reduce using rule 123 (data_access -> PRIVATE .)
    DEF             reduce using rule 123 (data_access -> PRIVATE .)


state 171

    (124) data_access -> PUBLIC .

    ID              reduce using rule 124 (data_access -> PUBLIC .)
    DEF             reduce using rule 124 (data_access -> PUBLIC .)


state 172

    (67) simple_assignment -> ID . EQUALS expression0 SEMICOLON

    EQUALS          shift and go to state 215


state 173

    (21) function0 -> DEF id_def LPAREN params0 RPAREN . endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (22) endParamNeur -> .

    ARROW           reduce using rule 22 (endParamNeur -> .)

    endParamNeur                   shift and go to state 216

state 174

    (54) params0 -> type ID . paramsNeur params1
    (56) paramsNeur -> .

    COMMA           reduce using rule 56 (paramsNeur -> .)
    RPAREN          reduce using rule 56 (paramsNeur -> .)

    paramsNeur                     shift and go to state 217

state 175

    (33) declaration1 -> type isArrayNeur LSQRBRACKET . exp0 limitNeur RSQRBRACKET declaration2 neurMemory
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (121) attr_access0 -> . ID DOT ID
    (103) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 88
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 218
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 87
    id_funcCall                    shift and go to state 31

state 176

    (43) assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS . expression0 SEMICOLON
    (110) expression0 -> . exp0 expression1
    (111) expression0 -> . attr_access0 expression1
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (121) attr_access0 -> . ID DOT ID
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (103) id_funcCall -> . ID

    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 56
    expression0                    shift and go to state 219
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 177

    (44) assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET . exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (121) attr_access0 -> . ID DOT ID
    (103) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 88
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 220
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 87
    id_funcCall                    shift and go to state 31

state 178

    (133) condition0 -> IF LPAREN expression0 condNeur1 RPAREN . block0 condition1 SEMICOLON condNeur3
    (153) block0 -> . LBRACKET block1 RBRACKET

    LBRACKET        shift and go to state 222

    block0                         shift and go to state 221

state 179

    (139) writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 223


state 180

    (142) writing1 -> expression0 writing2 .

    RPAREN          reduce using rule 142 (writing1 -> expression0 writing2 .)


state 181

    (144) writing2 -> COMMA . writing1
    (142) writing1 -> . expression0 writing2
    (143) writing1 -> . CONST_STRING push_string_val writing2
    (110) expression0 -> . exp0 expression1
    (111) expression0 -> . attr_access0 expression1
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (121) attr_access0 -> . ID DOT ID
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (103) id_funcCall -> . ID

    CONST_STRING    shift and go to state 130
    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    writing1                       shift and go to state 224
    expression0                    shift and go to state 129
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 182

    (145) writing2 -> empty .

    RPAREN          reduce using rule 145 (writing2 -> empty .)


state 183

    (143) writing1 -> CONST_STRING push_string_val . writing2
    (144) writing2 -> . COMMA writing1
    (145) writing2 -> . empty
    (171) empty -> .

    COMMA           shift and go to state 181
    RPAREN          reduce using rule 171 (empty -> .)

    writing2                       shift and go to state 225
    empty                          shift and go to state 182

state 184

    (112) expression1 -> LTHAN push_rel_op expression3 .

    SEMICOLON       reduce using rule 112 (expression1 -> LTHAN push_rel_op expression3 .)
    RPAREN          reduce using rule 112 (expression1 -> LTHAN push_rel_op expression3 .)
    COMMA           reduce using rule 112 (expression1 -> LTHAN push_rel_op expression3 .)


state 185

    (119) expression3 -> exp0 . check_rel_operator
    (118) check_rel_operator -> .

    SEMICOLON       reduce using rule 118 (check_rel_operator -> .)
    RPAREN          reduce using rule 118 (check_rel_operator -> .)
    COMMA           reduce using rule 118 (check_rel_operator -> .)

    check_rel_operator             shift and go to state 226

state 186

    (120) expression3 -> attr_access0 .
    (85) power0 -> attr_access0 . check_pow_rad_operator power2
    (95) check_pow_rad_operator -> .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 95 (check_pow_rad_operator -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 95 (check_pow_rad_operator -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 95 (check_pow_rad_operator -> .)
    POWER           reduce using rule 95 (check_pow_rad_operator -> .)
    SQRT            reduce using rule 95 (check_pow_rad_operator -> .)
    MULTIPLY        reduce using rule 95 (check_pow_rad_operator -> .)
    DIVIDE          reduce using rule 95 (check_pow_rad_operator -> .)
    PLUS            reduce using rule 95 (check_pow_rad_operator -> .)
    MINUS           reduce using rule 95 (check_pow_rad_operator -> .)
    SEMICOLON       reduce using rule 95 (check_pow_rad_operator -> .)
    RPAREN          reduce using rule 95 (check_pow_rad_operator -> .)
    COMMA           reduce using rule 95 (check_pow_rad_operator -> .)

  ! SEMICOLON       [ reduce using rule 120 (expression3 -> attr_access0 .) ]
  ! RPAREN          [ reduce using rule 120 (expression3 -> attr_access0 .) ]
  ! COMMA           [ reduce using rule 120 (expression3 -> attr_access0 .) ]

    check_pow_rad_operator         shift and go to state 100

state 187

    (113) expression1 -> GTHAN push_rel_op expression3 .

    SEMICOLON       reduce using rule 113 (expression1 -> GTHAN push_rel_op expression3 .)
    RPAREN          reduce using rule 113 (expression1 -> GTHAN push_rel_op expression3 .)
    COMMA           reduce using rule 113 (expression1 -> GTHAN push_rel_op expression3 .)


state 188

    (114) expression1 -> DIFFERENT push_rel_op expression3 .

    SEMICOLON       reduce using rule 114 (expression1 -> DIFFERENT push_rel_op expression3 .)
    RPAREN          reduce using rule 114 (expression1 -> DIFFERENT push_rel_op expression3 .)
    COMMA           reduce using rule 114 (expression1 -> DIFFERENT push_rel_op expression3 .)


state 189

    (115) expression1 -> EQUIVALENT push_rel_op expression3 .

    SEMICOLON       reduce using rule 115 (expression1 -> EQUIVALENT push_rel_op expression3 .)
    RPAREN          reduce using rule 115 (expression1 -> EQUIVALENT push_rel_op expression3 .)
    COMMA           reduce using rule 115 (expression1 -> EQUIVALENT push_rel_op expression3 .)


state 190

    (91) power2 -> POWER push_pow_rad_op . power0
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (121) attr_access0 -> . ID DOT ID
    (103) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 88
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    power0                         shift and go to state 227
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 87
    id_funcCall                    shift and go to state 31

state 191

    (92) power2 -> SQRT push_pow_rad_op . power0
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (121) attr_access0 -> . ID DOT ID
    (103) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 88
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    power0                         shift and go to state 228
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 87
    id_funcCall                    shift and go to state 31

state 192

    (70) exp1 -> PLUS push_plus_minus_op . exp0
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (121) attr_access0 -> . ID DOT ID
    (103) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 88
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 229
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 87
    id_funcCall                    shift and go to state 31

state 193

    (71) exp1 -> MINUS push_plus_minus_op . exp0
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (121) attr_access0 -> . ID DOT ID
    (103) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 88
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 230
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 87
    id_funcCall                    shift and go to state 31

state 194

    (86) power0 -> ID LSQRBRACKET exp0 RSQRBRACKET . check_pow_rad_operator power1 power2
    (95) check_pow_rad_operator -> .

    LSQRBRACKET     reduce using rule 95 (check_pow_rad_operator -> .)
    POWER           reduce using rule 95 (check_pow_rad_operator -> .)
    SQRT            reduce using rule 95 (check_pow_rad_operator -> .)
    MULTIPLY        reduce using rule 95 (check_pow_rad_operator -> .)
    DIVIDE          reduce using rule 95 (check_pow_rad_operator -> .)
    PLUS            reduce using rule 95 (check_pow_rad_operator -> .)
    MINUS           reduce using rule 95 (check_pow_rad_operator -> .)
    LTHAN           reduce using rule 95 (check_pow_rad_operator -> .)
    GTHAN           reduce using rule 95 (check_pow_rad_operator -> .)
    DIFFERENT       reduce using rule 95 (check_pow_rad_operator -> .)
    EQUIVALENT      reduce using rule 95 (check_pow_rad_operator -> .)
    SEMICOLON       reduce using rule 95 (check_pow_rad_operator -> .)
    RSQRBRACKET     reduce using rule 95 (check_pow_rad_operator -> .)
    RPAREN          reduce using rule 95 (check_pow_rad_operator -> .)
    COMMA           reduce using rule 95 (check_pow_rad_operator -> .)

    check_pow_rad_operator         shift and go to state 231

state 195

    (76) term1 -> MULTIPLY push_times_division_op . term0
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (121) attr_access0 -> . ID DOT ID
    (103) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 88
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    term0                          shift and go to state 232
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 87
    id_funcCall                    shift and go to state 31

state 196

    (77) term1 -> DIVIDE push_times_division_op . term0
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (121) attr_access0 -> . ID DOT ID
    (103) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 88
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    term0                          shift and go to state 233
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 87
    id_funcCall                    shift and go to state 31

state 197

    (81) power0 -> LPAREN open_paren exp0 RPAREN . close_paren check_pow_rad_operator power2
    (88) close_paren -> .

    POWER           reduce using rule 88 (close_paren -> .)
    SQRT            reduce using rule 88 (close_paren -> .)
    MULTIPLY        reduce using rule 88 (close_paren -> .)
    DIVIDE          reduce using rule 88 (close_paren -> .)
    PLUS            reduce using rule 88 (close_paren -> .)
    MINUS           reduce using rule 88 (close_paren -> .)
    LTHAN           reduce using rule 88 (close_paren -> .)
    GTHAN           reduce using rule 88 (close_paren -> .)
    DIFFERENT       reduce using rule 88 (close_paren -> .)
    EQUIVALENT      reduce using rule 88 (close_paren -> .)
    SEMICOLON       reduce using rule 88 (close_paren -> .)
    RSQRBRACKET     reduce using rule 88 (close_paren -> .)
    RPAREN          reduce using rule 88 (close_paren -> .)
    COMMA           reduce using rule 88 (close_paren -> .)

    close_paren                    shift and go to state 234

state 198

    (101) function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .

    SEMICOLON       reduce using rule 101 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    POWER           reduce using rule 101 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    SQRT            reduce using rule 101 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    MULTIPLY        reduce using rule 101 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    DIVIDE          reduce using rule 101 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    PLUS            reduce using rule 101 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    MINUS           reduce using rule 101 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    LTHAN           reduce using rule 101 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    GTHAN           reduce using rule 101 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    DIFFERENT       reduce using rule 101 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    EQUIVALENT      reduce using rule 101 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    RSQRBRACKET     reduce using rule 101 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    RPAREN          reduce using rule 101 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    COMMA           reduce using rule 101 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)


state 199

    (104) function_call_params0 -> expression0 neurFuncCallParams1 . function_call_params1
    (108) function_call_params1 -> . COMMA function_call_params0
    (109) function_call_params1 -> . empty
    (171) empty -> .

    COMMA           shift and go to state 203
    RPAREN          reduce using rule 171 (empty -> .)

    function_call_params1          shift and go to state 235
    empty                          shift and go to state 201

state 200

    (105) function_call_params0 -> CONST_STRING neurFuncCallParams1 . function_call_params1
    (108) function_call_params1 -> . COMMA function_call_params0
    (109) function_call_params1 -> . empty
    (171) empty -> .

    COMMA           shift and go to state 203
    RPAREN          reduce using rule 171 (empty -> .)

    function_call_params1          shift and go to state 236
    empty                          shift and go to state 201

state 201

    (109) function_call_params1 -> empty .

    RPAREN          reduce using rule 109 (function_call_params1 -> empty .)


state 202

    (106) function_call_params0 -> empty function_call_params1 .

    RPAREN          reduce using rule 106 (function_call_params0 -> empty function_call_params1 .)


state 203

    (108) function_call_params1 -> COMMA . function_call_params0
    (104) function_call_params0 -> . expression0 neurFuncCallParams1 function_call_params1
    (105) function_call_params0 -> . CONST_STRING neurFuncCallParams1 function_call_params1
    (106) function_call_params0 -> . empty function_call_params1
    (110) expression0 -> . exp0 expression1
    (111) expression0 -> . attr_access0 expression1
    (171) empty -> .
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (121) attr_access0 -> . ID DOT ID
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (103) id_funcCall -> . ID

    CONST_STRING    shift and go to state 155
    COMMA           reduce using rule 171 (empty -> .)
    RPAREN          reduce using rule 171 (empty -> .)
    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    function_call_params0          shift and go to state 237
    expression0                    shift and go to state 154
    empty                          shift and go to state 156
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 204

    (149) while -> WHILE wNeur1 LPAREN expression0 RPAREN . wNeur2 block0 wNeur3
    (151) wNeur2 -> .

    LBRACKET        reduce using rule 151 (wNeur2 -> .)

    wNeur2                         shift and go to state 238

state 205

    (165) object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 . RPAREN SEMICOLON

    RPAREN          shift and go to state 239


state 206

    (166) main0 -> MAIN main_scope LBRACKET main1 RBRACKET .

    $end            reduce using rule 166 (main0 -> MAIN main_scope LBRACKET main1 RBRACKET .)


state 207

    (167) main1 -> declaration0 main1 .

    RBRACKET        reduce using rule 167 (main1 -> declaration0 main1 .)


state 208

    (168) main1 -> statement main1 .

    RBRACKET        reduce using rule 168 (main1 -> statement main1 .)


state 209

    (10) class0 -> CLASS class_id_def class1 LBRACKET class2 constructor . class3 RBRACKET SEMICOLON revert_global
    (19) class3 -> . methods
    (20) class3 -> . empty
    (52) methods -> . data_access function0 methods
    (53) methods -> . empty
    (171) empty -> .
    (123) data_access -> . PRIVATE
    (124) data_access -> . PUBLIC

    RBRACKET        reduce using rule 171 (empty -> .)
    PRIVATE         shift and go to state 170
    PUBLIC          shift and go to state 171

    class3                         shift and go to state 240
    methods                        shift and go to state 241
    empty                          shift and go to state 242
    data_access                    shift and go to state 243

state 210

    (48) constructor -> CONSTRUCT . ID LPAREN params0 RPAREN function_block0

    ID              shift and go to state 244


state 211

    (49) attributes -> data_access simple_declaration . attributes
    (49) attributes -> . data_access simple_declaration attributes
    (50) attributes -> . simple_assignment attributes
    (51) attributes -> . empty
    (123) data_access -> . PRIVATE
    (124) data_access -> . PUBLIC
    (67) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (171) empty -> .

    PRIVATE         shift and go to state 170
    PUBLIC          shift and go to state 171
    ID              shift and go to state 172
    CONSTRUCT       reduce using rule 171 (empty -> .)

    data_access                    shift and go to state 168
    attributes                     shift and go to state 245
    simple_assignment              shift and go to state 169
    empty                          shift and go to state 214

state 212

    (66) simple_declaration -> ID . COLON type SEMICOLON

    COLON           shift and go to state 246


state 213

    (50) attributes -> simple_assignment attributes .

    CONSTRUCT       reduce using rule 50 (attributes -> simple_assignment attributes .)


state 214

    (51) attributes -> empty .

    CONSTRUCT       reduce using rule 51 (attributes -> empty .)


state 215

    (67) simple_assignment -> ID EQUALS . expression0 SEMICOLON
    (110) expression0 -> . exp0 expression1
    (111) expression0 -> . attr_access0 expression1
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (121) attr_access0 -> . ID DOT ID
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (103) id_funcCall -> . ID

    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    expression0                    shift and go to state 247
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 216

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur . ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope

    ARROW           shift and go to state 248


state 217

    (54) params0 -> type ID paramsNeur . params1
    (57) params1 -> . COMMA params0
    (58) params1 -> . empty
    (171) empty -> .

    COMMA           shift and go to state 250
    RPAREN          reduce using rule 171 (empty -> .)

    params1                        shift and go to state 249
    empty                          shift and go to state 251

state 218

    (33) declaration1 -> type isArrayNeur LSQRBRACKET exp0 . limitNeur RSQRBRACKET declaration2 neurMemory
    (34) limitNeur -> .

    RSQRBRACKET     reduce using rule 34 (limitNeur -> .)

    limitNeur                      shift and go to state 252

state 219

    (43) assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 . SEMICOLON

    SEMICOLON       shift and go to state 253


state 220

    (44) assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 . RSQRBRACKET EQUALS expression0 SEMICOLON

    RSQRBRACKET     shift and go to state 254


state 221

    (133) condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 . condition1 SEMICOLON condNeur3
    (136) condition1 -> . ELSE condNeur2 block0
    (137) condition1 -> . empty
    (171) empty -> .

    ELSE            shift and go to state 256
    SEMICOLON       reduce using rule 171 (empty -> .)

    condition1                     shift and go to state 255
    empty                          shift and go to state 257

state 222

    (153) block0 -> LBRACKET . block1 RBRACKET
    (154) block1 -> . statement block1
    (155) block1 -> . empty
    (156) statement -> . assignment0
    (157) statement -> . object_assignment
    (158) statement -> . condition0
    (159) statement -> . writing0
    (160) statement -> . reading
    (161) statement -> . return
    (162) statement -> . function_call SEMICOLON
    (163) statement -> . method_call0 SEMICOLON
    (164) statement -> . while
    (171) empty -> .
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (165) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (133) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3
    (139) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (146) reading -> . READ ID SEMICOLON
    (147) return -> . RETURN expression0 SEMICOLON
    (148) return -> . RETURN SEMICOLON
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (149) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (46) assign_id_def -> . ID
    (103) id_funcCall -> . ID

    RBRACKET        reduce using rule 171 (empty -> .)
    ID              shift and go to state 261
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    block1                         shift and go to state 258
    statement                      shift and go to state 259
    empty                          shift and go to state 260
    assignment0                    shift and go to state 163
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 223

    (139) writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .

    CLASS           reduce using rule 139 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)
    DEF             reduce using rule 139 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)
    ID              reduce using rule 139 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)
    IF              reduce using rule 139 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)
    WRITE           reduce using rule 139 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)
    READ            reduce using rule 139 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)
    RETURN          reduce using rule 139 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)
    WHILE           reduce using rule 139 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)
    MAIN            reduce using rule 139 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 139 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)


state 224

    (144) writing2 -> COMMA writing1 .

    RPAREN          reduce using rule 144 (writing2 -> COMMA writing1 .)


state 225

    (143) writing1 -> CONST_STRING push_string_val writing2 .

    RPAREN          reduce using rule 143 (writing1 -> CONST_STRING push_string_val writing2 .)


state 226

    (119) expression3 -> exp0 check_rel_operator .

    SEMICOLON       reduce using rule 119 (expression3 -> exp0 check_rel_operator .)
    RPAREN          reduce using rule 119 (expression3 -> exp0 check_rel_operator .)
    COMMA           reduce using rule 119 (expression3 -> exp0 check_rel_operator .)


state 227

    (91) power2 -> POWER push_pow_rad_op power0 .

    MULTIPLY        reduce using rule 91 (power2 -> POWER push_pow_rad_op power0 .)
    DIVIDE          reduce using rule 91 (power2 -> POWER push_pow_rad_op power0 .)
    PLUS            reduce using rule 91 (power2 -> POWER push_pow_rad_op power0 .)
    MINUS           reduce using rule 91 (power2 -> POWER push_pow_rad_op power0 .)
    LTHAN           reduce using rule 91 (power2 -> POWER push_pow_rad_op power0 .)
    GTHAN           reduce using rule 91 (power2 -> POWER push_pow_rad_op power0 .)
    DIFFERENT       reduce using rule 91 (power2 -> POWER push_pow_rad_op power0 .)
    EQUIVALENT      reduce using rule 91 (power2 -> POWER push_pow_rad_op power0 .)
    SEMICOLON       reduce using rule 91 (power2 -> POWER push_pow_rad_op power0 .)
    RSQRBRACKET     reduce using rule 91 (power2 -> POWER push_pow_rad_op power0 .)
    RPAREN          reduce using rule 91 (power2 -> POWER push_pow_rad_op power0 .)
    COMMA           reduce using rule 91 (power2 -> POWER push_pow_rad_op power0 .)


state 228

    (92) power2 -> SQRT push_pow_rad_op power0 .

    MULTIPLY        reduce using rule 92 (power2 -> SQRT push_pow_rad_op power0 .)
    DIVIDE          reduce using rule 92 (power2 -> SQRT push_pow_rad_op power0 .)
    PLUS            reduce using rule 92 (power2 -> SQRT push_pow_rad_op power0 .)
    MINUS           reduce using rule 92 (power2 -> SQRT push_pow_rad_op power0 .)
    LTHAN           reduce using rule 92 (power2 -> SQRT push_pow_rad_op power0 .)
    GTHAN           reduce using rule 92 (power2 -> SQRT push_pow_rad_op power0 .)
    DIFFERENT       reduce using rule 92 (power2 -> SQRT push_pow_rad_op power0 .)
    EQUIVALENT      reduce using rule 92 (power2 -> SQRT push_pow_rad_op power0 .)
    SEMICOLON       reduce using rule 92 (power2 -> SQRT push_pow_rad_op power0 .)
    RSQRBRACKET     reduce using rule 92 (power2 -> SQRT push_pow_rad_op power0 .)
    RPAREN          reduce using rule 92 (power2 -> SQRT push_pow_rad_op power0 .)
    COMMA           reduce using rule 92 (power2 -> SQRT push_pow_rad_op power0 .)


state 229

    (70) exp1 -> PLUS push_plus_minus_op exp0 .

    LTHAN           reduce using rule 70 (exp1 -> PLUS push_plus_minus_op exp0 .)
    GTHAN           reduce using rule 70 (exp1 -> PLUS push_plus_minus_op exp0 .)
    DIFFERENT       reduce using rule 70 (exp1 -> PLUS push_plus_minus_op exp0 .)
    EQUIVALENT      reduce using rule 70 (exp1 -> PLUS push_plus_minus_op exp0 .)
    SEMICOLON       reduce using rule 70 (exp1 -> PLUS push_plus_minus_op exp0 .)
    RSQRBRACKET     reduce using rule 70 (exp1 -> PLUS push_plus_minus_op exp0 .)
    RPAREN          reduce using rule 70 (exp1 -> PLUS push_plus_minus_op exp0 .)
    COMMA           reduce using rule 70 (exp1 -> PLUS push_plus_minus_op exp0 .)


state 230

    (71) exp1 -> MINUS push_plus_minus_op exp0 .

    LTHAN           reduce using rule 71 (exp1 -> MINUS push_plus_minus_op exp0 .)
    GTHAN           reduce using rule 71 (exp1 -> MINUS push_plus_minus_op exp0 .)
    DIFFERENT       reduce using rule 71 (exp1 -> MINUS push_plus_minus_op exp0 .)
    EQUIVALENT      reduce using rule 71 (exp1 -> MINUS push_plus_minus_op exp0 .)
    SEMICOLON       reduce using rule 71 (exp1 -> MINUS push_plus_minus_op exp0 .)
    RSQRBRACKET     reduce using rule 71 (exp1 -> MINUS push_plus_minus_op exp0 .)
    RPAREN          reduce using rule 71 (exp1 -> MINUS push_plus_minus_op exp0 .)
    COMMA           reduce using rule 71 (exp1 -> MINUS push_plus_minus_op exp0 .)


state 231

    (86) power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator . power1 power2
    (89) power1 -> . LSQRBRACKET exp0 RSQRBRACKET
    (90) power1 -> . empty
    (171) empty -> .

    LSQRBRACKET     shift and go to state 262
    POWER           reduce using rule 171 (empty -> .)
    SQRT            reduce using rule 171 (empty -> .)
    MULTIPLY        reduce using rule 171 (empty -> .)
    DIVIDE          reduce using rule 171 (empty -> .)
    PLUS            reduce using rule 171 (empty -> .)
    MINUS           reduce using rule 171 (empty -> .)
    LTHAN           reduce using rule 171 (empty -> .)
    GTHAN           reduce using rule 171 (empty -> .)
    DIFFERENT       reduce using rule 171 (empty -> .)
    EQUIVALENT      reduce using rule 171 (empty -> .)
    SEMICOLON       reduce using rule 171 (empty -> .)
    RSQRBRACKET     reduce using rule 171 (empty -> .)
    RPAREN          reduce using rule 171 (empty -> .)
    COMMA           reduce using rule 171 (empty -> .)

    power1                         shift and go to state 263
    empty                          shift and go to state 264

state 232

    (76) term1 -> MULTIPLY push_times_division_op term0 .

    PLUS            reduce using rule 76 (term1 -> MULTIPLY push_times_division_op term0 .)
    MINUS           reduce using rule 76 (term1 -> MULTIPLY push_times_division_op term0 .)
    LTHAN           reduce using rule 76 (term1 -> MULTIPLY push_times_division_op term0 .)
    GTHAN           reduce using rule 76 (term1 -> MULTIPLY push_times_division_op term0 .)
    DIFFERENT       reduce using rule 76 (term1 -> MULTIPLY push_times_division_op term0 .)
    EQUIVALENT      reduce using rule 76 (term1 -> MULTIPLY push_times_division_op term0 .)
    SEMICOLON       reduce using rule 76 (term1 -> MULTIPLY push_times_division_op term0 .)
    RSQRBRACKET     reduce using rule 76 (term1 -> MULTIPLY push_times_division_op term0 .)
    RPAREN          reduce using rule 76 (term1 -> MULTIPLY push_times_division_op term0 .)
    COMMA           reduce using rule 76 (term1 -> MULTIPLY push_times_division_op term0 .)


state 233

    (77) term1 -> DIVIDE push_times_division_op term0 .

    PLUS            reduce using rule 77 (term1 -> DIVIDE push_times_division_op term0 .)
    MINUS           reduce using rule 77 (term1 -> DIVIDE push_times_division_op term0 .)
    LTHAN           reduce using rule 77 (term1 -> DIVIDE push_times_division_op term0 .)
    GTHAN           reduce using rule 77 (term1 -> DIVIDE push_times_division_op term0 .)
    DIFFERENT       reduce using rule 77 (term1 -> DIVIDE push_times_division_op term0 .)
    EQUIVALENT      reduce using rule 77 (term1 -> DIVIDE push_times_division_op term0 .)
    SEMICOLON       reduce using rule 77 (term1 -> DIVIDE push_times_division_op term0 .)
    RSQRBRACKET     reduce using rule 77 (term1 -> DIVIDE push_times_division_op term0 .)
    RPAREN          reduce using rule 77 (term1 -> DIVIDE push_times_division_op term0 .)
    COMMA           reduce using rule 77 (term1 -> DIVIDE push_times_division_op term0 .)


state 234

    (81) power0 -> LPAREN open_paren exp0 RPAREN close_paren . check_pow_rad_operator power2
    (95) check_pow_rad_operator -> .

    POWER           reduce using rule 95 (check_pow_rad_operator -> .)
    SQRT            reduce using rule 95 (check_pow_rad_operator -> .)
    MULTIPLY        reduce using rule 95 (check_pow_rad_operator -> .)
    DIVIDE          reduce using rule 95 (check_pow_rad_operator -> .)
    PLUS            reduce using rule 95 (check_pow_rad_operator -> .)
    MINUS           reduce using rule 95 (check_pow_rad_operator -> .)
    LTHAN           reduce using rule 95 (check_pow_rad_operator -> .)
    GTHAN           reduce using rule 95 (check_pow_rad_operator -> .)
    DIFFERENT       reduce using rule 95 (check_pow_rad_operator -> .)
    EQUIVALENT      reduce using rule 95 (check_pow_rad_operator -> .)
    SEMICOLON       reduce using rule 95 (check_pow_rad_operator -> .)
    RSQRBRACKET     reduce using rule 95 (check_pow_rad_operator -> .)
    RPAREN          reduce using rule 95 (check_pow_rad_operator -> .)
    COMMA           reduce using rule 95 (check_pow_rad_operator -> .)

    check_pow_rad_operator         shift and go to state 265

state 235

    (104) function_call_params0 -> expression0 neurFuncCallParams1 function_call_params1 .

    RPAREN          reduce using rule 104 (function_call_params0 -> expression0 neurFuncCallParams1 function_call_params1 .)


state 236

    (105) function_call_params0 -> CONST_STRING neurFuncCallParams1 function_call_params1 .

    RPAREN          reduce using rule 105 (function_call_params0 -> CONST_STRING neurFuncCallParams1 function_call_params1 .)


state 237

    (108) function_call_params1 -> COMMA function_call_params0 .

    RPAREN          reduce using rule 108 (function_call_params1 -> COMMA function_call_params0 .)


state 238

    (149) while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 . block0 wNeur3
    (153) block0 -> . LBRACKET block1 RBRACKET

    LBRACKET        shift and go to state 222

    block0                         shift and go to state 266

state 239

    (165) object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 267


state 240

    (10) class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 . RBRACKET SEMICOLON revert_global

    RBRACKET        shift and go to state 268


state 241

    (19) class3 -> methods .

    RBRACKET        reduce using rule 19 (class3 -> methods .)


state 242

    (20) class3 -> empty .
    (53) methods -> empty .

  ! reduce/reduce conflict for RBRACKET resolved using rule 20 (class3 -> empty .)
    RBRACKET        reduce using rule 20 (class3 -> empty .)

  ! RBRACKET        [ reduce using rule 53 (methods -> empty .) ]


state 243

    (52) methods -> data_access . function0 methods
    (21) function0 -> . DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope

    DEF             shift and go to state 24

    function0                      shift and go to state 269

state 244

    (48) constructor -> CONSTRUCT ID . LPAREN params0 RPAREN function_block0

    LPAREN          shift and go to state 270


state 245

    (49) attributes -> data_access simple_declaration attributes .

    CONSTRUCT       reduce using rule 49 (attributes -> data_access simple_declaration attributes .)


state 246

    (66) simple_declaration -> ID COLON . type SEMICOLON
    (62) type -> . INT
    (63) type -> . FLOAT
    (64) type -> . STRING
    (65) type -> . BOOL

    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    STRING          shift and go to state 83
    BOOL            shift and go to state 84

    type                           shift and go to state 271

state 247

    (67) simple_assignment -> ID EQUALS expression0 . SEMICOLON

    SEMICOLON       shift and go to state 272


state 248

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW . function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (24) function1 -> . type
    (25) function1 -> . VOID
    (62) type -> . INT
    (63) type -> . FLOAT
    (64) type -> . STRING
    (65) type -> . BOOL

    VOID            shift and go to state 275
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    STRING          shift and go to state 83
    BOOL            shift and go to state 84

    function1                      shift and go to state 273
    type                           shift and go to state 274

state 249

    (54) params0 -> type ID paramsNeur params1 .

    RPAREN          reduce using rule 54 (params0 -> type ID paramsNeur params1 .)


state 250

    (57) params1 -> COMMA . params0
    (54) params0 -> . type ID paramsNeur params1
    (55) params0 -> . empty
    (62) type -> . INT
    (63) type -> . FLOAT
    (64) type -> . STRING
    (65) type -> . BOOL
    (171) empty -> .

    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    STRING          shift and go to state 83
    BOOL            shift and go to state 84
    RPAREN          reduce using rule 171 (empty -> .)

    params0                        shift and go to state 276
    type                           shift and go to state 119
    empty                          shift and go to state 120

state 251

    (58) params1 -> empty .

    RPAREN          reduce using rule 58 (params1 -> empty .)


state 252

    (33) declaration1 -> type isArrayNeur LSQRBRACKET exp0 limitNeur . RSQRBRACKET declaration2 neurMemory

    RSQRBRACKET     shift and go to state 277


state 253

    (43) assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .

    CLASS           reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    DEF             reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    ID              reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    IF              reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    WRITE           reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    READ            reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    RETURN          reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    WHILE           reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    MAIN            reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    RBRACKET        reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)


state 254

    (44) assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET . EQUALS expression0 SEMICOLON

    EQUALS          shift and go to state 278


state 255

    (133) condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 . SEMICOLON condNeur3

    SEMICOLON       shift and go to state 279


state 256

    (136) condition1 -> ELSE . condNeur2 block0
    (138) condNeur2 -> .

    LBRACKET        reduce using rule 138 (condNeur2 -> .)

    condNeur2                      shift and go to state 280

state 257

    (137) condition1 -> empty .

    SEMICOLON       reduce using rule 137 (condition1 -> empty .)


state 258

    (153) block0 -> LBRACKET block1 . RBRACKET

    RBRACKET        shift and go to state 281


state 259

    (154) block1 -> statement . block1
    (154) block1 -> . statement block1
    (155) block1 -> . empty
    (156) statement -> . assignment0
    (157) statement -> . object_assignment
    (158) statement -> . condition0
    (159) statement -> . writing0
    (160) statement -> . reading
    (161) statement -> . return
    (162) statement -> . function_call SEMICOLON
    (163) statement -> . method_call0 SEMICOLON
    (164) statement -> . while
    (171) empty -> .
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (165) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (133) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3
    (139) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (146) reading -> . READ ID SEMICOLON
    (147) return -> . RETURN expression0 SEMICOLON
    (148) return -> . RETURN SEMICOLON
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (149) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (46) assign_id_def -> . ID
    (103) id_funcCall -> . ID

    RBRACKET        reduce using rule 171 (empty -> .)
    ID              shift and go to state 261
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    statement                      shift and go to state 259
    block1                         shift and go to state 282
    empty                          shift and go to state 260
    assignment0                    shift and go to state 163
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 260

    (155) block1 -> empty .

    RBRACKET        reduce using rule 155 (block1 -> empty .)


state 261

    (42) assignment0 -> ID . EQUALS expression0 SEMICOLON
    (165) object_assignment -> ID . EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (122) method_call0 -> ID . DOT function_call
    (46) assign_id_def -> ID .
    (103) id_funcCall -> ID .

    EQUALS          shift and go to state 33
    DOT             shift and go to state 34
    LSQRBRACKET     reduce using rule 46 (assign_id_def -> ID .)
    LPAREN          reduce using rule 103 (id_funcCall -> ID .)


state 262

    (89) power1 -> LSQRBRACKET . exp0 RSQRBRACKET
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (121) attr_access0 -> . ID DOT ID
    (103) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 88
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 283
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 87
    id_funcCall                    shift and go to state 31

state 263

    (86) power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 . power2
    (91) power2 -> . POWER push_pow_rad_op power0
    (92) power2 -> . SQRT push_pow_rad_op power0
    (93) power2 -> . empty
    (171) empty -> .

    POWER           shift and go to state 136
    SQRT            shift and go to state 137
    MULTIPLY        reduce using rule 171 (empty -> .)
    DIVIDE          reduce using rule 171 (empty -> .)
    PLUS            reduce using rule 171 (empty -> .)
    MINUS           reduce using rule 171 (empty -> .)
    LTHAN           reduce using rule 171 (empty -> .)
    GTHAN           reduce using rule 171 (empty -> .)
    DIFFERENT       reduce using rule 171 (empty -> .)
    EQUIVALENT      reduce using rule 171 (empty -> .)
    SEMICOLON       reduce using rule 171 (empty -> .)
    RSQRBRACKET     reduce using rule 171 (empty -> .)
    RPAREN          reduce using rule 171 (empty -> .)
    COMMA           reduce using rule 171 (empty -> .)

    power2                         shift and go to state 284
    empty                          shift and go to state 138

state 264

    (90) power1 -> empty .

    POWER           reduce using rule 90 (power1 -> empty .)
    SQRT            reduce using rule 90 (power1 -> empty .)
    MULTIPLY        reduce using rule 90 (power1 -> empty .)
    DIVIDE          reduce using rule 90 (power1 -> empty .)
    PLUS            reduce using rule 90 (power1 -> empty .)
    MINUS           reduce using rule 90 (power1 -> empty .)
    LTHAN           reduce using rule 90 (power1 -> empty .)
    GTHAN           reduce using rule 90 (power1 -> empty .)
    DIFFERENT       reduce using rule 90 (power1 -> empty .)
    EQUIVALENT      reduce using rule 90 (power1 -> empty .)
    SEMICOLON       reduce using rule 90 (power1 -> empty .)
    RSQRBRACKET     reduce using rule 90 (power1 -> empty .)
    RPAREN          reduce using rule 90 (power1 -> empty .)
    COMMA           reduce using rule 90 (power1 -> empty .)


state 265

    (81) power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator . power2
    (91) power2 -> . POWER push_pow_rad_op power0
    (92) power2 -> . SQRT push_pow_rad_op power0
    (93) power2 -> . empty
    (171) empty -> .

    POWER           shift and go to state 136
    SQRT            shift and go to state 137
    MULTIPLY        reduce using rule 171 (empty -> .)
    DIVIDE          reduce using rule 171 (empty -> .)
    PLUS            reduce using rule 171 (empty -> .)
    MINUS           reduce using rule 171 (empty -> .)
    LTHAN           reduce using rule 171 (empty -> .)
    GTHAN           reduce using rule 171 (empty -> .)
    DIFFERENT       reduce using rule 171 (empty -> .)
    EQUIVALENT      reduce using rule 171 (empty -> .)
    SEMICOLON       reduce using rule 171 (empty -> .)
    RSQRBRACKET     reduce using rule 171 (empty -> .)
    RPAREN          reduce using rule 171 (empty -> .)
    COMMA           reduce using rule 171 (empty -> .)

    power2                         shift and go to state 285
    empty                          shift and go to state 138

state 266

    (149) while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 . wNeur3
    (152) wNeur3 -> .

    CLASS           reduce using rule 152 (wNeur3 -> .)
    DEF             reduce using rule 152 (wNeur3 -> .)
    ID              reduce using rule 152 (wNeur3 -> .)
    IF              reduce using rule 152 (wNeur3 -> .)
    WRITE           reduce using rule 152 (wNeur3 -> .)
    READ            reduce using rule 152 (wNeur3 -> .)
    RETURN          reduce using rule 152 (wNeur3 -> .)
    WHILE           reduce using rule 152 (wNeur3 -> .)
    MAIN            reduce using rule 152 (wNeur3 -> .)
    RBRACKET        reduce using rule 152 (wNeur3 -> .)

    wNeur3                         shift and go to state 286

state 267

    (165) object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .

    CLASS           reduce using rule 165 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    DEF             reduce using rule 165 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    ID              reduce using rule 165 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    IF              reduce using rule 165 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    WRITE           reduce using rule 165 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    READ            reduce using rule 165 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    RETURN          reduce using rule 165 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    WHILE           reduce using rule 165 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    MAIN            reduce using rule 165 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 165 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)


state 268

    (10) class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET . SEMICOLON revert_global

    SEMICOLON       shift and go to state 287


state 269

    (52) methods -> data_access function0 . methods
    (52) methods -> . data_access function0 methods
    (53) methods -> . empty
    (123) data_access -> . PRIVATE
    (124) data_access -> . PUBLIC
    (171) empty -> .

    PRIVATE         shift and go to state 170
    PUBLIC          shift and go to state 171
    RBRACKET        reduce using rule 171 (empty -> .)

    data_access                    shift and go to state 243
    methods                        shift and go to state 288
    empty                          shift and go to state 289

state 270

    (48) constructor -> CONSTRUCT ID LPAREN . params0 RPAREN function_block0
    (54) params0 -> . type ID paramsNeur params1
    (55) params0 -> . empty
    (62) type -> . INT
    (63) type -> . FLOAT
    (64) type -> . STRING
    (65) type -> . BOOL
    (171) empty -> .

    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    STRING          shift and go to state 83
    BOOL            shift and go to state 84
    RPAREN          reduce using rule 171 (empty -> .)

    params0                        shift and go to state 290
    type                           shift and go to state 119
    empty                          shift and go to state 120

state 271

    (66) simple_declaration -> ID COLON type . SEMICOLON

    SEMICOLON       shift and go to state 291


state 272

    (67) simple_assignment -> ID EQUALS expression0 SEMICOLON .

    PRIVATE         reduce using rule 67 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    PUBLIC          reduce using rule 67 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    ID              reduce using rule 67 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    CONSTRUCT       reduce using rule 67 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    RSQRBRACKET     reduce using rule 67 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    IF              reduce using rule 67 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    WRITE           reduce using rule 67 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    READ            reduce using rule 67 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    RETURN          reduce using rule 67 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    WHILE           reduce using rule 67 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    RBRACKET        reduce using rule 67 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)


state 273

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 . LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope

    LSQRBRACKET     shift and go to state 292


state 274

    (24) function1 -> type .

    LSQRBRACKET     reduce using rule 24 (function1 -> type .)


state 275

    (25) function1 -> VOID .

    LSQRBRACKET     reduce using rule 25 (function1 -> VOID .)


state 276

    (57) params1 -> COMMA params0 .

    RPAREN          reduce using rule 57 (params1 -> COMMA params0 .)


state 277

    (33) declaration1 -> type isArrayNeur LSQRBRACKET exp0 limitNeur RSQRBRACKET . declaration2 neurMemory
    (38) declaration2 -> . dim2Neur LSQRBRACKET exp0 limitNeur2 RSQRBRACKET
    (39) declaration2 -> . empty
    (40) dim2Neur -> .
    (171) empty -> .

    LSQRBRACKET     reduce using rule 40 (dim2Neur -> .)
    SEMICOLON       reduce using rule 171 (empty -> .)

    declaration2                   shift and go to state 293
    dim2Neur                       shift and go to state 294
    empty                          shift and go to state 295

state 278

    (44) assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS . expression0 SEMICOLON
    (110) expression0 -> . exp0 expression1
    (111) expression0 -> . attr_access0 expression1
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (121) attr_access0 -> . ID DOT ID
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (103) id_funcCall -> . ID

    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 56
    expression0                    shift and go to state 296
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 279

    (133) condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON . condNeur3
    (135) condNeur3 -> .

    CLASS           reduce using rule 135 (condNeur3 -> .)
    DEF             reduce using rule 135 (condNeur3 -> .)
    ID              reduce using rule 135 (condNeur3 -> .)
    IF              reduce using rule 135 (condNeur3 -> .)
    WRITE           reduce using rule 135 (condNeur3 -> .)
    READ            reduce using rule 135 (condNeur3 -> .)
    RETURN          reduce using rule 135 (condNeur3 -> .)
    WHILE           reduce using rule 135 (condNeur3 -> .)
    MAIN            reduce using rule 135 (condNeur3 -> .)
    RBRACKET        reduce using rule 135 (condNeur3 -> .)

    condNeur3                      shift and go to state 297

state 280

    (136) condition1 -> ELSE condNeur2 . block0
    (153) block0 -> . LBRACKET block1 RBRACKET

    LBRACKET        shift and go to state 222

    block0                         shift and go to state 298

state 281

    (153) block0 -> LBRACKET block1 RBRACKET .

    ELSE            reduce using rule 153 (block0 -> LBRACKET block1 RBRACKET .)
    SEMICOLON       reduce using rule 153 (block0 -> LBRACKET block1 RBRACKET .)
    CLASS           reduce using rule 153 (block0 -> LBRACKET block1 RBRACKET .)
    DEF             reduce using rule 153 (block0 -> LBRACKET block1 RBRACKET .)
    ID              reduce using rule 153 (block0 -> LBRACKET block1 RBRACKET .)
    IF              reduce using rule 153 (block0 -> LBRACKET block1 RBRACKET .)
    WRITE           reduce using rule 153 (block0 -> LBRACKET block1 RBRACKET .)
    READ            reduce using rule 153 (block0 -> LBRACKET block1 RBRACKET .)
    RETURN          reduce using rule 153 (block0 -> LBRACKET block1 RBRACKET .)
    WHILE           reduce using rule 153 (block0 -> LBRACKET block1 RBRACKET .)
    MAIN            reduce using rule 153 (block0 -> LBRACKET block1 RBRACKET .)
    RBRACKET        reduce using rule 153 (block0 -> LBRACKET block1 RBRACKET .)


state 282

    (154) block1 -> statement block1 .

    RBRACKET        reduce using rule 154 (block1 -> statement block1 .)


state 283

    (89) power1 -> LSQRBRACKET exp0 . RSQRBRACKET

    RSQRBRACKET     shift and go to state 299


state 284

    (86) power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .

    MULTIPLY        reduce using rule 86 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    DIVIDE          reduce using rule 86 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    PLUS            reduce using rule 86 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    MINUS           reduce using rule 86 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    LTHAN           reduce using rule 86 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    GTHAN           reduce using rule 86 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    DIFFERENT       reduce using rule 86 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    EQUIVALENT      reduce using rule 86 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    SEMICOLON       reduce using rule 86 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    RSQRBRACKET     reduce using rule 86 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    RPAREN          reduce using rule 86 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    COMMA           reduce using rule 86 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)


state 285

    (81) power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .

    MULTIPLY        reduce using rule 81 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    DIVIDE          reduce using rule 81 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    PLUS            reduce using rule 81 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    MINUS           reduce using rule 81 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    LTHAN           reduce using rule 81 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    GTHAN           reduce using rule 81 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    DIFFERENT       reduce using rule 81 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    EQUIVALENT      reduce using rule 81 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    SEMICOLON       reduce using rule 81 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    RSQRBRACKET     reduce using rule 81 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    RPAREN          reduce using rule 81 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    COMMA           reduce using rule 81 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)


state 286

    (149) while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .

    CLASS           reduce using rule 149 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)
    DEF             reduce using rule 149 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)
    ID              reduce using rule 149 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)
    IF              reduce using rule 149 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)
    WRITE           reduce using rule 149 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)
    READ            reduce using rule 149 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)
    RETURN          reduce using rule 149 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)
    WHILE           reduce using rule 149 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)
    MAIN            reduce using rule 149 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)
    RBRACKET        reduce using rule 149 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)


state 287

    (10) class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON . revert_global
    (11) revert_global -> .

    CLASS           reduce using rule 11 (revert_global -> .)
    DEF             reduce using rule 11 (revert_global -> .)
    ID              reduce using rule 11 (revert_global -> .)
    IF              reduce using rule 11 (revert_global -> .)
    WRITE           reduce using rule 11 (revert_global -> .)
    READ            reduce using rule 11 (revert_global -> .)
    RETURN          reduce using rule 11 (revert_global -> .)
    WHILE           reduce using rule 11 (revert_global -> .)
    MAIN            reduce using rule 11 (revert_global -> .)

    revert_global                  shift and go to state 300

state 288

    (52) methods -> data_access function0 methods .

    RBRACKET        reduce using rule 52 (methods -> data_access function0 methods .)


state 289

    (53) methods -> empty .

    RBRACKET        reduce using rule 53 (methods -> empty .)


state 290

    (48) constructor -> CONSTRUCT ID LPAREN params0 . RPAREN function_block0

    RPAREN          shift and go to state 301


state 291

    (66) simple_declaration -> ID COLON type SEMICOLON .

    PRIVATE         reduce using rule 66 (simple_declaration -> ID COLON type SEMICOLON .)
    PUBLIC          reduce using rule 66 (simple_declaration -> ID COLON type SEMICOLON .)
    ID              reduce using rule 66 (simple_declaration -> ID COLON type SEMICOLON .)
    CONSTRUCT       reduce using rule 66 (simple_declaration -> ID COLON type SEMICOLON .)
    RSQRBRACKET     reduce using rule 66 (simple_declaration -> ID COLON type SEMICOLON .)


state 292

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET . LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope

    LSQRBRACKET     shift and go to state 302


state 293

    (33) declaration1 -> type isArrayNeur LSQRBRACKET exp0 limitNeur RSQRBRACKET declaration2 . neurMemory
    (37) neurMemory -> .

    SEMICOLON       reduce using rule 37 (neurMemory -> .)

    neurMemory                     shift and go to state 303

state 294

    (38) declaration2 -> dim2Neur . LSQRBRACKET exp0 limitNeur2 RSQRBRACKET

    LSQRBRACKET     shift and go to state 304


state 295

    (39) declaration2 -> empty .

    SEMICOLON       reduce using rule 39 (declaration2 -> empty .)


state 296

    (44) assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 . SEMICOLON

    SEMICOLON       shift and go to state 305


state 297

    (133) condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3 .

    CLASS           reduce using rule 133 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3 .)
    DEF             reduce using rule 133 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3 .)
    ID              reduce using rule 133 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3 .)
    IF              reduce using rule 133 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3 .)
    WRITE           reduce using rule 133 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3 .)
    READ            reduce using rule 133 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3 .)
    RETURN          reduce using rule 133 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3 .)
    WHILE           reduce using rule 133 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3 .)
    MAIN            reduce using rule 133 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3 .)
    RBRACKET        reduce using rule 133 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3 .)


state 298

    (136) condition1 -> ELSE condNeur2 block0 .

    SEMICOLON       reduce using rule 136 (condition1 -> ELSE condNeur2 block0 .)


state 299

    (89) power1 -> LSQRBRACKET exp0 RSQRBRACKET .

    POWER           reduce using rule 89 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    SQRT            reduce using rule 89 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    MULTIPLY        reduce using rule 89 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    DIVIDE          reduce using rule 89 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    PLUS            reduce using rule 89 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    MINUS           reduce using rule 89 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    LTHAN           reduce using rule 89 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    GTHAN           reduce using rule 89 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    DIFFERENT       reduce using rule 89 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    EQUIVALENT      reduce using rule 89 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    SEMICOLON       reduce using rule 89 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    RSQRBRACKET     reduce using rule 89 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    RPAREN          reduce using rule 89 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    COMMA           reduce using rule 89 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)


state 300

    (10) class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .

    CLASS           reduce using rule 10 (class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .)
    DEF             reduce using rule 10 (class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .)
    ID              reduce using rule 10 (class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .)
    IF              reduce using rule 10 (class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .)
    WRITE           reduce using rule 10 (class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .)
    READ            reduce using rule 10 (class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .)
    RETURN          reduce using rule 10 (class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .)
    WHILE           reduce using rule 10 (class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .)
    MAIN            reduce using rule 10 (class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .)


state 301

    (48) constructor -> CONSTRUCT ID LPAREN params0 RPAREN . function_block0
    (59) function_block0 -> . LBRACKET function_block1 RBRACKET

    LBRACKET        shift and go to state 307

    function_block0                shift and go to state 306

state 302

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET . function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (26) function2 -> . simple_declaration function2
    (27) function2 -> . simple_assignment function2
    (28) function2 -> . empty
    (66) simple_declaration -> . ID COLON type SEMICOLON
    (67) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (171) empty -> .

    ID              shift and go to state 312
    RSQRBRACKET     reduce using rule 171 (empty -> .)

    function2                      shift and go to state 308
    simple_declaration             shift and go to state 309
    simple_assignment              shift and go to state 310
    empty                          shift and go to state 311

state 303

    (33) declaration1 -> type isArrayNeur LSQRBRACKET exp0 limitNeur RSQRBRACKET declaration2 neurMemory .

    SEMICOLON       reduce using rule 33 (declaration1 -> type isArrayNeur LSQRBRACKET exp0 limitNeur RSQRBRACKET declaration2 neurMemory .)


state 304

    (38) declaration2 -> dim2Neur LSQRBRACKET . exp0 limitNeur2 RSQRBRACKET
    (69) exp0 -> . term0 check_last_plus_minus_operator exp1
    (75) term0 -> . power0 check_last_times_division_operator term1
    (81) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (82) power0 -> . const_var check_pow_rad_operator power2
    (83) power0 -> . function_call check_pow_rad_operator power2
    (84) power0 -> . method_call0 check_pow_rad_operator power2
    (85) power0 -> . attr_access0 check_pow_rad_operator power2
    (86) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (96) const_var -> . CONST_INT neurInt
    (97) const_var -> . CONST_FLOAT neurFloat
    (98) const_var -> . ID
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (121) attr_access0 -> . ID DOT ID
    (103) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 88
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 313
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 87
    id_funcCall                    shift and go to state 31

state 305

    (44) assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .

    CLASS           reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    DEF             reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    ID              reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    IF              reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    WRITE           reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    READ            reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    RETURN          reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    WHILE           reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    MAIN            reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    RBRACKET        reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)


state 306

    (48) constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0 .

    PRIVATE         reduce using rule 48 (constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0 .)
    PUBLIC          reduce using rule 48 (constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0 .)
    RBRACKET        reduce using rule 48 (constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0 .)


state 307

    (59) function_block0 -> LBRACKET . function_block1 RBRACKET
    (60) function_block1 -> . function_statement function_block1
    (61) function_block1 -> . empty
    (125) function_statement -> . simple_assignment
    (126) function_statement -> . condition0
    (127) function_statement -> . writing0
    (128) function_statement -> . reading
    (129) function_statement -> . return
    (130) function_statement -> . function_call SEMICOLON
    (131) function_statement -> . method_call0 SEMICOLON
    (132) function_statement -> . while
    (171) empty -> .
    (67) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (133) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3
    (139) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (146) reading -> . READ ID SEMICOLON
    (147) return -> . RETURN expression0 SEMICOLON
    (148) return -> . RETURN SEMICOLON
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (149) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (103) id_funcCall -> . ID

    RBRACKET        reduce using rule 171 (empty -> .)
    ID              shift and go to state 325
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    function_block1                shift and go to state 314
    function_statement             shift and go to state 315
    empty                          shift and go to state 316
    simple_assignment              shift and go to state 317
    condition0                     shift and go to state 318
    writing0                       shift and go to state 319
    reading                        shift and go to state 320
    return                         shift and go to state 321
    function_call                  shift and go to state 322
    method_call0                   shift and go to state 323
    while                          shift and go to state 324
    id_funcCall                    shift and go to state 31

state 308

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 . RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope

    RSQRBRACKET     shift and go to state 326


state 309

    (26) function2 -> simple_declaration . function2
    (26) function2 -> . simple_declaration function2
    (27) function2 -> . simple_assignment function2
    (28) function2 -> . empty
    (66) simple_declaration -> . ID COLON type SEMICOLON
    (67) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (171) empty -> .

    ID              shift and go to state 312
    RSQRBRACKET     reduce using rule 171 (empty -> .)

    simple_declaration             shift and go to state 309
    function2                      shift and go to state 327
    simple_assignment              shift and go to state 310
    empty                          shift and go to state 311

state 310

    (27) function2 -> simple_assignment . function2
    (26) function2 -> . simple_declaration function2
    (27) function2 -> . simple_assignment function2
    (28) function2 -> . empty
    (66) simple_declaration -> . ID COLON type SEMICOLON
    (67) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (171) empty -> .

    ID              shift and go to state 312
    RSQRBRACKET     reduce using rule 171 (empty -> .)

    simple_assignment              shift and go to state 310
    function2                      shift and go to state 328
    simple_declaration             shift and go to state 309
    empty                          shift and go to state 311

state 311

    (28) function2 -> empty .

    RSQRBRACKET     reduce using rule 28 (function2 -> empty .)


state 312

    (66) simple_declaration -> ID . COLON type SEMICOLON
    (67) simple_assignment -> ID . EQUALS expression0 SEMICOLON

    COLON           shift and go to state 246
    EQUALS          shift and go to state 215


state 313

    (38) declaration2 -> dim2Neur LSQRBRACKET exp0 . limitNeur2 RSQRBRACKET
    (41) limitNeur2 -> .

    RSQRBRACKET     reduce using rule 41 (limitNeur2 -> .)

    limitNeur2                     shift and go to state 329

state 314

    (59) function_block0 -> LBRACKET function_block1 . RBRACKET

    RBRACKET        shift and go to state 330


state 315

    (60) function_block1 -> function_statement . function_block1
    (60) function_block1 -> . function_statement function_block1
    (61) function_block1 -> . empty
    (125) function_statement -> . simple_assignment
    (126) function_statement -> . condition0
    (127) function_statement -> . writing0
    (128) function_statement -> . reading
    (129) function_statement -> . return
    (130) function_statement -> . function_call SEMICOLON
    (131) function_statement -> . method_call0 SEMICOLON
    (132) function_statement -> . while
    (171) empty -> .
    (67) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (133) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 SEMICOLON condNeur3
    (139) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (146) reading -> . READ ID SEMICOLON
    (147) return -> . RETURN expression0 SEMICOLON
    (148) return -> . RETURN SEMICOLON
    (101) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (122) method_call0 -> . ID DOT function_call
    (149) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (103) id_funcCall -> . ID

    RBRACKET        reduce using rule 171 (empty -> .)
    ID              shift and go to state 325
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    function_statement             shift and go to state 315
    function_block1                shift and go to state 331
    empty                          shift and go to state 316
    simple_assignment              shift and go to state 317
    condition0                     shift and go to state 318
    writing0                       shift and go to state 319
    reading                        shift and go to state 320
    return                         shift and go to state 321
    function_call                  shift and go to state 322
    method_call0                   shift and go to state 323
    while                          shift and go to state 324
    id_funcCall                    shift and go to state 31

state 316

    (61) function_block1 -> empty .

    RBRACKET        reduce using rule 61 (function_block1 -> empty .)


state 317

    (125) function_statement -> simple_assignment .

    ID              reduce using rule 125 (function_statement -> simple_assignment .)
    IF              reduce using rule 125 (function_statement -> simple_assignment .)
    WRITE           reduce using rule 125 (function_statement -> simple_assignment .)
    READ            reduce using rule 125 (function_statement -> simple_assignment .)
    RETURN          reduce using rule 125 (function_statement -> simple_assignment .)
    WHILE           reduce using rule 125 (function_statement -> simple_assignment .)
    RBRACKET        reduce using rule 125 (function_statement -> simple_assignment .)


state 318

    (126) function_statement -> condition0 .

    ID              reduce using rule 126 (function_statement -> condition0 .)
    IF              reduce using rule 126 (function_statement -> condition0 .)
    WRITE           reduce using rule 126 (function_statement -> condition0 .)
    READ            reduce using rule 126 (function_statement -> condition0 .)
    RETURN          reduce using rule 126 (function_statement -> condition0 .)
    WHILE           reduce using rule 126 (function_statement -> condition0 .)
    RBRACKET        reduce using rule 126 (function_statement -> condition0 .)


state 319

    (127) function_statement -> writing0 .

    ID              reduce using rule 127 (function_statement -> writing0 .)
    IF              reduce using rule 127 (function_statement -> writing0 .)
    WRITE           reduce using rule 127 (function_statement -> writing0 .)
    READ            reduce using rule 127 (function_statement -> writing0 .)
    RETURN          reduce using rule 127 (function_statement -> writing0 .)
    WHILE           reduce using rule 127 (function_statement -> writing0 .)
    RBRACKET        reduce using rule 127 (function_statement -> writing0 .)


state 320

    (128) function_statement -> reading .

    ID              reduce using rule 128 (function_statement -> reading .)
    IF              reduce using rule 128 (function_statement -> reading .)
    WRITE           reduce using rule 128 (function_statement -> reading .)
    READ            reduce using rule 128 (function_statement -> reading .)
    RETURN          reduce using rule 128 (function_statement -> reading .)
    WHILE           reduce using rule 128 (function_statement -> reading .)
    RBRACKET        reduce using rule 128 (function_statement -> reading .)


state 321

    (129) function_statement -> return .

    ID              reduce using rule 129 (function_statement -> return .)
    IF              reduce using rule 129 (function_statement -> return .)
    WRITE           reduce using rule 129 (function_statement -> return .)
    READ            reduce using rule 129 (function_statement -> return .)
    RETURN          reduce using rule 129 (function_statement -> return .)
    WHILE           reduce using rule 129 (function_statement -> return .)
    RBRACKET        reduce using rule 129 (function_statement -> return .)


state 322

    (130) function_statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 332


state 323

    (131) function_statement -> method_call0 . SEMICOLON

    SEMICOLON       shift and go to state 333


state 324

    (132) function_statement -> while .

    ID              reduce using rule 132 (function_statement -> while .)
    IF              reduce using rule 132 (function_statement -> while .)
    WRITE           reduce using rule 132 (function_statement -> while .)
    READ            reduce using rule 132 (function_statement -> while .)
    RETURN          reduce using rule 132 (function_statement -> while .)
    WHILE           reduce using rule 132 (function_statement -> while .)
    RBRACKET        reduce using rule 132 (function_statement -> while .)


state 325

    (67) simple_assignment -> ID . EQUALS expression0 SEMICOLON
    (122) method_call0 -> ID . DOT function_call
    (103) id_funcCall -> ID .

    EQUALS          shift and go to state 215
    DOT             shift and go to state 34
    LPAREN          reduce using rule 103 (id_funcCall -> ID .)


state 326

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET . RSQRBRACKET startFuncNeur function_block0 revert_scope

    RSQRBRACKET     shift and go to state 334


state 327

    (26) function2 -> simple_declaration function2 .

    RSQRBRACKET     reduce using rule 26 (function2 -> simple_declaration function2 .)


state 328

    (27) function2 -> simple_assignment function2 .

    RSQRBRACKET     reduce using rule 27 (function2 -> simple_assignment function2 .)


state 329

    (38) declaration2 -> dim2Neur LSQRBRACKET exp0 limitNeur2 . RSQRBRACKET

    RSQRBRACKET     shift and go to state 335


state 330

    (59) function_block0 -> LBRACKET function_block1 RBRACKET .

    PRIVATE         reduce using rule 59 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    PUBLIC          reduce using rule 59 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    RBRACKET        reduce using rule 59 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    CLASS           reduce using rule 59 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    DEF             reduce using rule 59 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    ID              reduce using rule 59 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    IF              reduce using rule 59 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    WRITE           reduce using rule 59 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    READ            reduce using rule 59 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    RETURN          reduce using rule 59 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    WHILE           reduce using rule 59 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    MAIN            reduce using rule 59 (function_block0 -> LBRACKET function_block1 RBRACKET .)


state 331

    (60) function_block1 -> function_statement function_block1 .

    RBRACKET        reduce using rule 60 (function_block1 -> function_statement function_block1 .)


state 332

    (130) function_statement -> function_call SEMICOLON .

    ID              reduce using rule 130 (function_statement -> function_call SEMICOLON .)
    IF              reduce using rule 130 (function_statement -> function_call SEMICOLON .)
    WRITE           reduce using rule 130 (function_statement -> function_call SEMICOLON .)
    READ            reduce using rule 130 (function_statement -> function_call SEMICOLON .)
    RETURN          reduce using rule 130 (function_statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 130 (function_statement -> function_call SEMICOLON .)
    RBRACKET        reduce using rule 130 (function_statement -> function_call SEMICOLON .)


state 333

    (131) function_statement -> method_call0 SEMICOLON .

    ID              reduce using rule 131 (function_statement -> method_call0 SEMICOLON .)
    IF              reduce using rule 131 (function_statement -> method_call0 SEMICOLON .)
    WRITE           reduce using rule 131 (function_statement -> method_call0 SEMICOLON .)
    READ            reduce using rule 131 (function_statement -> method_call0 SEMICOLON .)
    RETURN          reduce using rule 131 (function_statement -> method_call0 SEMICOLON .)
    WHILE           reduce using rule 131 (function_statement -> method_call0 SEMICOLON .)
    RBRACKET        reduce using rule 131 (function_statement -> method_call0 SEMICOLON .)


state 334

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET . startFuncNeur function_block0 revert_scope
    (23) startFuncNeur -> .

    LBRACKET        reduce using rule 23 (startFuncNeur -> .)

    startFuncNeur                  shift and go to state 336

state 335

    (38) declaration2 -> dim2Neur LSQRBRACKET exp0 limitNeur2 RSQRBRACKET .

    SEMICOLON       reduce using rule 38 (declaration2 -> dim2Neur LSQRBRACKET exp0 limitNeur2 RSQRBRACKET .)


state 336

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur . function_block0 revert_scope
    (59) function_block0 -> . LBRACKET function_block1 RBRACKET

    LBRACKET        shift and go to state 307

    function_block0                shift and go to state 337

state 337

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 . revert_scope
    (12) revert_scope -> .

    CLASS           reduce using rule 12 (revert_scope -> .)
    DEF             reduce using rule 12 (revert_scope -> .)
    ID              reduce using rule 12 (revert_scope -> .)
    IF              reduce using rule 12 (revert_scope -> .)
    WRITE           reduce using rule 12 (revert_scope -> .)
    READ            reduce using rule 12 (revert_scope -> .)
    RETURN          reduce using rule 12 (revert_scope -> .)
    WHILE           reduce using rule 12 (revert_scope -> .)
    MAIN            reduce using rule 12 (revert_scope -> .)
    PRIVATE         reduce using rule 12 (revert_scope -> .)
    PUBLIC          reduce using rule 12 (revert_scope -> .)
    RBRACKET        reduce using rule 12 (revert_scope -> .)

    revert_scope                   shift and go to state 338

state 338

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .

    CLASS           reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    DEF             reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    ID              reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    IF              reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    WRITE           reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    READ            reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    RETURN          reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    WHILE           reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    MAIN            reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    PRIVATE         reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    PUBLIC          reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    RBRACKET        reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CLASS in state 13 resolved as shift
WARNING: shift/reduce conflict for DEF in state 13 resolved as shift
WARNING: shift/reduce conflict for ID in state 13 resolved as shift
WARNING: shift/reduce conflict for IF in state 13 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 13 resolved as shift
WARNING: shift/reduce conflict for READ in state 13 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 13 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 13 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 57 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 57 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 57 resolved as shift
WARNING: shift/reduce conflict for EQUIVALENT in state 57 resolved as shift
WARNING: reduce/reduce conflict in state 13 resolved using rule (statement -> assignment0)
WARNING: rejected rule (empty -> <empty>) in state 13
WARNING: reduce/reduce conflict in state 57 resolved using rule (check_pow_rad_operator -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 57
WARNING: reduce/reduce conflict in state 167 resolved using rule (class2 -> empty)
WARNING: rejected rule (attributes -> empty) in state 167
WARNING: reduce/reduce conflict in state 186 resolved using rule (check_pow_rad_operator -> <empty>)
WARNING: rejected rule (expression3 -> attr_access0) in state 186
WARNING: reduce/reduce conflict in state 242 resolved using rule (class3 -> empty)
WARNING: rejected rule (methods -> empty) in state 242
WARNING: Rule (expression3 -> attr_access0) is never reduced
