Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> routine0
Rule 1     routine0 -> ROUTINE ID SEMICOLON global_scope routine1 main0
Rule 2     routine1 -> class0 routine1
Rule 3     routine1 -> function0 routine1
Rule 4     routine1 -> declaration0 routine1
Rule 5     routine1 -> assignment0 routine1
Rule 6     routine1 -> empty
Rule 7     global_scope -> <empty>
Rule 8     class0 -> CLASS ID class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON
Rule 9     class1 -> COLON ID
Rule 10    class1 -> empty
Rule 11    class2 -> attributes
Rule 12    class2 -> empty
Rule 13    class3 -> methods
Rule 14    class3 -> empty
Rule 15    function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0
Rule 16    function1 -> type
Rule 17    function1 -> VOID
Rule 18    function2 -> simple_declaration function2
Rule 19    function2 -> simple_assignment function2
Rule 20    function2 -> empty
Rule 21    declaration0 -> ID COLON declaration1 SEMICOLON
Rule 22    declaration1 -> type
Rule 23    declaration1 -> complex_type
Rule 24    declaration1 -> type LSQRBRACKET exp0 RSQRBRACKET declaration2
Rule 25    declaration2 -> LSQRBRACKET exp0 RSQRBRACKET
Rule 26    declaration2 -> empty
Rule 27    assignment0 -> ID EQUALS expression0 SEMICOLON
Rule 28    assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
Rule 29    assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
Rule 30    constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0
Rule 31    attributes -> data_access simple_declaration attributes
Rule 32    attributes -> simple_assignment attributes
Rule 33    attributes -> empty
Rule 34    methods -> data_access function0 methods
Rule 35    methods -> empty
Rule 36    params0 -> type ID params1
Rule 37    params0 -> empty
Rule 38    params1 -> COMMA params0
Rule 39    params1 -> empty
Rule 40    function_block0 -> LBRACKET function_block1 RBRACKET
Rule 41    function_block1 -> function_statement function_block1
Rule 42    function_block1 -> empty
Rule 43    type -> INT
Rule 44    type -> FLOAT
Rule 45    type -> STRING
Rule 46    type -> BOOL
Rule 47    simple_declaration -> ID COLON type SEMICOLON
Rule 48    simple_assignment -> ID EQUALS expression0 SEMICOLON
Rule 49    complex_type -> ID
Rule 50    logic_or0 -> logic_and0 logic_or1
Rule 51    logic_or1 -> OR logic_or0
Rule 52    logic_or1 -> empty
Rule 53    logic_and0 -> logic_operand logic_and1
Rule 54    logic_and1 -> AND logic_and0
Rule 55    logic_and1 -> empty
Rule 56    logic_operand -> NOT expression0
Rule 57    exp0 -> term0 exp1
Rule 58    exp1 -> PLUS exp0
Rule 59    exp1 -> MINUS exp0
Rule 60    exp1 -> empty
Rule 61    term0 -> factor term1
Rule 62    term1 -> MULTIPLY term0
Rule 63    term1 -> DIVIDE term0
Rule 64    term1 -> empty
Rule 65    factor -> PLUS power0
Rule 66    factor -> MINUS power0
Rule 67    factor -> power0
Rule 68    power0 -> LPAREN exp0 RPAREN power2
Rule 69    power0 -> const_var power2
Rule 70    power0 -> function_call power2
Rule 71    power0 -> method_call0 power2
Rule 72    power0 -> attr_access0 power2
Rule 73    power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
Rule 74    power1 -> LSQRBRACKET exp0 RSQRBRACKET
Rule 75    power1 -> empty
Rule 76    power2 -> POWER power0
Rule 77    power2 -> SQRT power0
Rule 78    power2 -> empty
Rule 79    const_var -> CONST_INT
Rule 80    const_var -> CONST_FLOAT
Rule 81    const_var -> ID
Rule 82    function_call -> ID LPAREN function_call_params0 RPAREN
Rule 83    function_call_params0 -> expression0 function_call_params1
Rule 84    function_call_params0 -> CONST_STRING function_call_params1
Rule 85    function_call_params0 -> empty function_call_params1
Rule 86    function_call_params1 -> COMMA function_call_params0
Rule 87    function_call_params1 -> empty
Rule 88    expression0 -> exp0 expression1
Rule 89    expression0 -> CONST_BOOL expression1
Rule 90    expression0 -> attr_access0 expression1
Rule 91    expression1 -> empty
Rule 92    expression1 -> expression2
Rule 93    expression2 -> LTHAN expression3
Rule 94    expression2 -> GTHAN expression3
Rule 95    expression2 -> DIFFERENT expression3
Rule 96    expression2 -> EQUIVALENT expression3
Rule 97    expression3 -> exp0
Rule 98    expression3 -> CONST_BOOL
Rule 99    expression3 -> attr_access0
Rule 100   attr_access0 -> ID DOT ID
Rule 101   method_call0 -> ID DOT function_call
Rule 102   data_access -> PRIVATE
Rule 103   data_access -> PUBLIC
Rule 104   function_statement -> simple_assignment
Rule 105   function_statement -> condition0
Rule 106   function_statement -> writing0
Rule 107   function_statement -> reading
Rule 108   function_statement -> return
Rule 109   function_statement -> function_call SEMICOLON
Rule 110   function_statement -> method_call0 SEMICOLON
Rule 111   function_statement -> while
Rule 112   condition0 -> IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON
Rule 113   condition1 -> ELSE block0
Rule 114   condition1 -> empty
Rule 115   writing0 -> WRITE LPAREN writing1 RPAREN SEMICOLON
Rule 116   writing1 -> expression0 writing2
Rule 117   writing1 -> CONST_STRING writing2
Rule 118   writing2 -> COMMA writing1
Rule 119   writing2 -> empty
Rule 120   reading -> READ ID SEMICOLON
Rule 121   return -> RETURN expression0 SEMICOLON
Rule 122   return -> RETURN SEMICOLON
Rule 123   while -> WHILE LPAREN expression0 RPAREN block0
Rule 124   block0 -> LBRACKET block1 RBRACKET
Rule 125   block1 -> statement block1
Rule 126   block1 -> empty
Rule 127   statement -> assignment0
Rule 128   statement -> object_assignment
Rule 129   statement -> condition0
Rule 130   statement -> writing0
Rule 131   statement -> reading
Rule 132   statement -> return
Rule 133   statement -> function_call SEMICOLON
Rule 134   statement -> method_call0 SEMICOLON
Rule 135   statement -> while
Rule 136   object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
Rule 137   main0 -> MAIN LBRACKET main1 RBRACKET
Rule 138   main1 -> declaration0 main1
Rule 139   main1 -> statement main1
Rule 140   main1 -> empty
Rule 141   empty -> <empty>

Terminals, with rules where they appear

AND                  : 54
ARROW                : 15
BOOL                 : 46
CLASS                : 8
COLON                : 9 21 47
COMMA                : 38 86 118
CONSTRUCT            : 30
CONST_BOOL           : 89 98
CONST_FLOAT          : 80
CONST_INT            : 79
CONST_STRING         : 84 117
DEF                  : 15
DIFFERENT            : 95
DIVIDE               : 63
DOT                  : 100 101
ELSE                 : 113
EQUALS               : 27 28 29 48 136
EQUIVALENT           : 96
FLOAT                : 44
GTHAN                : 94
ID                   : 1 8 9 15 21 27 28 29 30 36 47 48 49 73 81 82 100 100 101 120 136 136
IF                   : 112
INT                  : 43
LBRACKET             : 8 40 124 137
LPAREN               : 15 30 68 82 112 115 123 136
LSQRBRACKET          : 15 15 24 25 28 29 29 73 74
LTHAN                : 93
MAIN                 : 137
MINUS                : 59 66
MULTIPLY             : 62
NEW                  : 136
NOT                  : 56
OR                   : 51
PLUS                 : 58 65
POWER                : 76
PRIVATE              : 102
PUBLIC               : 103
RBRACKET             : 8 40 124 137
READ                 : 120
RETURN               : 121 122
ROUTINE              : 1
RPAREN               : 15 30 68 82 112 115 123 136
RSQRBRACKET          : 15 15 24 25 28 29 29 73 74
SEMICOLON            : 1 8 21 27 28 29 47 48 109 110 112 115 120 121 122 133 134 136
SQRT                 : 77
STRING               : 45
VOID                 : 17
WHILE                : 123
WRITE                : 115
error                : 

Nonterminals, with rules where they appear

assignment0          : 5 127
attr_access0         : 72 90 99
attributes           : 11 31 32
block0               : 112 113 123
block1               : 124 125
class0               : 2
class1               : 8
class2               : 8
class3               : 8
complex_type         : 23
condition0           : 105 129
condition1           : 112
const_var            : 69
constructor          : 8
data_access          : 31 34
declaration0         : 4 138
declaration1         : 21
declaration2         : 24
empty                : 6 10 12 14 20 26 33 35 37 39 42 52 55 60 64 75 78 85 87 91 114 119 126 140
exp0                 : 24 25 28 29 29 58 59 68 73 74 88 97
exp1                 : 57
expression0          : 27 28 29 48 56 83 112 116 121 123
expression1          : 88 89 90
expression2          : 92
expression3          : 93 94 95 96
factor               : 61
function0            : 3 34
function1            : 15
function2            : 15 18 19
function_block0      : 15 30
function_block1      : 40 41
function_call        : 70 101 109 133
function_call_params0 : 82 86 136
function_call_params1 : 83 84 85
function_statement   : 41
global_scope         : 1
logic_and0           : 50 54
logic_and1           : 53
logic_operand        : 53
logic_or0            : 51
logic_or1            : 50
main0                : 1
main1                : 137 138 139
method_call0         : 71 110 134
methods              : 13 34
object_assignment    : 128
params0              : 15 30 38
params1              : 36
power0               : 65 66 67 76 77
power1               : 73
power2               : 68 69 70 71 72 73
reading              : 107 131
return               : 108 132
routine0             : 0
routine1             : 1 2 3 4 5
simple_assignment    : 19 32 104
simple_declaration   : 18 31
statement            : 125 139
term0                : 57 62 63
term1                : 61
type                 : 16 22 24 36 47
while                : 111 135
writing0             : 106 130
writing1             : 115 118
writing2             : 116 117

Parsing method: LALR

state 0

    (0) S' -> . routine0
    (1) routine0 -> . ROUTINE ID SEMICOLON global_scope routine1 main0

    ROUTINE         shift and go to state 2

    routine0                       shift and go to state 1

state 1

    (0) S' -> routine0 .



state 2

    (1) routine0 -> ROUTINE . ID SEMICOLON global_scope routine1 main0

    ID              shift and go to state 3


state 3

    (1) routine0 -> ROUTINE ID . SEMICOLON global_scope routine1 main0

    SEMICOLON       shift and go to state 4


state 4

    (1) routine0 -> ROUTINE ID SEMICOLON . global_scope routine1 main0
    (7) global_scope -> .

    CLASS           reduce using rule 7 (global_scope -> .)
    DEF             reduce using rule 7 (global_scope -> .)
    ID              reduce using rule 7 (global_scope -> .)
    MAIN            reduce using rule 7 (global_scope -> .)

    global_scope                   shift and go to state 5

state 5

    (1) routine0 -> ROUTINE ID SEMICOLON global_scope . routine1 main0
    (2) routine1 -> . class0 routine1
    (3) routine1 -> . function0 routine1
    (4) routine1 -> . declaration0 routine1
    (5) routine1 -> . assignment0 routine1
    (6) routine1 -> . empty
    (8) class0 -> . CLASS ID class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON
    (15) function0 -> . DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0
    (21) declaration0 -> . ID COLON declaration1 SEMICOLON
    (27) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (28) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (29) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (141) empty -> .

    CLASS           shift and go to state 13
    DEF             shift and go to state 14
    ID              shift and go to state 6
    MAIN            reduce using rule 141 (empty -> .)

    routine1                       shift and go to state 7
    class0                         shift and go to state 8
    function0                      shift and go to state 9
    declaration0                   shift and go to state 10
    assignment0                    shift and go to state 11
    empty                          shift and go to state 12

state 6

    (21) declaration0 -> ID . COLON declaration1 SEMICOLON
    (27) assignment0 -> ID . EQUALS expression0 SEMICOLON
    (28) assignment0 -> ID . LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (29) assignment0 -> ID . LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON

    COLON           shift and go to state 15
    EQUALS          shift and go to state 16
    LSQRBRACKET     shift and go to state 17


state 7

    (1) routine0 -> ROUTINE ID SEMICOLON global_scope routine1 . main0
    (137) main0 -> . MAIN LBRACKET main1 RBRACKET

    MAIN            shift and go to state 19

    main0                          shift and go to state 18

state 8

    (2) routine1 -> class0 . routine1
    (2) routine1 -> . class0 routine1
    (3) routine1 -> . function0 routine1
    (4) routine1 -> . declaration0 routine1
    (5) routine1 -> . assignment0 routine1
    (6) routine1 -> . empty
    (8) class0 -> . CLASS ID class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON
    (15) function0 -> . DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0
    (21) declaration0 -> . ID COLON declaration1 SEMICOLON
    (27) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (28) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (29) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (141) empty -> .

    CLASS           shift and go to state 13
    DEF             shift and go to state 14
    ID              shift and go to state 6
    MAIN            reduce using rule 141 (empty -> .)

    class0                         shift and go to state 8
    routine1                       shift and go to state 20
    function0                      shift and go to state 9
    declaration0                   shift and go to state 10
    assignment0                    shift and go to state 11
    empty                          shift and go to state 12

state 9

    (3) routine1 -> function0 . routine1
    (2) routine1 -> . class0 routine1
    (3) routine1 -> . function0 routine1
    (4) routine1 -> . declaration0 routine1
    (5) routine1 -> . assignment0 routine1
    (6) routine1 -> . empty
    (8) class0 -> . CLASS ID class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON
    (15) function0 -> . DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0
    (21) declaration0 -> . ID COLON declaration1 SEMICOLON
    (27) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (28) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (29) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (141) empty -> .

    CLASS           shift and go to state 13
    DEF             shift and go to state 14
    ID              shift and go to state 6
    MAIN            reduce using rule 141 (empty -> .)

    function0                      shift and go to state 9
    routine1                       shift and go to state 21
    class0                         shift and go to state 8
    declaration0                   shift and go to state 10
    assignment0                    shift and go to state 11
    empty                          shift and go to state 12

state 10

    (4) routine1 -> declaration0 . routine1
    (2) routine1 -> . class0 routine1
    (3) routine1 -> . function0 routine1
    (4) routine1 -> . declaration0 routine1
    (5) routine1 -> . assignment0 routine1
    (6) routine1 -> . empty
    (8) class0 -> . CLASS ID class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON
    (15) function0 -> . DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0
    (21) declaration0 -> . ID COLON declaration1 SEMICOLON
    (27) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (28) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (29) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (141) empty -> .

    CLASS           shift and go to state 13
    DEF             shift and go to state 14
    ID              shift and go to state 6
    MAIN            reduce using rule 141 (empty -> .)

    declaration0                   shift and go to state 10
    routine1                       shift and go to state 22
    class0                         shift and go to state 8
    function0                      shift and go to state 9
    assignment0                    shift and go to state 11
    empty                          shift and go to state 12

state 11

    (5) routine1 -> assignment0 . routine1
    (2) routine1 -> . class0 routine1
    (3) routine1 -> . function0 routine1
    (4) routine1 -> . declaration0 routine1
    (5) routine1 -> . assignment0 routine1
    (6) routine1 -> . empty
    (8) class0 -> . CLASS ID class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON
    (15) function0 -> . DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0
    (21) declaration0 -> . ID COLON declaration1 SEMICOLON
    (27) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (28) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (29) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (141) empty -> .

    CLASS           shift and go to state 13
    DEF             shift and go to state 14
    ID              shift and go to state 6
    MAIN            reduce using rule 141 (empty -> .)

    assignment0                    shift and go to state 11
    routine1                       shift and go to state 23
    class0                         shift and go to state 8
    function0                      shift and go to state 9
    declaration0                   shift and go to state 10
    empty                          shift and go to state 12

state 12

    (6) routine1 -> empty .

    MAIN            reduce using rule 6 (routine1 -> empty .)


state 13

    (8) class0 -> CLASS . ID class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON

    ID              shift and go to state 24


state 14

    (15) function0 -> DEF . ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0

    ID              shift and go to state 25


state 15

    (21) declaration0 -> ID COLON . declaration1 SEMICOLON
    (22) declaration1 -> . type
    (23) declaration1 -> . complex_type
    (24) declaration1 -> . type LSQRBRACKET exp0 RSQRBRACKET declaration2
    (43) type -> . INT
    (44) type -> . FLOAT
    (45) type -> . STRING
    (46) type -> . BOOL
    (49) complex_type -> . ID

    INT             shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    ID              shift and go to state 26

    declaration1                   shift and go to state 27
    type                           shift and go to state 28
    complex_type                   shift and go to state 29

state 16

    (27) assignment0 -> ID EQUALS . expression0 SEMICOLON
    (88) expression0 -> . exp0 expression1
    (89) expression0 -> . CONST_BOOL expression1
    (90) expression0 -> . attr_access0 expression1
    (57) exp0 -> . term0 exp1
    (100) attr_access0 -> . ID DOT ID
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 37
    ID              shift and go to state 34
    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    expression0                    shift and go to state 35
    exp0                           shift and go to state 36
    attr_access0                   shift and go to state 38
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47

state 17

    (28) assignment0 -> ID LSQRBRACKET . exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (29) assignment0 -> ID LSQRBRACKET . exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (57) exp0 -> . term0 exp1
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (100) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    ID              shift and go to state 50
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    exp0                           shift and go to state 51
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47
    attr_access0                   shift and go to state 52

state 18

    (1) routine0 -> ROUTINE ID SEMICOLON global_scope routine1 main0 .

    $end            reduce using rule 1 (routine0 -> ROUTINE ID SEMICOLON global_scope routine1 main0 .)


state 19

    (137) main0 -> MAIN . LBRACKET main1 RBRACKET

    LBRACKET        shift and go to state 53


state 20

    (2) routine1 -> class0 routine1 .

    MAIN            reduce using rule 2 (routine1 -> class0 routine1 .)


state 21

    (3) routine1 -> function0 routine1 .

    MAIN            reduce using rule 3 (routine1 -> function0 routine1 .)


state 22

    (4) routine1 -> declaration0 routine1 .

    MAIN            reduce using rule 4 (routine1 -> declaration0 routine1 .)


state 23

    (5) routine1 -> assignment0 routine1 .

    MAIN            reduce using rule 5 (routine1 -> assignment0 routine1 .)


state 24

    (8) class0 -> CLASS ID . class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON
    (9) class1 -> . COLON ID
    (10) class1 -> . empty
    (141) empty -> .

    COLON           shift and go to state 55
    LBRACKET        reduce using rule 141 (empty -> .)

    class1                         shift and go to state 54
    empty                          shift and go to state 56

state 25

    (15) function0 -> DEF ID . LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0

    LPAREN          shift and go to state 57


state 26

    (49) complex_type -> ID .

    SEMICOLON       reduce using rule 49 (complex_type -> ID .)


state 27

    (21) declaration0 -> ID COLON declaration1 . SEMICOLON

    SEMICOLON       shift and go to state 58


state 28

    (22) declaration1 -> type .
    (24) declaration1 -> type . LSQRBRACKET exp0 RSQRBRACKET declaration2

    SEMICOLON       reduce using rule 22 (declaration1 -> type .)
    LSQRBRACKET     shift and go to state 59


state 29

    (23) declaration1 -> complex_type .

    SEMICOLON       reduce using rule 23 (declaration1 -> complex_type .)


state 30

    (43) type -> INT .

    LSQRBRACKET     reduce using rule 43 (type -> INT .)
    SEMICOLON       reduce using rule 43 (type -> INT .)
    ID              reduce using rule 43 (type -> INT .)


state 31

    (44) type -> FLOAT .

    LSQRBRACKET     reduce using rule 44 (type -> FLOAT .)
    SEMICOLON       reduce using rule 44 (type -> FLOAT .)
    ID              reduce using rule 44 (type -> FLOAT .)


state 32

    (45) type -> STRING .

    LSQRBRACKET     reduce using rule 45 (type -> STRING .)
    SEMICOLON       reduce using rule 45 (type -> STRING .)
    ID              reduce using rule 45 (type -> STRING .)


state 33

    (46) type -> BOOL .

    LSQRBRACKET     reduce using rule 46 (type -> BOOL .)
    SEMICOLON       reduce using rule 46 (type -> BOOL .)
    ID              reduce using rule 46 (type -> BOOL .)


state 34

    (100) attr_access0 -> ID . DOT ID
    (73) power0 -> ID . LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> ID .
    (82) function_call -> ID . LPAREN function_call_params0 RPAREN
    (101) method_call0 -> ID . DOT function_call

    DOT             shift and go to state 60
    LSQRBRACKET     shift and go to state 61
    POWER           reduce using rule 81 (const_var -> ID .)
    SQRT            reduce using rule 81 (const_var -> ID .)
    MULTIPLY        reduce using rule 81 (const_var -> ID .)
    DIVIDE          reduce using rule 81 (const_var -> ID .)
    PLUS            reduce using rule 81 (const_var -> ID .)
    MINUS           reduce using rule 81 (const_var -> ID .)
    LTHAN           reduce using rule 81 (const_var -> ID .)
    GTHAN           reduce using rule 81 (const_var -> ID .)
    DIFFERENT       reduce using rule 81 (const_var -> ID .)
    EQUIVALENT      reduce using rule 81 (const_var -> ID .)
    SEMICOLON       reduce using rule 81 (const_var -> ID .)
    COMMA           reduce using rule 81 (const_var -> ID .)
    RPAREN          reduce using rule 81 (const_var -> ID .)
    LPAREN          shift and go to state 62


state 35

    (27) assignment0 -> ID EQUALS expression0 . SEMICOLON

    SEMICOLON       shift and go to state 63


state 36

    (88) expression0 -> exp0 . expression1
    (91) expression1 -> . empty
    (92) expression1 -> . expression2
    (141) empty -> .
    (93) expression2 -> . LTHAN expression3
    (94) expression2 -> . GTHAN expression3
    (95) expression2 -> . DIFFERENT expression3
    (96) expression2 -> . EQUIVALENT expression3

    SEMICOLON       reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)
    RPAREN          reduce using rule 141 (empty -> .)
    LTHAN           shift and go to state 67
    GTHAN           shift and go to state 68
    DIFFERENT       shift and go to state 69
    EQUIVALENT      shift and go to state 70

    expression1                    shift and go to state 64
    empty                          shift and go to state 65
    expression2                    shift and go to state 66

state 37

    (89) expression0 -> CONST_BOOL . expression1
    (91) expression1 -> . empty
    (92) expression1 -> . expression2
    (141) empty -> .
    (93) expression2 -> . LTHAN expression3
    (94) expression2 -> . GTHAN expression3
    (95) expression2 -> . DIFFERENT expression3
    (96) expression2 -> . EQUIVALENT expression3

    SEMICOLON       reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)
    RPAREN          reduce using rule 141 (empty -> .)
    LTHAN           shift and go to state 67
    GTHAN           shift and go to state 68
    DIFFERENT       shift and go to state 69
    EQUIVALENT      shift and go to state 70

    expression1                    shift and go to state 71
    empty                          shift and go to state 65
    expression2                    shift and go to state 66

state 38

    (90) expression0 -> attr_access0 . expression1
    (72) power0 -> attr_access0 . power2
    (91) expression1 -> . empty
    (92) expression1 -> . expression2
    (76) power2 -> . POWER power0
    (77) power2 -> . SQRT power0
    (78) power2 -> . empty
    (141) empty -> .
    (93) expression2 -> . LTHAN expression3
    (94) expression2 -> . GTHAN expression3
    (95) expression2 -> . DIFFERENT expression3
    (96) expression2 -> . EQUIVALENT expression3

  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for EQUIVALENT resolved as shift
    POWER           shift and go to state 75
    SQRT            shift and go to state 76
    SEMICOLON       reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)
    RPAREN          reduce using rule 141 (empty -> .)
    MULTIPLY        reduce using rule 141 (empty -> .)
    DIVIDE          reduce using rule 141 (empty -> .)
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LTHAN           shift and go to state 67
    GTHAN           shift and go to state 68
    DIFFERENT       shift and go to state 69
    EQUIVALENT      shift and go to state 70

  ! LTHAN           [ reduce using rule 141 (empty -> .) ]
  ! GTHAN           [ reduce using rule 141 (empty -> .) ]
  ! DIFFERENT       [ reduce using rule 141 (empty -> .) ]
  ! EQUIVALENT      [ reduce using rule 141 (empty -> .) ]

    expression1                    shift and go to state 72
    power2                         shift and go to state 73
    empty                          shift and go to state 74
    expression2                    shift and go to state 66

state 39

    (57) exp0 -> term0 . exp1
    (58) exp1 -> . PLUS exp0
    (59) exp1 -> . MINUS exp0
    (60) exp1 -> . empty
    (141) empty -> .

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LTHAN           reduce using rule 141 (empty -> .)
    GTHAN           reduce using rule 141 (empty -> .)
    DIFFERENT       reduce using rule 141 (empty -> .)
    EQUIVALENT      reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    RSQRBRACKET     reduce using rule 141 (empty -> .)
    RPAREN          reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)

    exp1                           shift and go to state 77
    empty                          shift and go to state 80

state 40

    (61) term0 -> factor . term1
    (62) term1 -> . MULTIPLY term0
    (63) term1 -> . DIVIDE term0
    (64) term1 -> . empty
    (141) empty -> .

    MULTIPLY        shift and go to state 82
    DIVIDE          shift and go to state 83
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LTHAN           reduce using rule 141 (empty -> .)
    GTHAN           reduce using rule 141 (empty -> .)
    DIFFERENT       reduce using rule 141 (empty -> .)
    EQUIVALENT      reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    RSQRBRACKET     reduce using rule 141 (empty -> .)
    RPAREN          reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)

    term1                          shift and go to state 81
    empty                          shift and go to state 84

state 41

    (65) factor -> PLUS . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (100) attr_access0 -> . ID DOT ID

    LPAREN          shift and go to state 44
    ID              shift and go to state 50
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    power0                         shift and go to state 85
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47
    attr_access0                   shift and go to state 52

state 42

    (67) factor -> power0 .

    MULTIPLY        reduce using rule 67 (factor -> power0 .)
    DIVIDE          reduce using rule 67 (factor -> power0 .)
    PLUS            reduce using rule 67 (factor -> power0 .)
    MINUS           reduce using rule 67 (factor -> power0 .)
    LTHAN           reduce using rule 67 (factor -> power0 .)
    GTHAN           reduce using rule 67 (factor -> power0 .)
    DIFFERENT       reduce using rule 67 (factor -> power0 .)
    EQUIVALENT      reduce using rule 67 (factor -> power0 .)
    SEMICOLON       reduce using rule 67 (factor -> power0 .)
    RSQRBRACKET     reduce using rule 67 (factor -> power0 .)
    RPAREN          reduce using rule 67 (factor -> power0 .)
    COMMA           reduce using rule 67 (factor -> power0 .)


state 43

    (66) factor -> MINUS . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (100) attr_access0 -> . ID DOT ID

    LPAREN          shift and go to state 44
    ID              shift and go to state 50
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    power0                         shift and go to state 86
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47
    attr_access0                   shift and go to state 52

state 44

    (68) power0 -> LPAREN . exp0 RPAREN power2
    (57) exp0 -> . term0 exp1
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (100) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    ID              shift and go to state 50
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    exp0                           shift and go to state 87
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47
    attr_access0                   shift and go to state 52

state 45

    (69) power0 -> const_var . power2
    (76) power2 -> . POWER power0
    (77) power2 -> . SQRT power0
    (78) power2 -> . empty
    (141) empty -> .

    POWER           shift and go to state 75
    SQRT            shift and go to state 76
    MULTIPLY        reduce using rule 141 (empty -> .)
    DIVIDE          reduce using rule 141 (empty -> .)
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LTHAN           reduce using rule 141 (empty -> .)
    GTHAN           reduce using rule 141 (empty -> .)
    DIFFERENT       reduce using rule 141 (empty -> .)
    EQUIVALENT      reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    RSQRBRACKET     reduce using rule 141 (empty -> .)
    RPAREN          reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)

    power2                         shift and go to state 88
    empty                          shift and go to state 89

state 46

    (70) power0 -> function_call . power2
    (76) power2 -> . POWER power0
    (77) power2 -> . SQRT power0
    (78) power2 -> . empty
    (141) empty -> .

    POWER           shift and go to state 75
    SQRT            shift and go to state 76
    MULTIPLY        reduce using rule 141 (empty -> .)
    DIVIDE          reduce using rule 141 (empty -> .)
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LTHAN           reduce using rule 141 (empty -> .)
    GTHAN           reduce using rule 141 (empty -> .)
    DIFFERENT       reduce using rule 141 (empty -> .)
    EQUIVALENT      reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    RSQRBRACKET     reduce using rule 141 (empty -> .)
    RPAREN          reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)

    power2                         shift and go to state 90
    empty                          shift and go to state 89

state 47

    (71) power0 -> method_call0 . power2
    (76) power2 -> . POWER power0
    (77) power2 -> . SQRT power0
    (78) power2 -> . empty
    (141) empty -> .

    POWER           shift and go to state 75
    SQRT            shift and go to state 76
    MULTIPLY        reduce using rule 141 (empty -> .)
    DIVIDE          reduce using rule 141 (empty -> .)
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LTHAN           reduce using rule 141 (empty -> .)
    GTHAN           reduce using rule 141 (empty -> .)
    DIFFERENT       reduce using rule 141 (empty -> .)
    EQUIVALENT      reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    RSQRBRACKET     reduce using rule 141 (empty -> .)
    RPAREN          reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)

    power2                         shift and go to state 91
    empty                          shift and go to state 89

state 48

    (79) const_var -> CONST_INT .

    POWER           reduce using rule 79 (const_var -> CONST_INT .)
    SQRT            reduce using rule 79 (const_var -> CONST_INT .)
    MULTIPLY        reduce using rule 79 (const_var -> CONST_INT .)
    DIVIDE          reduce using rule 79 (const_var -> CONST_INT .)
    PLUS            reduce using rule 79 (const_var -> CONST_INT .)
    MINUS           reduce using rule 79 (const_var -> CONST_INT .)
    LTHAN           reduce using rule 79 (const_var -> CONST_INT .)
    GTHAN           reduce using rule 79 (const_var -> CONST_INT .)
    DIFFERENT       reduce using rule 79 (const_var -> CONST_INT .)
    EQUIVALENT      reduce using rule 79 (const_var -> CONST_INT .)
    SEMICOLON       reduce using rule 79 (const_var -> CONST_INT .)
    RSQRBRACKET     reduce using rule 79 (const_var -> CONST_INT .)
    RPAREN          reduce using rule 79 (const_var -> CONST_INT .)
    COMMA           reduce using rule 79 (const_var -> CONST_INT .)


state 49

    (80) const_var -> CONST_FLOAT .

    POWER           reduce using rule 80 (const_var -> CONST_FLOAT .)
    SQRT            reduce using rule 80 (const_var -> CONST_FLOAT .)
    MULTIPLY        reduce using rule 80 (const_var -> CONST_FLOAT .)
    DIVIDE          reduce using rule 80 (const_var -> CONST_FLOAT .)
    PLUS            reduce using rule 80 (const_var -> CONST_FLOAT .)
    MINUS           reduce using rule 80 (const_var -> CONST_FLOAT .)
    LTHAN           reduce using rule 80 (const_var -> CONST_FLOAT .)
    GTHAN           reduce using rule 80 (const_var -> CONST_FLOAT .)
    DIFFERENT       reduce using rule 80 (const_var -> CONST_FLOAT .)
    EQUIVALENT      reduce using rule 80 (const_var -> CONST_FLOAT .)
    SEMICOLON       reduce using rule 80 (const_var -> CONST_FLOAT .)
    RSQRBRACKET     reduce using rule 80 (const_var -> CONST_FLOAT .)
    RPAREN          reduce using rule 80 (const_var -> CONST_FLOAT .)
    COMMA           reduce using rule 80 (const_var -> CONST_FLOAT .)


state 50

    (73) power0 -> ID . LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> ID .
    (82) function_call -> ID . LPAREN function_call_params0 RPAREN
    (101) method_call0 -> ID . DOT function_call
    (100) attr_access0 -> ID . DOT ID

    LSQRBRACKET     shift and go to state 61
    POWER           reduce using rule 81 (const_var -> ID .)
    SQRT            reduce using rule 81 (const_var -> ID .)
    MULTIPLY        reduce using rule 81 (const_var -> ID .)
    DIVIDE          reduce using rule 81 (const_var -> ID .)
    PLUS            reduce using rule 81 (const_var -> ID .)
    MINUS           reduce using rule 81 (const_var -> ID .)
    RSQRBRACKET     reduce using rule 81 (const_var -> ID .)
    LTHAN           reduce using rule 81 (const_var -> ID .)
    GTHAN           reduce using rule 81 (const_var -> ID .)
    DIFFERENT       reduce using rule 81 (const_var -> ID .)
    EQUIVALENT      reduce using rule 81 (const_var -> ID .)
    SEMICOLON       reduce using rule 81 (const_var -> ID .)
    RPAREN          reduce using rule 81 (const_var -> ID .)
    COMMA           reduce using rule 81 (const_var -> ID .)
    LPAREN          shift and go to state 62
    DOT             shift and go to state 92


state 51

    (28) assignment0 -> ID LSQRBRACKET exp0 . RSQRBRACKET EQUALS expression0 SEMICOLON
    (29) assignment0 -> ID LSQRBRACKET exp0 . RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON

    RSQRBRACKET     shift and go to state 93


state 52

    (72) power0 -> attr_access0 . power2
    (76) power2 -> . POWER power0
    (77) power2 -> . SQRT power0
    (78) power2 -> . empty
    (141) empty -> .

    POWER           shift and go to state 75
    SQRT            shift and go to state 76
    MULTIPLY        reduce using rule 141 (empty -> .)
    DIVIDE          reduce using rule 141 (empty -> .)
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LTHAN           reduce using rule 141 (empty -> .)
    GTHAN           reduce using rule 141 (empty -> .)
    DIFFERENT       reduce using rule 141 (empty -> .)
    EQUIVALENT      reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    RSQRBRACKET     reduce using rule 141 (empty -> .)
    RPAREN          reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)

    power2                         shift and go to state 73
    empty                          shift and go to state 89

state 53

    (137) main0 -> MAIN LBRACKET . main1 RBRACKET
    (138) main1 -> . declaration0 main1
    (139) main1 -> . statement main1
    (140) main1 -> . empty
    (21) declaration0 -> . ID COLON declaration1 SEMICOLON
    (127) statement -> . assignment0
    (128) statement -> . object_assignment
    (129) statement -> . condition0
    (130) statement -> . writing0
    (131) statement -> . reading
    (132) statement -> . return
    (133) statement -> . function_call SEMICOLON
    (134) statement -> . method_call0 SEMICOLON
    (135) statement -> . while
    (141) empty -> .
    (27) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (28) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (29) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (136) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (112) condition0 -> . IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON
    (115) writing0 -> . WRITE LPAREN writing1 RPAREN SEMICOLON
    (120) reading -> . READ ID SEMICOLON
    (121) return -> . RETURN expression0 SEMICOLON
    (122) return -> . RETURN SEMICOLON
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (123) while -> . WHILE LPAREN expression0 RPAREN block0

    ID              shift and go to state 98
    RBRACKET        reduce using rule 141 (empty -> .)
    IF              shift and go to state 108
    WRITE           shift and go to state 109
    READ            shift and go to state 110
    RETURN          shift and go to state 111
    WHILE           shift and go to state 112

    main1                          shift and go to state 94
    declaration0                   shift and go to state 95
    statement                      shift and go to state 96
    empty                          shift and go to state 97
    assignment0                    shift and go to state 99
    object_assignment              shift and go to state 100
    condition0                     shift and go to state 101
    writing0                       shift and go to state 102
    reading                        shift and go to state 103
    return                         shift and go to state 104
    function_call                  shift and go to state 105
    method_call0                   shift and go to state 106
    while                          shift and go to state 107

state 54

    (8) class0 -> CLASS ID class1 . LBRACKET class2 constructor class3 RBRACKET SEMICOLON

    LBRACKET        shift and go to state 113


state 55

    (9) class1 -> COLON . ID

    ID              shift and go to state 114


state 56

    (10) class1 -> empty .

    LBRACKET        reduce using rule 10 (class1 -> empty .)


state 57

    (15) function0 -> DEF ID LPAREN . params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0
    (36) params0 -> . type ID params1
    (37) params0 -> . empty
    (43) type -> . INT
    (44) type -> . FLOAT
    (45) type -> . STRING
    (46) type -> . BOOL
    (141) empty -> .

    INT             shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    RPAREN          reduce using rule 141 (empty -> .)

    params0                        shift and go to state 115
    type                           shift and go to state 116
    empty                          shift and go to state 117

state 58

    (21) declaration0 -> ID COLON declaration1 SEMICOLON .

    CLASS           reduce using rule 21 (declaration0 -> ID COLON declaration1 SEMICOLON .)
    DEF             reduce using rule 21 (declaration0 -> ID COLON declaration1 SEMICOLON .)
    ID              reduce using rule 21 (declaration0 -> ID COLON declaration1 SEMICOLON .)
    MAIN            reduce using rule 21 (declaration0 -> ID COLON declaration1 SEMICOLON .)
    IF              reduce using rule 21 (declaration0 -> ID COLON declaration1 SEMICOLON .)
    WRITE           reduce using rule 21 (declaration0 -> ID COLON declaration1 SEMICOLON .)
    READ            reduce using rule 21 (declaration0 -> ID COLON declaration1 SEMICOLON .)
    RETURN          reduce using rule 21 (declaration0 -> ID COLON declaration1 SEMICOLON .)
    WHILE           reduce using rule 21 (declaration0 -> ID COLON declaration1 SEMICOLON .)
    RBRACKET        reduce using rule 21 (declaration0 -> ID COLON declaration1 SEMICOLON .)


state 59

    (24) declaration1 -> type LSQRBRACKET . exp0 RSQRBRACKET declaration2
    (57) exp0 -> . term0 exp1
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (100) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    ID              shift and go to state 50
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    exp0                           shift and go to state 118
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47
    attr_access0                   shift and go to state 52

state 60

    (100) attr_access0 -> ID DOT . ID
    (101) method_call0 -> ID DOT . function_call
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN

    ID              shift and go to state 119

    function_call                  shift and go to state 120

state 61

    (73) power0 -> ID LSQRBRACKET . exp0 RSQRBRACKET power1 power2
    (57) exp0 -> . term0 exp1
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (100) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    ID              shift and go to state 50
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    exp0                           shift and go to state 121
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47
    attr_access0                   shift and go to state 52

state 62

    (82) function_call -> ID LPAREN . function_call_params0 RPAREN
    (83) function_call_params0 -> . expression0 function_call_params1
    (84) function_call_params0 -> . CONST_STRING function_call_params1
    (85) function_call_params0 -> . empty function_call_params1
    (88) expression0 -> . exp0 expression1
    (89) expression0 -> . CONST_BOOL expression1
    (90) expression0 -> . attr_access0 expression1
    (141) empty -> .
    (57) exp0 -> . term0 exp1
    (100) attr_access0 -> . ID DOT ID
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call

    CONST_STRING    shift and go to state 124
    CONST_BOOL      shift and go to state 37
    COMMA           reduce using rule 141 (empty -> .)
    RPAREN          reduce using rule 141 (empty -> .)
    ID              shift and go to state 34
    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    function_call_params0          shift and go to state 122
    expression0                    shift and go to state 123
    empty                          shift and go to state 125
    exp0                           shift and go to state 36
    attr_access0                   shift and go to state 38
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47

state 63

    (27) assignment0 -> ID EQUALS expression0 SEMICOLON .

    CLASS           reduce using rule 27 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    DEF             reduce using rule 27 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    ID              reduce using rule 27 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    MAIN            reduce using rule 27 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    IF              reduce using rule 27 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    WRITE           reduce using rule 27 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    READ            reduce using rule 27 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    RETURN          reduce using rule 27 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    WHILE           reduce using rule 27 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    RBRACKET        reduce using rule 27 (assignment0 -> ID EQUALS expression0 SEMICOLON .)


state 64

    (88) expression0 -> exp0 expression1 .

    SEMICOLON       reduce using rule 88 (expression0 -> exp0 expression1 .)
    COMMA           reduce using rule 88 (expression0 -> exp0 expression1 .)
    RPAREN          reduce using rule 88 (expression0 -> exp0 expression1 .)


state 65

    (91) expression1 -> empty .

    SEMICOLON       reduce using rule 91 (expression1 -> empty .)
    COMMA           reduce using rule 91 (expression1 -> empty .)
    RPAREN          reduce using rule 91 (expression1 -> empty .)


state 66

    (92) expression1 -> expression2 .

    SEMICOLON       reduce using rule 92 (expression1 -> expression2 .)
    COMMA           reduce using rule 92 (expression1 -> expression2 .)
    RPAREN          reduce using rule 92 (expression1 -> expression2 .)


state 67

    (93) expression2 -> LTHAN . expression3
    (97) expression3 -> . exp0
    (98) expression3 -> . CONST_BOOL
    (99) expression3 -> . attr_access0
    (57) exp0 -> . term0 exp1
    (100) attr_access0 -> . ID DOT ID
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 128
    ID              shift and go to state 34
    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    expression3                    shift and go to state 126
    exp0                           shift and go to state 127
    attr_access0                   shift and go to state 129
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47

state 68

    (94) expression2 -> GTHAN . expression3
    (97) expression3 -> . exp0
    (98) expression3 -> . CONST_BOOL
    (99) expression3 -> . attr_access0
    (57) exp0 -> . term0 exp1
    (100) attr_access0 -> . ID DOT ID
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 128
    ID              shift and go to state 34
    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    expression3                    shift and go to state 130
    exp0                           shift and go to state 127
    attr_access0                   shift and go to state 129
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47

state 69

    (95) expression2 -> DIFFERENT . expression3
    (97) expression3 -> . exp0
    (98) expression3 -> . CONST_BOOL
    (99) expression3 -> . attr_access0
    (57) exp0 -> . term0 exp1
    (100) attr_access0 -> . ID DOT ID
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 128
    ID              shift and go to state 34
    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    expression3                    shift and go to state 131
    exp0                           shift and go to state 127
    attr_access0                   shift and go to state 129
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47

state 70

    (96) expression2 -> EQUIVALENT . expression3
    (97) expression3 -> . exp0
    (98) expression3 -> . CONST_BOOL
    (99) expression3 -> . attr_access0
    (57) exp0 -> . term0 exp1
    (100) attr_access0 -> . ID DOT ID
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 128
    ID              shift and go to state 34
    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    expression3                    shift and go to state 132
    exp0                           shift and go to state 127
    attr_access0                   shift and go to state 129
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47

state 71

    (89) expression0 -> CONST_BOOL expression1 .

    SEMICOLON       reduce using rule 89 (expression0 -> CONST_BOOL expression1 .)
    COMMA           reduce using rule 89 (expression0 -> CONST_BOOL expression1 .)
    RPAREN          reduce using rule 89 (expression0 -> CONST_BOOL expression1 .)


state 72

    (90) expression0 -> attr_access0 expression1 .

    SEMICOLON       reduce using rule 90 (expression0 -> attr_access0 expression1 .)
    COMMA           reduce using rule 90 (expression0 -> attr_access0 expression1 .)
    RPAREN          reduce using rule 90 (expression0 -> attr_access0 expression1 .)


state 73

    (72) power0 -> attr_access0 power2 .

    MULTIPLY        reduce using rule 72 (power0 -> attr_access0 power2 .)
    DIVIDE          reduce using rule 72 (power0 -> attr_access0 power2 .)
    PLUS            reduce using rule 72 (power0 -> attr_access0 power2 .)
    MINUS           reduce using rule 72 (power0 -> attr_access0 power2 .)
    LTHAN           reduce using rule 72 (power0 -> attr_access0 power2 .)
    GTHAN           reduce using rule 72 (power0 -> attr_access0 power2 .)
    DIFFERENT       reduce using rule 72 (power0 -> attr_access0 power2 .)
    EQUIVALENT      reduce using rule 72 (power0 -> attr_access0 power2 .)
    SEMICOLON       reduce using rule 72 (power0 -> attr_access0 power2 .)
    RSQRBRACKET     reduce using rule 72 (power0 -> attr_access0 power2 .)
    RPAREN          reduce using rule 72 (power0 -> attr_access0 power2 .)
    COMMA           reduce using rule 72 (power0 -> attr_access0 power2 .)


state 74

    (91) expression1 -> empty .
    (78) power2 -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 78 (power2 -> empty .)
  ! reduce/reduce conflict for COMMA resolved using rule 78 (power2 -> empty .)
  ! reduce/reduce conflict for RPAREN resolved using rule 78 (power2 -> empty .)
    MULTIPLY        reduce using rule 78 (power2 -> empty .)
    DIVIDE          reduce using rule 78 (power2 -> empty .)
    PLUS            reduce using rule 78 (power2 -> empty .)
    MINUS           reduce using rule 78 (power2 -> empty .)
    LTHAN           reduce using rule 78 (power2 -> empty .)
    GTHAN           reduce using rule 78 (power2 -> empty .)
    DIFFERENT       reduce using rule 78 (power2 -> empty .)
    EQUIVALENT      reduce using rule 78 (power2 -> empty .)
    SEMICOLON       reduce using rule 78 (power2 -> empty .)
    COMMA           reduce using rule 78 (power2 -> empty .)
    RPAREN          reduce using rule 78 (power2 -> empty .)

  ! SEMICOLON       [ reduce using rule 91 (expression1 -> empty .) ]
  ! COMMA           [ reduce using rule 91 (expression1 -> empty .) ]
  ! RPAREN          [ reduce using rule 91 (expression1 -> empty .) ]


state 75

    (76) power2 -> POWER . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (100) attr_access0 -> . ID DOT ID

    LPAREN          shift and go to state 44
    ID              shift and go to state 50
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    power0                         shift and go to state 133
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47
    attr_access0                   shift and go to state 52

state 76

    (77) power2 -> SQRT . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (100) attr_access0 -> . ID DOT ID

    LPAREN          shift and go to state 44
    ID              shift and go to state 50
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    power0                         shift and go to state 134
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47
    attr_access0                   shift and go to state 52

state 77

    (57) exp0 -> term0 exp1 .

    LTHAN           reduce using rule 57 (exp0 -> term0 exp1 .)
    GTHAN           reduce using rule 57 (exp0 -> term0 exp1 .)
    DIFFERENT       reduce using rule 57 (exp0 -> term0 exp1 .)
    EQUIVALENT      reduce using rule 57 (exp0 -> term0 exp1 .)
    SEMICOLON       reduce using rule 57 (exp0 -> term0 exp1 .)
    RSQRBRACKET     reduce using rule 57 (exp0 -> term0 exp1 .)
    RPAREN          reduce using rule 57 (exp0 -> term0 exp1 .)
    COMMA           reduce using rule 57 (exp0 -> term0 exp1 .)


state 78

    (58) exp1 -> PLUS . exp0
    (57) exp0 -> . term0 exp1
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (100) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    ID              shift and go to state 50
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    exp0                           shift and go to state 135
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47
    attr_access0                   shift and go to state 52

state 79

    (59) exp1 -> MINUS . exp0
    (57) exp0 -> . term0 exp1
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (100) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    ID              shift and go to state 50
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    exp0                           shift and go to state 136
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47
    attr_access0                   shift and go to state 52

state 80

    (60) exp1 -> empty .

    LTHAN           reduce using rule 60 (exp1 -> empty .)
    GTHAN           reduce using rule 60 (exp1 -> empty .)
    DIFFERENT       reduce using rule 60 (exp1 -> empty .)
    EQUIVALENT      reduce using rule 60 (exp1 -> empty .)
    SEMICOLON       reduce using rule 60 (exp1 -> empty .)
    RSQRBRACKET     reduce using rule 60 (exp1 -> empty .)
    RPAREN          reduce using rule 60 (exp1 -> empty .)
    COMMA           reduce using rule 60 (exp1 -> empty .)


state 81

    (61) term0 -> factor term1 .

    PLUS            reduce using rule 61 (term0 -> factor term1 .)
    MINUS           reduce using rule 61 (term0 -> factor term1 .)
    LTHAN           reduce using rule 61 (term0 -> factor term1 .)
    GTHAN           reduce using rule 61 (term0 -> factor term1 .)
    DIFFERENT       reduce using rule 61 (term0 -> factor term1 .)
    EQUIVALENT      reduce using rule 61 (term0 -> factor term1 .)
    SEMICOLON       reduce using rule 61 (term0 -> factor term1 .)
    RSQRBRACKET     reduce using rule 61 (term0 -> factor term1 .)
    RPAREN          reduce using rule 61 (term0 -> factor term1 .)
    COMMA           reduce using rule 61 (term0 -> factor term1 .)


state 82

    (62) term1 -> MULTIPLY . term0
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (100) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    ID              shift and go to state 50
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    term0                          shift and go to state 137
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47
    attr_access0                   shift and go to state 52

state 83

    (63) term1 -> DIVIDE . term0
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (100) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    ID              shift and go to state 50
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    term0                          shift and go to state 138
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47
    attr_access0                   shift and go to state 52

state 84

    (64) term1 -> empty .

    PLUS            reduce using rule 64 (term1 -> empty .)
    MINUS           reduce using rule 64 (term1 -> empty .)
    LTHAN           reduce using rule 64 (term1 -> empty .)
    GTHAN           reduce using rule 64 (term1 -> empty .)
    DIFFERENT       reduce using rule 64 (term1 -> empty .)
    EQUIVALENT      reduce using rule 64 (term1 -> empty .)
    SEMICOLON       reduce using rule 64 (term1 -> empty .)
    RSQRBRACKET     reduce using rule 64 (term1 -> empty .)
    RPAREN          reduce using rule 64 (term1 -> empty .)
    COMMA           reduce using rule 64 (term1 -> empty .)


state 85

    (65) factor -> PLUS power0 .

    MULTIPLY        reduce using rule 65 (factor -> PLUS power0 .)
    DIVIDE          reduce using rule 65 (factor -> PLUS power0 .)
    PLUS            reduce using rule 65 (factor -> PLUS power0 .)
    MINUS           reduce using rule 65 (factor -> PLUS power0 .)
    LTHAN           reduce using rule 65 (factor -> PLUS power0 .)
    GTHAN           reduce using rule 65 (factor -> PLUS power0 .)
    DIFFERENT       reduce using rule 65 (factor -> PLUS power0 .)
    EQUIVALENT      reduce using rule 65 (factor -> PLUS power0 .)
    SEMICOLON       reduce using rule 65 (factor -> PLUS power0 .)
    RSQRBRACKET     reduce using rule 65 (factor -> PLUS power0 .)
    RPAREN          reduce using rule 65 (factor -> PLUS power0 .)
    COMMA           reduce using rule 65 (factor -> PLUS power0 .)


state 86

    (66) factor -> MINUS power0 .

    MULTIPLY        reduce using rule 66 (factor -> MINUS power0 .)
    DIVIDE          reduce using rule 66 (factor -> MINUS power0 .)
    PLUS            reduce using rule 66 (factor -> MINUS power0 .)
    MINUS           reduce using rule 66 (factor -> MINUS power0 .)
    LTHAN           reduce using rule 66 (factor -> MINUS power0 .)
    GTHAN           reduce using rule 66 (factor -> MINUS power0 .)
    DIFFERENT       reduce using rule 66 (factor -> MINUS power0 .)
    EQUIVALENT      reduce using rule 66 (factor -> MINUS power0 .)
    SEMICOLON       reduce using rule 66 (factor -> MINUS power0 .)
    RSQRBRACKET     reduce using rule 66 (factor -> MINUS power0 .)
    RPAREN          reduce using rule 66 (factor -> MINUS power0 .)
    COMMA           reduce using rule 66 (factor -> MINUS power0 .)


state 87

    (68) power0 -> LPAREN exp0 . RPAREN power2

    RPAREN          shift and go to state 139


state 88

    (69) power0 -> const_var power2 .

    MULTIPLY        reduce using rule 69 (power0 -> const_var power2 .)
    DIVIDE          reduce using rule 69 (power0 -> const_var power2 .)
    PLUS            reduce using rule 69 (power0 -> const_var power2 .)
    MINUS           reduce using rule 69 (power0 -> const_var power2 .)
    LTHAN           reduce using rule 69 (power0 -> const_var power2 .)
    GTHAN           reduce using rule 69 (power0 -> const_var power2 .)
    DIFFERENT       reduce using rule 69 (power0 -> const_var power2 .)
    EQUIVALENT      reduce using rule 69 (power0 -> const_var power2 .)
    SEMICOLON       reduce using rule 69 (power0 -> const_var power2 .)
    RSQRBRACKET     reduce using rule 69 (power0 -> const_var power2 .)
    RPAREN          reduce using rule 69 (power0 -> const_var power2 .)
    COMMA           reduce using rule 69 (power0 -> const_var power2 .)


state 89

    (78) power2 -> empty .

    MULTIPLY        reduce using rule 78 (power2 -> empty .)
    DIVIDE          reduce using rule 78 (power2 -> empty .)
    PLUS            reduce using rule 78 (power2 -> empty .)
    MINUS           reduce using rule 78 (power2 -> empty .)
    LTHAN           reduce using rule 78 (power2 -> empty .)
    GTHAN           reduce using rule 78 (power2 -> empty .)
    DIFFERENT       reduce using rule 78 (power2 -> empty .)
    EQUIVALENT      reduce using rule 78 (power2 -> empty .)
    SEMICOLON       reduce using rule 78 (power2 -> empty .)
    RSQRBRACKET     reduce using rule 78 (power2 -> empty .)
    RPAREN          reduce using rule 78 (power2 -> empty .)
    COMMA           reduce using rule 78 (power2 -> empty .)


state 90

    (70) power0 -> function_call power2 .

    MULTIPLY        reduce using rule 70 (power0 -> function_call power2 .)
    DIVIDE          reduce using rule 70 (power0 -> function_call power2 .)
    PLUS            reduce using rule 70 (power0 -> function_call power2 .)
    MINUS           reduce using rule 70 (power0 -> function_call power2 .)
    LTHAN           reduce using rule 70 (power0 -> function_call power2 .)
    GTHAN           reduce using rule 70 (power0 -> function_call power2 .)
    DIFFERENT       reduce using rule 70 (power0 -> function_call power2 .)
    EQUIVALENT      reduce using rule 70 (power0 -> function_call power2 .)
    SEMICOLON       reduce using rule 70 (power0 -> function_call power2 .)
    RSQRBRACKET     reduce using rule 70 (power0 -> function_call power2 .)
    RPAREN          reduce using rule 70 (power0 -> function_call power2 .)
    COMMA           reduce using rule 70 (power0 -> function_call power2 .)


state 91

    (71) power0 -> method_call0 power2 .

    MULTIPLY        reduce using rule 71 (power0 -> method_call0 power2 .)
    DIVIDE          reduce using rule 71 (power0 -> method_call0 power2 .)
    PLUS            reduce using rule 71 (power0 -> method_call0 power2 .)
    MINUS           reduce using rule 71 (power0 -> method_call0 power2 .)
    LTHAN           reduce using rule 71 (power0 -> method_call0 power2 .)
    GTHAN           reduce using rule 71 (power0 -> method_call0 power2 .)
    DIFFERENT       reduce using rule 71 (power0 -> method_call0 power2 .)
    EQUIVALENT      reduce using rule 71 (power0 -> method_call0 power2 .)
    SEMICOLON       reduce using rule 71 (power0 -> method_call0 power2 .)
    RSQRBRACKET     reduce using rule 71 (power0 -> method_call0 power2 .)
    RPAREN          reduce using rule 71 (power0 -> method_call0 power2 .)
    COMMA           reduce using rule 71 (power0 -> method_call0 power2 .)


state 92

    (101) method_call0 -> ID DOT . function_call
    (100) attr_access0 -> ID DOT . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN

    ID              shift and go to state 119

    function_call                  shift and go to state 120

state 93

    (28) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET . EQUALS expression0 SEMICOLON
    (29) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET . LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON

    EQUALS          shift and go to state 141
    LSQRBRACKET     shift and go to state 140


state 94

    (137) main0 -> MAIN LBRACKET main1 . RBRACKET

    RBRACKET        shift and go to state 142


state 95

    (138) main1 -> declaration0 . main1
    (138) main1 -> . declaration0 main1
    (139) main1 -> . statement main1
    (140) main1 -> . empty
    (21) declaration0 -> . ID COLON declaration1 SEMICOLON
    (127) statement -> . assignment0
    (128) statement -> . object_assignment
    (129) statement -> . condition0
    (130) statement -> . writing0
    (131) statement -> . reading
    (132) statement -> . return
    (133) statement -> . function_call SEMICOLON
    (134) statement -> . method_call0 SEMICOLON
    (135) statement -> . while
    (141) empty -> .
    (27) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (28) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (29) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (136) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (112) condition0 -> . IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON
    (115) writing0 -> . WRITE LPAREN writing1 RPAREN SEMICOLON
    (120) reading -> . READ ID SEMICOLON
    (121) return -> . RETURN expression0 SEMICOLON
    (122) return -> . RETURN SEMICOLON
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (123) while -> . WHILE LPAREN expression0 RPAREN block0

    ID              shift and go to state 98
    RBRACKET        reduce using rule 141 (empty -> .)
    IF              shift and go to state 108
    WRITE           shift and go to state 109
    READ            shift and go to state 110
    RETURN          shift and go to state 111
    WHILE           shift and go to state 112

    declaration0                   shift and go to state 95
    main1                          shift and go to state 143
    statement                      shift and go to state 96
    empty                          shift and go to state 97
    assignment0                    shift and go to state 99
    object_assignment              shift and go to state 100
    condition0                     shift and go to state 101
    writing0                       shift and go to state 102
    reading                        shift and go to state 103
    return                         shift and go to state 104
    function_call                  shift and go to state 105
    method_call0                   shift and go to state 106
    while                          shift and go to state 107

state 96

    (139) main1 -> statement . main1
    (138) main1 -> . declaration0 main1
    (139) main1 -> . statement main1
    (140) main1 -> . empty
    (21) declaration0 -> . ID COLON declaration1 SEMICOLON
    (127) statement -> . assignment0
    (128) statement -> . object_assignment
    (129) statement -> . condition0
    (130) statement -> . writing0
    (131) statement -> . reading
    (132) statement -> . return
    (133) statement -> . function_call SEMICOLON
    (134) statement -> . method_call0 SEMICOLON
    (135) statement -> . while
    (141) empty -> .
    (27) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (28) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (29) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (136) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (112) condition0 -> . IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON
    (115) writing0 -> . WRITE LPAREN writing1 RPAREN SEMICOLON
    (120) reading -> . READ ID SEMICOLON
    (121) return -> . RETURN expression0 SEMICOLON
    (122) return -> . RETURN SEMICOLON
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (123) while -> . WHILE LPAREN expression0 RPAREN block0

    ID              shift and go to state 98
    RBRACKET        reduce using rule 141 (empty -> .)
    IF              shift and go to state 108
    WRITE           shift and go to state 109
    READ            shift and go to state 110
    RETURN          shift and go to state 111
    WHILE           shift and go to state 112

    statement                      shift and go to state 96
    main1                          shift and go to state 144
    declaration0                   shift and go to state 95
    empty                          shift and go to state 97
    assignment0                    shift and go to state 99
    object_assignment              shift and go to state 100
    condition0                     shift and go to state 101
    writing0                       shift and go to state 102
    reading                        shift and go to state 103
    return                         shift and go to state 104
    function_call                  shift and go to state 105
    method_call0                   shift and go to state 106
    while                          shift and go to state 107

state 97

    (140) main1 -> empty .

    RBRACKET        reduce using rule 140 (main1 -> empty .)


state 98

    (21) declaration0 -> ID . COLON declaration1 SEMICOLON
    (27) assignment0 -> ID . EQUALS expression0 SEMICOLON
    (28) assignment0 -> ID . LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (29) assignment0 -> ID . LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (136) object_assignment -> ID . EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (82) function_call -> ID . LPAREN function_call_params0 RPAREN
    (101) method_call0 -> ID . DOT function_call

    COLON           shift and go to state 15
    EQUALS          shift and go to state 145
    LSQRBRACKET     shift and go to state 17
    LPAREN          shift and go to state 62
    DOT             shift and go to state 146


state 99

    (127) statement -> assignment0 .

    ID              reduce using rule 127 (statement -> assignment0 .)
    IF              reduce using rule 127 (statement -> assignment0 .)
    WRITE           reduce using rule 127 (statement -> assignment0 .)
    READ            reduce using rule 127 (statement -> assignment0 .)
    RETURN          reduce using rule 127 (statement -> assignment0 .)
    WHILE           reduce using rule 127 (statement -> assignment0 .)
    RBRACKET        reduce using rule 127 (statement -> assignment0 .)


state 100

    (128) statement -> object_assignment .

    ID              reduce using rule 128 (statement -> object_assignment .)
    IF              reduce using rule 128 (statement -> object_assignment .)
    WRITE           reduce using rule 128 (statement -> object_assignment .)
    READ            reduce using rule 128 (statement -> object_assignment .)
    RETURN          reduce using rule 128 (statement -> object_assignment .)
    WHILE           reduce using rule 128 (statement -> object_assignment .)
    RBRACKET        reduce using rule 128 (statement -> object_assignment .)


state 101

    (129) statement -> condition0 .

    ID              reduce using rule 129 (statement -> condition0 .)
    IF              reduce using rule 129 (statement -> condition0 .)
    WRITE           reduce using rule 129 (statement -> condition0 .)
    READ            reduce using rule 129 (statement -> condition0 .)
    RETURN          reduce using rule 129 (statement -> condition0 .)
    WHILE           reduce using rule 129 (statement -> condition0 .)
    RBRACKET        reduce using rule 129 (statement -> condition0 .)


state 102

    (130) statement -> writing0 .

    ID              reduce using rule 130 (statement -> writing0 .)
    IF              reduce using rule 130 (statement -> writing0 .)
    WRITE           reduce using rule 130 (statement -> writing0 .)
    READ            reduce using rule 130 (statement -> writing0 .)
    RETURN          reduce using rule 130 (statement -> writing0 .)
    WHILE           reduce using rule 130 (statement -> writing0 .)
    RBRACKET        reduce using rule 130 (statement -> writing0 .)


state 103

    (131) statement -> reading .

    ID              reduce using rule 131 (statement -> reading .)
    IF              reduce using rule 131 (statement -> reading .)
    WRITE           reduce using rule 131 (statement -> reading .)
    READ            reduce using rule 131 (statement -> reading .)
    RETURN          reduce using rule 131 (statement -> reading .)
    WHILE           reduce using rule 131 (statement -> reading .)
    RBRACKET        reduce using rule 131 (statement -> reading .)


state 104

    (132) statement -> return .

    ID              reduce using rule 132 (statement -> return .)
    IF              reduce using rule 132 (statement -> return .)
    WRITE           reduce using rule 132 (statement -> return .)
    READ            reduce using rule 132 (statement -> return .)
    RETURN          reduce using rule 132 (statement -> return .)
    WHILE           reduce using rule 132 (statement -> return .)
    RBRACKET        reduce using rule 132 (statement -> return .)


state 105

    (133) statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 147


state 106

    (134) statement -> method_call0 . SEMICOLON

    SEMICOLON       shift and go to state 148


state 107

    (135) statement -> while .

    ID              reduce using rule 135 (statement -> while .)
    IF              reduce using rule 135 (statement -> while .)
    WRITE           reduce using rule 135 (statement -> while .)
    READ            reduce using rule 135 (statement -> while .)
    RETURN          reduce using rule 135 (statement -> while .)
    WHILE           reduce using rule 135 (statement -> while .)
    RBRACKET        reduce using rule 135 (statement -> while .)


state 108

    (112) condition0 -> IF . LPAREN expression0 RPAREN block0 condition1 SEMICOLON

    LPAREN          shift and go to state 149


state 109

    (115) writing0 -> WRITE . LPAREN writing1 RPAREN SEMICOLON

    LPAREN          shift and go to state 150


state 110

    (120) reading -> READ . ID SEMICOLON

    ID              shift and go to state 151


state 111

    (121) return -> RETURN . expression0 SEMICOLON
    (122) return -> RETURN . SEMICOLON
    (88) expression0 -> . exp0 expression1
    (89) expression0 -> . CONST_BOOL expression1
    (90) expression0 -> . attr_access0 expression1
    (57) exp0 -> . term0 exp1
    (100) attr_access0 -> . ID DOT ID
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call

    SEMICOLON       shift and go to state 153
    CONST_BOOL      shift and go to state 37
    ID              shift and go to state 34
    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    expression0                    shift and go to state 152
    exp0                           shift and go to state 36
    attr_access0                   shift and go to state 38
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47

state 112

    (123) while -> WHILE . LPAREN expression0 RPAREN block0

    LPAREN          shift and go to state 154


state 113

    (8) class0 -> CLASS ID class1 LBRACKET . class2 constructor class3 RBRACKET SEMICOLON
    (11) class2 -> . attributes
    (12) class2 -> . empty
    (31) attributes -> . data_access simple_declaration attributes
    (32) attributes -> . simple_assignment attributes
    (33) attributes -> . empty
    (141) empty -> .
    (102) data_access -> . PRIVATE
    (103) data_access -> . PUBLIC
    (48) simple_assignment -> . ID EQUALS expression0 SEMICOLON

    CONSTRUCT       reduce using rule 141 (empty -> .)
    PRIVATE         shift and go to state 161
    PUBLIC          shift and go to state 162
    ID              shift and go to state 155

    class2                         shift and go to state 156
    attributes                     shift and go to state 157
    empty                          shift and go to state 158
    data_access                    shift and go to state 159
    simple_assignment              shift and go to state 160

state 114

    (9) class1 -> COLON ID .

    LBRACKET        reduce using rule 9 (class1 -> COLON ID .)


state 115

    (15) function0 -> DEF ID LPAREN params0 . RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0

    RPAREN          shift and go to state 163


state 116

    (36) params0 -> type . ID params1

    ID              shift and go to state 164


state 117

    (37) params0 -> empty .

    RPAREN          reduce using rule 37 (params0 -> empty .)


state 118

    (24) declaration1 -> type LSQRBRACKET exp0 . RSQRBRACKET declaration2

    RSQRBRACKET     shift and go to state 165


state 119

    (100) attr_access0 -> ID DOT ID .
    (82) function_call -> ID . LPAREN function_call_params0 RPAREN

    POWER           reduce using rule 100 (attr_access0 -> ID DOT ID .)
    SQRT            reduce using rule 100 (attr_access0 -> ID DOT ID .)
    LTHAN           reduce using rule 100 (attr_access0 -> ID DOT ID .)
    GTHAN           reduce using rule 100 (attr_access0 -> ID DOT ID .)
    DIFFERENT       reduce using rule 100 (attr_access0 -> ID DOT ID .)
    EQUIVALENT      reduce using rule 100 (attr_access0 -> ID DOT ID .)
    SEMICOLON       reduce using rule 100 (attr_access0 -> ID DOT ID .)
    MULTIPLY        reduce using rule 100 (attr_access0 -> ID DOT ID .)
    DIVIDE          reduce using rule 100 (attr_access0 -> ID DOT ID .)
    PLUS            reduce using rule 100 (attr_access0 -> ID DOT ID .)
    MINUS           reduce using rule 100 (attr_access0 -> ID DOT ID .)
    RSQRBRACKET     reduce using rule 100 (attr_access0 -> ID DOT ID .)
    RPAREN          reduce using rule 100 (attr_access0 -> ID DOT ID .)
    COMMA           reduce using rule 100 (attr_access0 -> ID DOT ID .)
    LPAREN          shift and go to state 62


state 120

    (101) method_call0 -> ID DOT function_call .

    POWER           reduce using rule 101 (method_call0 -> ID DOT function_call .)
    SQRT            reduce using rule 101 (method_call0 -> ID DOT function_call .)
    MULTIPLY        reduce using rule 101 (method_call0 -> ID DOT function_call .)
    DIVIDE          reduce using rule 101 (method_call0 -> ID DOT function_call .)
    PLUS            reduce using rule 101 (method_call0 -> ID DOT function_call .)
    MINUS           reduce using rule 101 (method_call0 -> ID DOT function_call .)
    LTHAN           reduce using rule 101 (method_call0 -> ID DOT function_call .)
    GTHAN           reduce using rule 101 (method_call0 -> ID DOT function_call .)
    DIFFERENT       reduce using rule 101 (method_call0 -> ID DOT function_call .)
    EQUIVALENT      reduce using rule 101 (method_call0 -> ID DOT function_call .)
    SEMICOLON       reduce using rule 101 (method_call0 -> ID DOT function_call .)
    RSQRBRACKET     reduce using rule 101 (method_call0 -> ID DOT function_call .)
    RPAREN          reduce using rule 101 (method_call0 -> ID DOT function_call .)
    COMMA           reduce using rule 101 (method_call0 -> ID DOT function_call .)


state 121

    (73) power0 -> ID LSQRBRACKET exp0 . RSQRBRACKET power1 power2

    RSQRBRACKET     shift and go to state 166


state 122

    (82) function_call -> ID LPAREN function_call_params0 . RPAREN

    RPAREN          shift and go to state 167


state 123

    (83) function_call_params0 -> expression0 . function_call_params1
    (86) function_call_params1 -> . COMMA function_call_params0
    (87) function_call_params1 -> . empty
    (141) empty -> .

    COMMA           shift and go to state 169
    RPAREN          reduce using rule 141 (empty -> .)

    function_call_params1          shift and go to state 168
    empty                          shift and go to state 170

state 124

    (84) function_call_params0 -> CONST_STRING . function_call_params1
    (86) function_call_params1 -> . COMMA function_call_params0
    (87) function_call_params1 -> . empty
    (141) empty -> .

    COMMA           shift and go to state 169
    RPAREN          reduce using rule 141 (empty -> .)

    function_call_params1          shift and go to state 171
    empty                          shift and go to state 170

state 125

    (85) function_call_params0 -> empty . function_call_params1
    (86) function_call_params1 -> . COMMA function_call_params0
    (87) function_call_params1 -> . empty
    (141) empty -> .

    COMMA           shift and go to state 169
    RPAREN          reduce using rule 141 (empty -> .)

    empty                          shift and go to state 170
    function_call_params1          shift and go to state 172

state 126

    (93) expression2 -> LTHAN expression3 .

    SEMICOLON       reduce using rule 93 (expression2 -> LTHAN expression3 .)
    COMMA           reduce using rule 93 (expression2 -> LTHAN expression3 .)
    RPAREN          reduce using rule 93 (expression2 -> LTHAN expression3 .)


state 127

    (97) expression3 -> exp0 .

    SEMICOLON       reduce using rule 97 (expression3 -> exp0 .)
    COMMA           reduce using rule 97 (expression3 -> exp0 .)
    RPAREN          reduce using rule 97 (expression3 -> exp0 .)


state 128

    (98) expression3 -> CONST_BOOL .

    SEMICOLON       reduce using rule 98 (expression3 -> CONST_BOOL .)
    COMMA           reduce using rule 98 (expression3 -> CONST_BOOL .)
    RPAREN          reduce using rule 98 (expression3 -> CONST_BOOL .)


state 129

    (99) expression3 -> attr_access0 .
    (72) power0 -> attr_access0 . power2
    (76) power2 -> . POWER power0
    (77) power2 -> . SQRT power0
    (78) power2 -> . empty
    (141) empty -> .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 99 (expression3 -> attr_access0 .)
  ! reduce/reduce conflict for COMMA resolved using rule 99 (expression3 -> attr_access0 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 99 (expression3 -> attr_access0 .)
    SEMICOLON       reduce using rule 99 (expression3 -> attr_access0 .)
    COMMA           reduce using rule 99 (expression3 -> attr_access0 .)
    RPAREN          reduce using rule 99 (expression3 -> attr_access0 .)
    POWER           shift and go to state 75
    SQRT            shift and go to state 76
    MULTIPLY        reduce using rule 141 (empty -> .)
    DIVIDE          reduce using rule 141 (empty -> .)
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)

  ! SEMICOLON       [ reduce using rule 141 (empty -> .) ]
  ! COMMA           [ reduce using rule 141 (empty -> .) ]
  ! RPAREN          [ reduce using rule 141 (empty -> .) ]

    power2                         shift and go to state 73
    empty                          shift and go to state 89

state 130

    (94) expression2 -> GTHAN expression3 .

    SEMICOLON       reduce using rule 94 (expression2 -> GTHAN expression3 .)
    COMMA           reduce using rule 94 (expression2 -> GTHAN expression3 .)
    RPAREN          reduce using rule 94 (expression2 -> GTHAN expression3 .)


state 131

    (95) expression2 -> DIFFERENT expression3 .

    SEMICOLON       reduce using rule 95 (expression2 -> DIFFERENT expression3 .)
    COMMA           reduce using rule 95 (expression2 -> DIFFERENT expression3 .)
    RPAREN          reduce using rule 95 (expression2 -> DIFFERENT expression3 .)


state 132

    (96) expression2 -> EQUIVALENT expression3 .

    SEMICOLON       reduce using rule 96 (expression2 -> EQUIVALENT expression3 .)
    COMMA           reduce using rule 96 (expression2 -> EQUIVALENT expression3 .)
    RPAREN          reduce using rule 96 (expression2 -> EQUIVALENT expression3 .)


state 133

    (76) power2 -> POWER power0 .

    MULTIPLY        reduce using rule 76 (power2 -> POWER power0 .)
    DIVIDE          reduce using rule 76 (power2 -> POWER power0 .)
    PLUS            reduce using rule 76 (power2 -> POWER power0 .)
    MINUS           reduce using rule 76 (power2 -> POWER power0 .)
    LTHAN           reduce using rule 76 (power2 -> POWER power0 .)
    GTHAN           reduce using rule 76 (power2 -> POWER power0 .)
    DIFFERENT       reduce using rule 76 (power2 -> POWER power0 .)
    EQUIVALENT      reduce using rule 76 (power2 -> POWER power0 .)
    SEMICOLON       reduce using rule 76 (power2 -> POWER power0 .)
    COMMA           reduce using rule 76 (power2 -> POWER power0 .)
    RPAREN          reduce using rule 76 (power2 -> POWER power0 .)
    RSQRBRACKET     reduce using rule 76 (power2 -> POWER power0 .)


state 134

    (77) power2 -> SQRT power0 .

    MULTIPLY        reduce using rule 77 (power2 -> SQRT power0 .)
    DIVIDE          reduce using rule 77 (power2 -> SQRT power0 .)
    PLUS            reduce using rule 77 (power2 -> SQRT power0 .)
    MINUS           reduce using rule 77 (power2 -> SQRT power0 .)
    LTHAN           reduce using rule 77 (power2 -> SQRT power0 .)
    GTHAN           reduce using rule 77 (power2 -> SQRT power0 .)
    DIFFERENT       reduce using rule 77 (power2 -> SQRT power0 .)
    EQUIVALENT      reduce using rule 77 (power2 -> SQRT power0 .)
    SEMICOLON       reduce using rule 77 (power2 -> SQRT power0 .)
    COMMA           reduce using rule 77 (power2 -> SQRT power0 .)
    RPAREN          reduce using rule 77 (power2 -> SQRT power0 .)
    RSQRBRACKET     reduce using rule 77 (power2 -> SQRT power0 .)


state 135

    (58) exp1 -> PLUS exp0 .

    LTHAN           reduce using rule 58 (exp1 -> PLUS exp0 .)
    GTHAN           reduce using rule 58 (exp1 -> PLUS exp0 .)
    DIFFERENT       reduce using rule 58 (exp1 -> PLUS exp0 .)
    EQUIVALENT      reduce using rule 58 (exp1 -> PLUS exp0 .)
    SEMICOLON       reduce using rule 58 (exp1 -> PLUS exp0 .)
    RSQRBRACKET     reduce using rule 58 (exp1 -> PLUS exp0 .)
    RPAREN          reduce using rule 58 (exp1 -> PLUS exp0 .)
    COMMA           reduce using rule 58 (exp1 -> PLUS exp0 .)


state 136

    (59) exp1 -> MINUS exp0 .

    LTHAN           reduce using rule 59 (exp1 -> MINUS exp0 .)
    GTHAN           reduce using rule 59 (exp1 -> MINUS exp0 .)
    DIFFERENT       reduce using rule 59 (exp1 -> MINUS exp0 .)
    EQUIVALENT      reduce using rule 59 (exp1 -> MINUS exp0 .)
    SEMICOLON       reduce using rule 59 (exp1 -> MINUS exp0 .)
    RSQRBRACKET     reduce using rule 59 (exp1 -> MINUS exp0 .)
    RPAREN          reduce using rule 59 (exp1 -> MINUS exp0 .)
    COMMA           reduce using rule 59 (exp1 -> MINUS exp0 .)


state 137

    (62) term1 -> MULTIPLY term0 .

    PLUS            reduce using rule 62 (term1 -> MULTIPLY term0 .)
    MINUS           reduce using rule 62 (term1 -> MULTIPLY term0 .)
    LTHAN           reduce using rule 62 (term1 -> MULTIPLY term0 .)
    GTHAN           reduce using rule 62 (term1 -> MULTIPLY term0 .)
    DIFFERENT       reduce using rule 62 (term1 -> MULTIPLY term0 .)
    EQUIVALENT      reduce using rule 62 (term1 -> MULTIPLY term0 .)
    SEMICOLON       reduce using rule 62 (term1 -> MULTIPLY term0 .)
    RSQRBRACKET     reduce using rule 62 (term1 -> MULTIPLY term0 .)
    RPAREN          reduce using rule 62 (term1 -> MULTIPLY term0 .)
    COMMA           reduce using rule 62 (term1 -> MULTIPLY term0 .)


state 138

    (63) term1 -> DIVIDE term0 .

    PLUS            reduce using rule 63 (term1 -> DIVIDE term0 .)
    MINUS           reduce using rule 63 (term1 -> DIVIDE term0 .)
    LTHAN           reduce using rule 63 (term1 -> DIVIDE term0 .)
    GTHAN           reduce using rule 63 (term1 -> DIVIDE term0 .)
    DIFFERENT       reduce using rule 63 (term1 -> DIVIDE term0 .)
    EQUIVALENT      reduce using rule 63 (term1 -> DIVIDE term0 .)
    SEMICOLON       reduce using rule 63 (term1 -> DIVIDE term0 .)
    RSQRBRACKET     reduce using rule 63 (term1 -> DIVIDE term0 .)
    RPAREN          reduce using rule 63 (term1 -> DIVIDE term0 .)
    COMMA           reduce using rule 63 (term1 -> DIVIDE term0 .)


state 139

    (68) power0 -> LPAREN exp0 RPAREN . power2
    (76) power2 -> . POWER power0
    (77) power2 -> . SQRT power0
    (78) power2 -> . empty
    (141) empty -> .

    POWER           shift and go to state 75
    SQRT            shift and go to state 76
    MULTIPLY        reduce using rule 141 (empty -> .)
    DIVIDE          reduce using rule 141 (empty -> .)
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LTHAN           reduce using rule 141 (empty -> .)
    GTHAN           reduce using rule 141 (empty -> .)
    DIFFERENT       reduce using rule 141 (empty -> .)
    EQUIVALENT      reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    RSQRBRACKET     reduce using rule 141 (empty -> .)
    RPAREN          reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)

    power2                         shift and go to state 173
    empty                          shift and go to state 89

state 140

    (29) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET . exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (57) exp0 -> . term0 exp1
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (100) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    ID              shift and go to state 50
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    exp0                           shift and go to state 174
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47
    attr_access0                   shift and go to state 52

state 141

    (28) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS . expression0 SEMICOLON
    (88) expression0 -> . exp0 expression1
    (89) expression0 -> . CONST_BOOL expression1
    (90) expression0 -> . attr_access0 expression1
    (57) exp0 -> . term0 exp1
    (100) attr_access0 -> . ID DOT ID
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 37
    ID              shift and go to state 34
    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    exp0                           shift and go to state 36
    expression0                    shift and go to state 175
    attr_access0                   shift and go to state 38
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47

state 142

    (137) main0 -> MAIN LBRACKET main1 RBRACKET .

    $end            reduce using rule 137 (main0 -> MAIN LBRACKET main1 RBRACKET .)


state 143

    (138) main1 -> declaration0 main1 .

    RBRACKET        reduce using rule 138 (main1 -> declaration0 main1 .)


state 144

    (139) main1 -> statement main1 .

    RBRACKET        reduce using rule 139 (main1 -> statement main1 .)


state 145

    (27) assignment0 -> ID EQUALS . expression0 SEMICOLON
    (136) object_assignment -> ID EQUALS . NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (88) expression0 -> . exp0 expression1
    (89) expression0 -> . CONST_BOOL expression1
    (90) expression0 -> . attr_access0 expression1
    (57) exp0 -> . term0 exp1
    (100) attr_access0 -> . ID DOT ID
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call

    NEW             shift and go to state 176
    CONST_BOOL      shift and go to state 37
    ID              shift and go to state 34
    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    expression0                    shift and go to state 35
    exp0                           shift and go to state 36
    attr_access0                   shift and go to state 38
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47

state 146

    (101) method_call0 -> ID DOT . function_call
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN

    ID              shift and go to state 177

    function_call                  shift and go to state 120

state 147

    (133) statement -> function_call SEMICOLON .

    ID              reduce using rule 133 (statement -> function_call SEMICOLON .)
    IF              reduce using rule 133 (statement -> function_call SEMICOLON .)
    WRITE           reduce using rule 133 (statement -> function_call SEMICOLON .)
    READ            reduce using rule 133 (statement -> function_call SEMICOLON .)
    RETURN          reduce using rule 133 (statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 133 (statement -> function_call SEMICOLON .)
    RBRACKET        reduce using rule 133 (statement -> function_call SEMICOLON .)


state 148

    (134) statement -> method_call0 SEMICOLON .

    ID              reduce using rule 134 (statement -> method_call0 SEMICOLON .)
    IF              reduce using rule 134 (statement -> method_call0 SEMICOLON .)
    WRITE           reduce using rule 134 (statement -> method_call0 SEMICOLON .)
    READ            reduce using rule 134 (statement -> method_call0 SEMICOLON .)
    RETURN          reduce using rule 134 (statement -> method_call0 SEMICOLON .)
    WHILE           reduce using rule 134 (statement -> method_call0 SEMICOLON .)
    RBRACKET        reduce using rule 134 (statement -> method_call0 SEMICOLON .)


state 149

    (112) condition0 -> IF LPAREN . expression0 RPAREN block0 condition1 SEMICOLON
    (88) expression0 -> . exp0 expression1
    (89) expression0 -> . CONST_BOOL expression1
    (90) expression0 -> . attr_access0 expression1
    (57) exp0 -> . term0 exp1
    (100) attr_access0 -> . ID DOT ID
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 37
    ID              shift and go to state 34
    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    expression0                    shift and go to state 178
    exp0                           shift and go to state 36
    attr_access0                   shift and go to state 38
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47

state 150

    (115) writing0 -> WRITE LPAREN . writing1 RPAREN SEMICOLON
    (116) writing1 -> . expression0 writing2
    (117) writing1 -> . CONST_STRING writing2
    (88) expression0 -> . exp0 expression1
    (89) expression0 -> . CONST_BOOL expression1
    (90) expression0 -> . attr_access0 expression1
    (57) exp0 -> . term0 exp1
    (100) attr_access0 -> . ID DOT ID
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call

    CONST_STRING    shift and go to state 181
    CONST_BOOL      shift and go to state 37
    ID              shift and go to state 34
    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    writing1                       shift and go to state 179
    expression0                    shift and go to state 180
    exp0                           shift and go to state 36
    attr_access0                   shift and go to state 38
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47

state 151

    (120) reading -> READ ID . SEMICOLON

    SEMICOLON       shift and go to state 182


state 152

    (121) return -> RETURN expression0 . SEMICOLON

    SEMICOLON       shift and go to state 183


state 153

    (122) return -> RETURN SEMICOLON .

    ID              reduce using rule 122 (return -> RETURN SEMICOLON .)
    IF              reduce using rule 122 (return -> RETURN SEMICOLON .)
    WRITE           reduce using rule 122 (return -> RETURN SEMICOLON .)
    READ            reduce using rule 122 (return -> RETURN SEMICOLON .)
    RETURN          reduce using rule 122 (return -> RETURN SEMICOLON .)
    WHILE           reduce using rule 122 (return -> RETURN SEMICOLON .)
    RBRACKET        reduce using rule 122 (return -> RETURN SEMICOLON .)


state 154

    (123) while -> WHILE LPAREN . expression0 RPAREN block0
    (88) expression0 -> . exp0 expression1
    (89) expression0 -> . CONST_BOOL expression1
    (90) expression0 -> . attr_access0 expression1
    (57) exp0 -> . term0 exp1
    (100) attr_access0 -> . ID DOT ID
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 37
    ID              shift and go to state 34
    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    expression0                    shift and go to state 184
    exp0                           shift and go to state 36
    attr_access0                   shift and go to state 38
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47

state 155

    (48) simple_assignment -> ID . EQUALS expression0 SEMICOLON

    EQUALS          shift and go to state 185


state 156

    (8) class0 -> CLASS ID class1 LBRACKET class2 . constructor class3 RBRACKET SEMICOLON
    (30) constructor -> . CONSTRUCT ID LPAREN params0 RPAREN function_block0

    CONSTRUCT       shift and go to state 187

    constructor                    shift and go to state 186

state 157

    (11) class2 -> attributes .

    CONSTRUCT       reduce using rule 11 (class2 -> attributes .)


state 158

    (12) class2 -> empty .
    (33) attributes -> empty .

  ! reduce/reduce conflict for CONSTRUCT resolved using rule 12 (class2 -> empty .)
    CONSTRUCT       reduce using rule 12 (class2 -> empty .)

  ! CONSTRUCT       [ reduce using rule 33 (attributes -> empty .) ]


state 159

    (31) attributes -> data_access . simple_declaration attributes
    (47) simple_declaration -> . ID COLON type SEMICOLON

    ID              shift and go to state 189

    simple_declaration             shift and go to state 188

state 160

    (32) attributes -> simple_assignment . attributes
    (31) attributes -> . data_access simple_declaration attributes
    (32) attributes -> . simple_assignment attributes
    (33) attributes -> . empty
    (102) data_access -> . PRIVATE
    (103) data_access -> . PUBLIC
    (48) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (141) empty -> .

    PRIVATE         shift and go to state 161
    PUBLIC          shift and go to state 162
    ID              shift and go to state 155
    CONSTRUCT       reduce using rule 141 (empty -> .)

    simple_assignment              shift and go to state 160
    attributes                     shift and go to state 190
    data_access                    shift and go to state 159
    empty                          shift and go to state 191

state 161

    (102) data_access -> PRIVATE .

    ID              reduce using rule 102 (data_access -> PRIVATE .)
    DEF             reduce using rule 102 (data_access -> PRIVATE .)


state 162

    (103) data_access -> PUBLIC .

    ID              reduce using rule 103 (data_access -> PUBLIC .)
    DEF             reduce using rule 103 (data_access -> PUBLIC .)


state 163

    (15) function0 -> DEF ID LPAREN params0 RPAREN . ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0

    ARROW           shift and go to state 192


state 164

    (36) params0 -> type ID . params1
    (38) params1 -> . COMMA params0
    (39) params1 -> . empty
    (141) empty -> .

    COMMA           shift and go to state 194
    RPAREN          reduce using rule 141 (empty -> .)

    params1                        shift and go to state 193
    empty                          shift and go to state 195

state 165

    (24) declaration1 -> type LSQRBRACKET exp0 RSQRBRACKET . declaration2
    (25) declaration2 -> . LSQRBRACKET exp0 RSQRBRACKET
    (26) declaration2 -> . empty
    (141) empty -> .

    LSQRBRACKET     shift and go to state 196
    SEMICOLON       reduce using rule 141 (empty -> .)

    declaration2                   shift and go to state 197
    empty                          shift and go to state 198

state 166

    (73) power0 -> ID LSQRBRACKET exp0 RSQRBRACKET . power1 power2
    (74) power1 -> . LSQRBRACKET exp0 RSQRBRACKET
    (75) power1 -> . empty
    (141) empty -> .

    LSQRBRACKET     shift and go to state 199
    POWER           reduce using rule 141 (empty -> .)
    SQRT            reduce using rule 141 (empty -> .)
    MULTIPLY        reduce using rule 141 (empty -> .)
    DIVIDE          reduce using rule 141 (empty -> .)
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LTHAN           reduce using rule 141 (empty -> .)
    GTHAN           reduce using rule 141 (empty -> .)
    DIFFERENT       reduce using rule 141 (empty -> .)
    EQUIVALENT      reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    RSQRBRACKET     reduce using rule 141 (empty -> .)
    RPAREN          reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)

    power1                         shift and go to state 200
    empty                          shift and go to state 201

state 167

    (82) function_call -> ID LPAREN function_call_params0 RPAREN .

    POWER           reduce using rule 82 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    SQRT            reduce using rule 82 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    MULTIPLY        reduce using rule 82 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    DIVIDE          reduce using rule 82 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    PLUS            reduce using rule 82 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    MINUS           reduce using rule 82 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    LTHAN           reduce using rule 82 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    GTHAN           reduce using rule 82 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    DIFFERENT       reduce using rule 82 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    EQUIVALENT      reduce using rule 82 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    SEMICOLON       reduce using rule 82 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    RSQRBRACKET     reduce using rule 82 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    RPAREN          reduce using rule 82 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    COMMA           reduce using rule 82 (function_call -> ID LPAREN function_call_params0 RPAREN .)


state 168

    (83) function_call_params0 -> expression0 function_call_params1 .

    RPAREN          reduce using rule 83 (function_call_params0 -> expression0 function_call_params1 .)


state 169

    (86) function_call_params1 -> COMMA . function_call_params0
    (83) function_call_params0 -> . expression0 function_call_params1
    (84) function_call_params0 -> . CONST_STRING function_call_params1
    (85) function_call_params0 -> . empty function_call_params1
    (88) expression0 -> . exp0 expression1
    (89) expression0 -> . CONST_BOOL expression1
    (90) expression0 -> . attr_access0 expression1
    (141) empty -> .
    (57) exp0 -> . term0 exp1
    (100) attr_access0 -> . ID DOT ID
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call

    CONST_STRING    shift and go to state 124
    CONST_BOOL      shift and go to state 37
    COMMA           reduce using rule 141 (empty -> .)
    RPAREN          reduce using rule 141 (empty -> .)
    ID              shift and go to state 34
    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    function_call_params0          shift and go to state 202
    expression0                    shift and go to state 123
    empty                          shift and go to state 125
    exp0                           shift and go to state 36
    attr_access0                   shift and go to state 38
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47

state 170

    (87) function_call_params1 -> empty .

    RPAREN          reduce using rule 87 (function_call_params1 -> empty .)


state 171

    (84) function_call_params0 -> CONST_STRING function_call_params1 .

    RPAREN          reduce using rule 84 (function_call_params0 -> CONST_STRING function_call_params1 .)


state 172

    (85) function_call_params0 -> empty function_call_params1 .

    RPAREN          reduce using rule 85 (function_call_params0 -> empty function_call_params1 .)


state 173

    (68) power0 -> LPAREN exp0 RPAREN power2 .

    MULTIPLY        reduce using rule 68 (power0 -> LPAREN exp0 RPAREN power2 .)
    DIVIDE          reduce using rule 68 (power0 -> LPAREN exp0 RPAREN power2 .)
    PLUS            reduce using rule 68 (power0 -> LPAREN exp0 RPAREN power2 .)
    MINUS           reduce using rule 68 (power0 -> LPAREN exp0 RPAREN power2 .)
    LTHAN           reduce using rule 68 (power0 -> LPAREN exp0 RPAREN power2 .)
    GTHAN           reduce using rule 68 (power0 -> LPAREN exp0 RPAREN power2 .)
    DIFFERENT       reduce using rule 68 (power0 -> LPAREN exp0 RPAREN power2 .)
    EQUIVALENT      reduce using rule 68 (power0 -> LPAREN exp0 RPAREN power2 .)
    SEMICOLON       reduce using rule 68 (power0 -> LPAREN exp0 RPAREN power2 .)
    RSQRBRACKET     reduce using rule 68 (power0 -> LPAREN exp0 RPAREN power2 .)
    RPAREN          reduce using rule 68 (power0 -> LPAREN exp0 RPAREN power2 .)
    COMMA           reduce using rule 68 (power0 -> LPAREN exp0 RPAREN power2 .)


state 174

    (29) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 . RSQRBRACKET EQUALS expression0 SEMICOLON

    RSQRBRACKET     shift and go to state 203


state 175

    (28) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 . SEMICOLON

    SEMICOLON       shift and go to state 204


state 176

    (136) object_assignment -> ID EQUALS NEW . ID LPAREN function_call_params0 RPAREN SEMICOLON

    ID              shift and go to state 205


state 177

    (82) function_call -> ID . LPAREN function_call_params0 RPAREN

    LPAREN          shift and go to state 62


state 178

    (112) condition0 -> IF LPAREN expression0 . RPAREN block0 condition1 SEMICOLON

    RPAREN          shift and go to state 206


state 179

    (115) writing0 -> WRITE LPAREN writing1 . RPAREN SEMICOLON

    RPAREN          shift and go to state 207


state 180

    (116) writing1 -> expression0 . writing2
    (118) writing2 -> . COMMA writing1
    (119) writing2 -> . empty
    (141) empty -> .

    COMMA           shift and go to state 209
    RPAREN          reduce using rule 141 (empty -> .)

    writing2                       shift and go to state 208
    empty                          shift and go to state 210

state 181

    (117) writing1 -> CONST_STRING . writing2
    (118) writing2 -> . COMMA writing1
    (119) writing2 -> . empty
    (141) empty -> .

    COMMA           shift and go to state 209
    RPAREN          reduce using rule 141 (empty -> .)

    writing2                       shift and go to state 211
    empty                          shift and go to state 210

state 182

    (120) reading -> READ ID SEMICOLON .

    ID              reduce using rule 120 (reading -> READ ID SEMICOLON .)
    IF              reduce using rule 120 (reading -> READ ID SEMICOLON .)
    WRITE           reduce using rule 120 (reading -> READ ID SEMICOLON .)
    READ            reduce using rule 120 (reading -> READ ID SEMICOLON .)
    RETURN          reduce using rule 120 (reading -> READ ID SEMICOLON .)
    WHILE           reduce using rule 120 (reading -> READ ID SEMICOLON .)
    RBRACKET        reduce using rule 120 (reading -> READ ID SEMICOLON .)


state 183

    (121) return -> RETURN expression0 SEMICOLON .

    ID              reduce using rule 121 (return -> RETURN expression0 SEMICOLON .)
    IF              reduce using rule 121 (return -> RETURN expression0 SEMICOLON .)
    WRITE           reduce using rule 121 (return -> RETURN expression0 SEMICOLON .)
    READ            reduce using rule 121 (return -> RETURN expression0 SEMICOLON .)
    RETURN          reduce using rule 121 (return -> RETURN expression0 SEMICOLON .)
    WHILE           reduce using rule 121 (return -> RETURN expression0 SEMICOLON .)
    RBRACKET        reduce using rule 121 (return -> RETURN expression0 SEMICOLON .)


state 184

    (123) while -> WHILE LPAREN expression0 . RPAREN block0

    RPAREN          shift and go to state 212


state 185

    (48) simple_assignment -> ID EQUALS . expression0 SEMICOLON
    (88) expression0 -> . exp0 expression1
    (89) expression0 -> . CONST_BOOL expression1
    (90) expression0 -> . attr_access0 expression1
    (57) exp0 -> . term0 exp1
    (100) attr_access0 -> . ID DOT ID
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 37
    ID              shift and go to state 34
    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    expression0                    shift and go to state 213
    exp0                           shift and go to state 36
    attr_access0                   shift and go to state 38
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47

state 186

    (8) class0 -> CLASS ID class1 LBRACKET class2 constructor . class3 RBRACKET SEMICOLON
    (13) class3 -> . methods
    (14) class3 -> . empty
    (34) methods -> . data_access function0 methods
    (35) methods -> . empty
    (141) empty -> .
    (102) data_access -> . PRIVATE
    (103) data_access -> . PUBLIC

    RBRACKET        reduce using rule 141 (empty -> .)
    PRIVATE         shift and go to state 161
    PUBLIC          shift and go to state 162

    class3                         shift and go to state 214
    methods                        shift and go to state 215
    empty                          shift and go to state 216
    data_access                    shift and go to state 217

state 187

    (30) constructor -> CONSTRUCT . ID LPAREN params0 RPAREN function_block0

    ID              shift and go to state 218


state 188

    (31) attributes -> data_access simple_declaration . attributes
    (31) attributes -> . data_access simple_declaration attributes
    (32) attributes -> . simple_assignment attributes
    (33) attributes -> . empty
    (102) data_access -> . PRIVATE
    (103) data_access -> . PUBLIC
    (48) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (141) empty -> .

    PRIVATE         shift and go to state 161
    PUBLIC          shift and go to state 162
    ID              shift and go to state 155
    CONSTRUCT       reduce using rule 141 (empty -> .)

    data_access                    shift and go to state 159
    attributes                     shift and go to state 219
    simple_assignment              shift and go to state 160
    empty                          shift and go to state 191

state 189

    (47) simple_declaration -> ID . COLON type SEMICOLON

    COLON           shift and go to state 220


state 190

    (32) attributes -> simple_assignment attributes .

    CONSTRUCT       reduce using rule 32 (attributes -> simple_assignment attributes .)


state 191

    (33) attributes -> empty .

    CONSTRUCT       reduce using rule 33 (attributes -> empty .)


state 192

    (15) function0 -> DEF ID LPAREN params0 RPAREN ARROW . function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0
    (16) function1 -> . type
    (17) function1 -> . VOID
    (43) type -> . INT
    (44) type -> . FLOAT
    (45) type -> . STRING
    (46) type -> . BOOL

    VOID            shift and go to state 223
    INT             shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33

    function1                      shift and go to state 221
    type                           shift and go to state 222

state 193

    (36) params0 -> type ID params1 .

    RPAREN          reduce using rule 36 (params0 -> type ID params1 .)


state 194

    (38) params1 -> COMMA . params0
    (36) params0 -> . type ID params1
    (37) params0 -> . empty
    (43) type -> . INT
    (44) type -> . FLOAT
    (45) type -> . STRING
    (46) type -> . BOOL
    (141) empty -> .

    INT             shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    RPAREN          reduce using rule 141 (empty -> .)

    params0                        shift and go to state 224
    type                           shift and go to state 116
    empty                          shift and go to state 117

state 195

    (39) params1 -> empty .

    RPAREN          reduce using rule 39 (params1 -> empty .)


state 196

    (25) declaration2 -> LSQRBRACKET . exp0 RSQRBRACKET
    (57) exp0 -> . term0 exp1
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (100) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    ID              shift and go to state 50
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    exp0                           shift and go to state 225
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47
    attr_access0                   shift and go to state 52

state 197

    (24) declaration1 -> type LSQRBRACKET exp0 RSQRBRACKET declaration2 .

    SEMICOLON       reduce using rule 24 (declaration1 -> type LSQRBRACKET exp0 RSQRBRACKET declaration2 .)


state 198

    (26) declaration2 -> empty .

    SEMICOLON       reduce using rule 26 (declaration2 -> empty .)


state 199

    (74) power1 -> LSQRBRACKET . exp0 RSQRBRACKET
    (57) exp0 -> . term0 exp1
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (100) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    ID              shift and go to state 50
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    exp0                           shift and go to state 226
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47
    attr_access0                   shift and go to state 52

state 200

    (73) power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 . power2
    (76) power2 -> . POWER power0
    (77) power2 -> . SQRT power0
    (78) power2 -> . empty
    (141) empty -> .

    POWER           shift and go to state 75
    SQRT            shift and go to state 76
    MULTIPLY        reduce using rule 141 (empty -> .)
    DIVIDE          reduce using rule 141 (empty -> .)
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LTHAN           reduce using rule 141 (empty -> .)
    GTHAN           reduce using rule 141 (empty -> .)
    DIFFERENT       reduce using rule 141 (empty -> .)
    EQUIVALENT      reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    RSQRBRACKET     reduce using rule 141 (empty -> .)
    RPAREN          reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)

    power2                         shift and go to state 227
    empty                          shift and go to state 89

state 201

    (75) power1 -> empty .

    POWER           reduce using rule 75 (power1 -> empty .)
    SQRT            reduce using rule 75 (power1 -> empty .)
    MULTIPLY        reduce using rule 75 (power1 -> empty .)
    DIVIDE          reduce using rule 75 (power1 -> empty .)
    PLUS            reduce using rule 75 (power1 -> empty .)
    MINUS           reduce using rule 75 (power1 -> empty .)
    LTHAN           reduce using rule 75 (power1 -> empty .)
    GTHAN           reduce using rule 75 (power1 -> empty .)
    DIFFERENT       reduce using rule 75 (power1 -> empty .)
    EQUIVALENT      reduce using rule 75 (power1 -> empty .)
    SEMICOLON       reduce using rule 75 (power1 -> empty .)
    RSQRBRACKET     reduce using rule 75 (power1 -> empty .)
    RPAREN          reduce using rule 75 (power1 -> empty .)
    COMMA           reduce using rule 75 (power1 -> empty .)


state 202

    (86) function_call_params1 -> COMMA function_call_params0 .

    RPAREN          reduce using rule 86 (function_call_params1 -> COMMA function_call_params0 .)


state 203

    (29) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET . EQUALS expression0 SEMICOLON

    EQUALS          shift and go to state 228


state 204

    (28) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .

    CLASS           reduce using rule 28 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    DEF             reduce using rule 28 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    ID              reduce using rule 28 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    MAIN            reduce using rule 28 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    IF              reduce using rule 28 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    WRITE           reduce using rule 28 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    READ            reduce using rule 28 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    RETURN          reduce using rule 28 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    WHILE           reduce using rule 28 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    RBRACKET        reduce using rule 28 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)


state 205

    (136) object_assignment -> ID EQUALS NEW ID . LPAREN function_call_params0 RPAREN SEMICOLON

    LPAREN          shift and go to state 229


state 206

    (112) condition0 -> IF LPAREN expression0 RPAREN . block0 condition1 SEMICOLON
    (124) block0 -> . LBRACKET block1 RBRACKET

    LBRACKET        shift and go to state 231

    block0                         shift and go to state 230

state 207

    (115) writing0 -> WRITE LPAREN writing1 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 232


state 208

    (116) writing1 -> expression0 writing2 .

    RPAREN          reduce using rule 116 (writing1 -> expression0 writing2 .)


state 209

    (118) writing2 -> COMMA . writing1
    (116) writing1 -> . expression0 writing2
    (117) writing1 -> . CONST_STRING writing2
    (88) expression0 -> . exp0 expression1
    (89) expression0 -> . CONST_BOOL expression1
    (90) expression0 -> . attr_access0 expression1
    (57) exp0 -> . term0 exp1
    (100) attr_access0 -> . ID DOT ID
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call

    CONST_STRING    shift and go to state 181
    CONST_BOOL      shift and go to state 37
    ID              shift and go to state 34
    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    writing1                       shift and go to state 233
    expression0                    shift and go to state 180
    exp0                           shift and go to state 36
    attr_access0                   shift and go to state 38
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47

state 210

    (119) writing2 -> empty .

    RPAREN          reduce using rule 119 (writing2 -> empty .)


state 211

    (117) writing1 -> CONST_STRING writing2 .

    RPAREN          reduce using rule 117 (writing1 -> CONST_STRING writing2 .)


state 212

    (123) while -> WHILE LPAREN expression0 RPAREN . block0
    (124) block0 -> . LBRACKET block1 RBRACKET

    LBRACKET        shift and go to state 231

    block0                         shift and go to state 234

state 213

    (48) simple_assignment -> ID EQUALS expression0 . SEMICOLON

    SEMICOLON       shift and go to state 235


state 214

    (8) class0 -> CLASS ID class1 LBRACKET class2 constructor class3 . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 236


state 215

    (13) class3 -> methods .

    RBRACKET        reduce using rule 13 (class3 -> methods .)


state 216

    (14) class3 -> empty .
    (35) methods -> empty .

  ! reduce/reduce conflict for RBRACKET resolved using rule 14 (class3 -> empty .)
    RBRACKET        reduce using rule 14 (class3 -> empty .)

  ! RBRACKET        [ reduce using rule 35 (methods -> empty .) ]


state 217

    (34) methods -> data_access . function0 methods
    (15) function0 -> . DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0

    DEF             shift and go to state 14

    function0                      shift and go to state 237

state 218

    (30) constructor -> CONSTRUCT ID . LPAREN params0 RPAREN function_block0

    LPAREN          shift and go to state 238


state 219

    (31) attributes -> data_access simple_declaration attributes .

    CONSTRUCT       reduce using rule 31 (attributes -> data_access simple_declaration attributes .)


state 220

    (47) simple_declaration -> ID COLON . type SEMICOLON
    (43) type -> . INT
    (44) type -> . FLOAT
    (45) type -> . STRING
    (46) type -> . BOOL

    INT             shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33

    type                           shift and go to state 239

state 221

    (15) function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 . LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0

    LSQRBRACKET     shift and go to state 240


state 222

    (16) function1 -> type .

    LSQRBRACKET     reduce using rule 16 (function1 -> type .)


state 223

    (17) function1 -> VOID .

    LSQRBRACKET     reduce using rule 17 (function1 -> VOID .)


state 224

    (38) params1 -> COMMA params0 .

    RPAREN          reduce using rule 38 (params1 -> COMMA params0 .)


state 225

    (25) declaration2 -> LSQRBRACKET exp0 . RSQRBRACKET

    RSQRBRACKET     shift and go to state 241


state 226

    (74) power1 -> LSQRBRACKET exp0 . RSQRBRACKET

    RSQRBRACKET     shift and go to state 242


state 227

    (73) power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .

    MULTIPLY        reduce using rule 73 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    DIVIDE          reduce using rule 73 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    PLUS            reduce using rule 73 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    MINUS           reduce using rule 73 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    LTHAN           reduce using rule 73 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    GTHAN           reduce using rule 73 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    DIFFERENT       reduce using rule 73 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    EQUIVALENT      reduce using rule 73 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    SEMICOLON       reduce using rule 73 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    RSQRBRACKET     reduce using rule 73 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    RPAREN          reduce using rule 73 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    COMMA           reduce using rule 73 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)


state 228

    (29) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS . expression0 SEMICOLON
    (88) expression0 -> . exp0 expression1
    (89) expression0 -> . CONST_BOOL expression1
    (90) expression0 -> . attr_access0 expression1
    (57) exp0 -> . term0 exp1
    (100) attr_access0 -> . ID DOT ID
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 37
    ID              shift and go to state 34
    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    exp0                           shift and go to state 36
    expression0                    shift and go to state 243
    attr_access0                   shift and go to state 38
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47

state 229

    (136) object_assignment -> ID EQUALS NEW ID LPAREN . function_call_params0 RPAREN SEMICOLON
    (83) function_call_params0 -> . expression0 function_call_params1
    (84) function_call_params0 -> . CONST_STRING function_call_params1
    (85) function_call_params0 -> . empty function_call_params1
    (88) expression0 -> . exp0 expression1
    (89) expression0 -> . CONST_BOOL expression1
    (90) expression0 -> . attr_access0 expression1
    (141) empty -> .
    (57) exp0 -> . term0 exp1
    (100) attr_access0 -> . ID DOT ID
    (61) term0 -> . factor term1
    (65) factor -> . PLUS power0
    (66) factor -> . MINUS power0
    (67) factor -> . power0
    (68) power0 -> . LPAREN exp0 RPAREN power2
    (69) power0 -> . const_var power2
    (70) power0 -> . function_call power2
    (71) power0 -> . method_call0 power2
    (72) power0 -> . attr_access0 power2
    (73) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (79) const_var -> . CONST_INT
    (80) const_var -> . CONST_FLOAT
    (81) const_var -> . ID
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call

    CONST_STRING    shift and go to state 124
    CONST_BOOL      shift and go to state 37
    COMMA           reduce using rule 141 (empty -> .)
    RPAREN          reduce using rule 141 (empty -> .)
    ID              shift and go to state 34
    PLUS            shift and go to state 41
    MINUS           shift and go to state 43
    LPAREN          shift and go to state 44
    CONST_INT       shift and go to state 48
    CONST_FLOAT     shift and go to state 49

    function_call_params0          shift and go to state 244
    expression0                    shift and go to state 123
    empty                          shift and go to state 125
    exp0                           shift and go to state 36
    attr_access0                   shift and go to state 38
    term0                          shift and go to state 39
    factor                         shift and go to state 40
    power0                         shift and go to state 42
    const_var                      shift and go to state 45
    function_call                  shift and go to state 46
    method_call0                   shift and go to state 47

state 230

    (112) condition0 -> IF LPAREN expression0 RPAREN block0 . condition1 SEMICOLON
    (113) condition1 -> . ELSE block0
    (114) condition1 -> . empty
    (141) empty -> .

    ELSE            shift and go to state 246
    SEMICOLON       reduce using rule 141 (empty -> .)

    condition1                     shift and go to state 245
    empty                          shift and go to state 247

state 231

    (124) block0 -> LBRACKET . block1 RBRACKET
    (125) block1 -> . statement block1
    (126) block1 -> . empty
    (127) statement -> . assignment0
    (128) statement -> . object_assignment
    (129) statement -> . condition0
    (130) statement -> . writing0
    (131) statement -> . reading
    (132) statement -> . return
    (133) statement -> . function_call SEMICOLON
    (134) statement -> . method_call0 SEMICOLON
    (135) statement -> . while
    (141) empty -> .
    (27) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (28) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (29) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (136) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (112) condition0 -> . IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON
    (115) writing0 -> . WRITE LPAREN writing1 RPAREN SEMICOLON
    (120) reading -> . READ ID SEMICOLON
    (121) return -> . RETURN expression0 SEMICOLON
    (122) return -> . RETURN SEMICOLON
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (123) while -> . WHILE LPAREN expression0 RPAREN block0

    RBRACKET        reduce using rule 141 (empty -> .)
    ID              shift and go to state 251
    IF              shift and go to state 108
    WRITE           shift and go to state 109
    READ            shift and go to state 110
    RETURN          shift and go to state 111
    WHILE           shift and go to state 112

    block1                         shift and go to state 248
    statement                      shift and go to state 249
    empty                          shift and go to state 250
    assignment0                    shift and go to state 99
    object_assignment              shift and go to state 100
    condition0                     shift and go to state 101
    writing0                       shift and go to state 102
    reading                        shift and go to state 103
    return                         shift and go to state 104
    function_call                  shift and go to state 105
    method_call0                   shift and go to state 106
    while                          shift and go to state 107

state 232

    (115) writing0 -> WRITE LPAREN writing1 RPAREN SEMICOLON .

    ID              reduce using rule 115 (writing0 -> WRITE LPAREN writing1 RPAREN SEMICOLON .)
    IF              reduce using rule 115 (writing0 -> WRITE LPAREN writing1 RPAREN SEMICOLON .)
    WRITE           reduce using rule 115 (writing0 -> WRITE LPAREN writing1 RPAREN SEMICOLON .)
    READ            reduce using rule 115 (writing0 -> WRITE LPAREN writing1 RPAREN SEMICOLON .)
    RETURN          reduce using rule 115 (writing0 -> WRITE LPAREN writing1 RPAREN SEMICOLON .)
    WHILE           reduce using rule 115 (writing0 -> WRITE LPAREN writing1 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 115 (writing0 -> WRITE LPAREN writing1 RPAREN SEMICOLON .)


state 233

    (118) writing2 -> COMMA writing1 .

    RPAREN          reduce using rule 118 (writing2 -> COMMA writing1 .)


state 234

    (123) while -> WHILE LPAREN expression0 RPAREN block0 .

    ID              reduce using rule 123 (while -> WHILE LPAREN expression0 RPAREN block0 .)
    IF              reduce using rule 123 (while -> WHILE LPAREN expression0 RPAREN block0 .)
    WRITE           reduce using rule 123 (while -> WHILE LPAREN expression0 RPAREN block0 .)
    READ            reduce using rule 123 (while -> WHILE LPAREN expression0 RPAREN block0 .)
    RETURN          reduce using rule 123 (while -> WHILE LPAREN expression0 RPAREN block0 .)
    WHILE           reduce using rule 123 (while -> WHILE LPAREN expression0 RPAREN block0 .)
    RBRACKET        reduce using rule 123 (while -> WHILE LPAREN expression0 RPAREN block0 .)


state 235

    (48) simple_assignment -> ID EQUALS expression0 SEMICOLON .

    PRIVATE         reduce using rule 48 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    PUBLIC          reduce using rule 48 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    ID              reduce using rule 48 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    CONSTRUCT       reduce using rule 48 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    RSQRBRACKET     reduce using rule 48 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    IF              reduce using rule 48 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    WRITE           reduce using rule 48 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    READ            reduce using rule 48 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    RETURN          reduce using rule 48 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    WHILE           reduce using rule 48 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    RBRACKET        reduce using rule 48 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)


state 236

    (8) class0 -> CLASS ID class1 LBRACKET class2 constructor class3 RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 252


state 237

    (34) methods -> data_access function0 . methods
    (34) methods -> . data_access function0 methods
    (35) methods -> . empty
    (102) data_access -> . PRIVATE
    (103) data_access -> . PUBLIC
    (141) empty -> .

    PRIVATE         shift and go to state 161
    PUBLIC          shift and go to state 162
    RBRACKET        reduce using rule 141 (empty -> .)

    data_access                    shift and go to state 217
    methods                        shift and go to state 253
    empty                          shift and go to state 254

state 238

    (30) constructor -> CONSTRUCT ID LPAREN . params0 RPAREN function_block0
    (36) params0 -> . type ID params1
    (37) params0 -> . empty
    (43) type -> . INT
    (44) type -> . FLOAT
    (45) type -> . STRING
    (46) type -> . BOOL
    (141) empty -> .

    INT             shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    RPAREN          reduce using rule 141 (empty -> .)

    params0                        shift and go to state 255
    type                           shift and go to state 116
    empty                          shift and go to state 117

state 239

    (47) simple_declaration -> ID COLON type . SEMICOLON

    SEMICOLON       shift and go to state 256


state 240

    (15) function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET . LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0

    LSQRBRACKET     shift and go to state 257


state 241

    (25) declaration2 -> LSQRBRACKET exp0 RSQRBRACKET .

    SEMICOLON       reduce using rule 25 (declaration2 -> LSQRBRACKET exp0 RSQRBRACKET .)


state 242

    (74) power1 -> LSQRBRACKET exp0 RSQRBRACKET .

    POWER           reduce using rule 74 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    SQRT            reduce using rule 74 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    MULTIPLY        reduce using rule 74 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    DIVIDE          reduce using rule 74 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    PLUS            reduce using rule 74 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    MINUS           reduce using rule 74 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    LTHAN           reduce using rule 74 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    GTHAN           reduce using rule 74 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    DIFFERENT       reduce using rule 74 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    EQUIVALENT      reduce using rule 74 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    SEMICOLON       reduce using rule 74 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    RSQRBRACKET     reduce using rule 74 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    RPAREN          reduce using rule 74 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    COMMA           reduce using rule 74 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)


state 243

    (29) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 . SEMICOLON

    SEMICOLON       shift and go to state 258


state 244

    (136) object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 . RPAREN SEMICOLON

    RPAREN          shift and go to state 259


state 245

    (112) condition0 -> IF LPAREN expression0 RPAREN block0 condition1 . SEMICOLON

    SEMICOLON       shift and go to state 260


state 246

    (113) condition1 -> ELSE . block0
    (124) block0 -> . LBRACKET block1 RBRACKET

    LBRACKET        shift and go to state 231

    block0                         shift and go to state 261

state 247

    (114) condition1 -> empty .

    SEMICOLON       reduce using rule 114 (condition1 -> empty .)


state 248

    (124) block0 -> LBRACKET block1 . RBRACKET

    RBRACKET        shift and go to state 262


state 249

    (125) block1 -> statement . block1
    (125) block1 -> . statement block1
    (126) block1 -> . empty
    (127) statement -> . assignment0
    (128) statement -> . object_assignment
    (129) statement -> . condition0
    (130) statement -> . writing0
    (131) statement -> . reading
    (132) statement -> . return
    (133) statement -> . function_call SEMICOLON
    (134) statement -> . method_call0 SEMICOLON
    (135) statement -> . while
    (141) empty -> .
    (27) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (28) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (29) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (136) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (112) condition0 -> . IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON
    (115) writing0 -> . WRITE LPAREN writing1 RPAREN SEMICOLON
    (120) reading -> . READ ID SEMICOLON
    (121) return -> . RETURN expression0 SEMICOLON
    (122) return -> . RETURN SEMICOLON
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (123) while -> . WHILE LPAREN expression0 RPAREN block0

    RBRACKET        reduce using rule 141 (empty -> .)
    ID              shift and go to state 251
    IF              shift and go to state 108
    WRITE           shift and go to state 109
    READ            shift and go to state 110
    RETURN          shift and go to state 111
    WHILE           shift and go to state 112

    statement                      shift and go to state 249
    block1                         shift and go to state 263
    empty                          shift and go to state 250
    assignment0                    shift and go to state 99
    object_assignment              shift and go to state 100
    condition0                     shift and go to state 101
    writing0                       shift and go to state 102
    reading                        shift and go to state 103
    return                         shift and go to state 104
    function_call                  shift and go to state 105
    method_call0                   shift and go to state 106
    while                          shift and go to state 107

state 250

    (126) block1 -> empty .

    RBRACKET        reduce using rule 126 (block1 -> empty .)


state 251

    (27) assignment0 -> ID . EQUALS expression0 SEMICOLON
    (28) assignment0 -> ID . LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (29) assignment0 -> ID . LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (136) object_assignment -> ID . EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (82) function_call -> ID . LPAREN function_call_params0 RPAREN
    (101) method_call0 -> ID . DOT function_call

    EQUALS          shift and go to state 145
    LSQRBRACKET     shift and go to state 17
    LPAREN          shift and go to state 62
    DOT             shift and go to state 146


state 252

    (8) class0 -> CLASS ID class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON .

    CLASS           reduce using rule 8 (class0 -> CLASS ID class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON .)
    DEF             reduce using rule 8 (class0 -> CLASS ID class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON .)
    ID              reduce using rule 8 (class0 -> CLASS ID class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON .)
    MAIN            reduce using rule 8 (class0 -> CLASS ID class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON .)


state 253

    (34) methods -> data_access function0 methods .

    RBRACKET        reduce using rule 34 (methods -> data_access function0 methods .)


state 254

    (35) methods -> empty .

    RBRACKET        reduce using rule 35 (methods -> empty .)


state 255

    (30) constructor -> CONSTRUCT ID LPAREN params0 . RPAREN function_block0

    RPAREN          shift and go to state 264


state 256

    (47) simple_declaration -> ID COLON type SEMICOLON .

    PRIVATE         reduce using rule 47 (simple_declaration -> ID COLON type SEMICOLON .)
    PUBLIC          reduce using rule 47 (simple_declaration -> ID COLON type SEMICOLON .)
    ID              reduce using rule 47 (simple_declaration -> ID COLON type SEMICOLON .)
    CONSTRUCT       reduce using rule 47 (simple_declaration -> ID COLON type SEMICOLON .)
    RSQRBRACKET     reduce using rule 47 (simple_declaration -> ID COLON type SEMICOLON .)


state 257

    (15) function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET . function2 RSQRBRACKET RSQRBRACKET function_block0
    (18) function2 -> . simple_declaration function2
    (19) function2 -> . simple_assignment function2
    (20) function2 -> . empty
    (47) simple_declaration -> . ID COLON type SEMICOLON
    (48) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (141) empty -> .

    ID              shift and go to state 265
    RSQRBRACKET     reduce using rule 141 (empty -> .)

    function2                      shift and go to state 266
    simple_declaration             shift and go to state 267
    simple_assignment              shift and go to state 268
    empty                          shift and go to state 269

state 258

    (29) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .

    CLASS           reduce using rule 29 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    DEF             reduce using rule 29 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    ID              reduce using rule 29 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    MAIN            reduce using rule 29 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    IF              reduce using rule 29 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    WRITE           reduce using rule 29 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    READ            reduce using rule 29 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    RETURN          reduce using rule 29 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    WHILE           reduce using rule 29 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    RBRACKET        reduce using rule 29 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)


state 259

    (136) object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 270


state 260

    (112) condition0 -> IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON .

    ID              reduce using rule 112 (condition0 -> IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON .)
    IF              reduce using rule 112 (condition0 -> IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON .)
    WRITE           reduce using rule 112 (condition0 -> IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON .)
    READ            reduce using rule 112 (condition0 -> IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON .)
    RETURN          reduce using rule 112 (condition0 -> IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON .)
    WHILE           reduce using rule 112 (condition0 -> IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON .)
    RBRACKET        reduce using rule 112 (condition0 -> IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON .)


state 261

    (113) condition1 -> ELSE block0 .

    SEMICOLON       reduce using rule 113 (condition1 -> ELSE block0 .)


state 262

    (124) block0 -> LBRACKET block1 RBRACKET .

    ELSE            reduce using rule 124 (block0 -> LBRACKET block1 RBRACKET .)
    SEMICOLON       reduce using rule 124 (block0 -> LBRACKET block1 RBRACKET .)
    ID              reduce using rule 124 (block0 -> LBRACKET block1 RBRACKET .)
    IF              reduce using rule 124 (block0 -> LBRACKET block1 RBRACKET .)
    WRITE           reduce using rule 124 (block0 -> LBRACKET block1 RBRACKET .)
    READ            reduce using rule 124 (block0 -> LBRACKET block1 RBRACKET .)
    RETURN          reduce using rule 124 (block0 -> LBRACKET block1 RBRACKET .)
    WHILE           reduce using rule 124 (block0 -> LBRACKET block1 RBRACKET .)
    RBRACKET        reduce using rule 124 (block0 -> LBRACKET block1 RBRACKET .)


state 263

    (125) block1 -> statement block1 .

    RBRACKET        reduce using rule 125 (block1 -> statement block1 .)


state 264

    (30) constructor -> CONSTRUCT ID LPAREN params0 RPAREN . function_block0
    (40) function_block0 -> . LBRACKET function_block1 RBRACKET

    LBRACKET        shift and go to state 272

    function_block0                shift and go to state 271

state 265

    (47) simple_declaration -> ID . COLON type SEMICOLON
    (48) simple_assignment -> ID . EQUALS expression0 SEMICOLON

    COLON           shift and go to state 220
    EQUALS          shift and go to state 185


state 266

    (15) function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 . RSQRBRACKET RSQRBRACKET function_block0

    RSQRBRACKET     shift and go to state 273


state 267

    (18) function2 -> simple_declaration . function2
    (18) function2 -> . simple_declaration function2
    (19) function2 -> . simple_assignment function2
    (20) function2 -> . empty
    (47) simple_declaration -> . ID COLON type SEMICOLON
    (48) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (141) empty -> .

    ID              shift and go to state 265
    RSQRBRACKET     reduce using rule 141 (empty -> .)

    simple_declaration             shift and go to state 267
    function2                      shift and go to state 274
    simple_assignment              shift and go to state 268
    empty                          shift and go to state 269

state 268

    (19) function2 -> simple_assignment . function2
    (18) function2 -> . simple_declaration function2
    (19) function2 -> . simple_assignment function2
    (20) function2 -> . empty
    (47) simple_declaration -> . ID COLON type SEMICOLON
    (48) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (141) empty -> .

    ID              shift and go to state 265
    RSQRBRACKET     reduce using rule 141 (empty -> .)

    simple_assignment              shift and go to state 268
    function2                      shift and go to state 275
    simple_declaration             shift and go to state 267
    empty                          shift and go to state 269

state 269

    (20) function2 -> empty .

    RSQRBRACKET     reduce using rule 20 (function2 -> empty .)


state 270

    (136) object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .

    ID              reduce using rule 136 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    IF              reduce using rule 136 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    WRITE           reduce using rule 136 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    READ            reduce using rule 136 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    RETURN          reduce using rule 136 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    WHILE           reduce using rule 136 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 136 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)


state 271

    (30) constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0 .

    PRIVATE         reduce using rule 30 (constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0 .)
    PUBLIC          reduce using rule 30 (constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0 .)
    RBRACKET        reduce using rule 30 (constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0 .)


state 272

    (40) function_block0 -> LBRACKET . function_block1 RBRACKET
    (41) function_block1 -> . function_statement function_block1
    (42) function_block1 -> . empty
    (104) function_statement -> . simple_assignment
    (105) function_statement -> . condition0
    (106) function_statement -> . writing0
    (107) function_statement -> . reading
    (108) function_statement -> . return
    (109) function_statement -> . function_call SEMICOLON
    (110) function_statement -> . method_call0 SEMICOLON
    (111) function_statement -> . while
    (141) empty -> .
    (48) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (112) condition0 -> . IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON
    (115) writing0 -> . WRITE LPAREN writing1 RPAREN SEMICOLON
    (120) reading -> . READ ID SEMICOLON
    (121) return -> . RETURN expression0 SEMICOLON
    (122) return -> . RETURN SEMICOLON
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (123) while -> . WHILE LPAREN expression0 RPAREN block0

    RBRACKET        reduce using rule 141 (empty -> .)
    ID              shift and go to state 287
    IF              shift and go to state 108
    WRITE           shift and go to state 109
    READ            shift and go to state 110
    RETURN          shift and go to state 111
    WHILE           shift and go to state 112

    function_block1                shift and go to state 276
    function_statement             shift and go to state 277
    empty                          shift and go to state 278
    simple_assignment              shift and go to state 279
    condition0                     shift and go to state 280
    writing0                       shift and go to state 281
    reading                        shift and go to state 282
    return                         shift and go to state 283
    function_call                  shift and go to state 284
    method_call0                   shift and go to state 285
    while                          shift and go to state 286

state 273

    (15) function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET . RSQRBRACKET function_block0

    RSQRBRACKET     shift and go to state 288


state 274

    (18) function2 -> simple_declaration function2 .

    RSQRBRACKET     reduce using rule 18 (function2 -> simple_declaration function2 .)


state 275

    (19) function2 -> simple_assignment function2 .

    RSQRBRACKET     reduce using rule 19 (function2 -> simple_assignment function2 .)


state 276

    (40) function_block0 -> LBRACKET function_block1 . RBRACKET

    RBRACKET        shift and go to state 289


state 277

    (41) function_block1 -> function_statement . function_block1
    (41) function_block1 -> . function_statement function_block1
    (42) function_block1 -> . empty
    (104) function_statement -> . simple_assignment
    (105) function_statement -> . condition0
    (106) function_statement -> . writing0
    (107) function_statement -> . reading
    (108) function_statement -> . return
    (109) function_statement -> . function_call SEMICOLON
    (110) function_statement -> . method_call0 SEMICOLON
    (111) function_statement -> . while
    (141) empty -> .
    (48) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (112) condition0 -> . IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON
    (115) writing0 -> . WRITE LPAREN writing1 RPAREN SEMICOLON
    (120) reading -> . READ ID SEMICOLON
    (121) return -> . RETURN expression0 SEMICOLON
    (122) return -> . RETURN SEMICOLON
    (82) function_call -> . ID LPAREN function_call_params0 RPAREN
    (101) method_call0 -> . ID DOT function_call
    (123) while -> . WHILE LPAREN expression0 RPAREN block0

    RBRACKET        reduce using rule 141 (empty -> .)
    ID              shift and go to state 287
    IF              shift and go to state 108
    WRITE           shift and go to state 109
    READ            shift and go to state 110
    RETURN          shift and go to state 111
    WHILE           shift and go to state 112

    function_statement             shift and go to state 277
    function_block1                shift and go to state 290
    empty                          shift and go to state 278
    simple_assignment              shift and go to state 279
    condition0                     shift and go to state 280
    writing0                       shift and go to state 281
    reading                        shift and go to state 282
    return                         shift and go to state 283
    function_call                  shift and go to state 284
    method_call0                   shift and go to state 285
    while                          shift and go to state 286

state 278

    (42) function_block1 -> empty .

    RBRACKET        reduce using rule 42 (function_block1 -> empty .)


state 279

    (104) function_statement -> simple_assignment .

    ID              reduce using rule 104 (function_statement -> simple_assignment .)
    IF              reduce using rule 104 (function_statement -> simple_assignment .)
    WRITE           reduce using rule 104 (function_statement -> simple_assignment .)
    READ            reduce using rule 104 (function_statement -> simple_assignment .)
    RETURN          reduce using rule 104 (function_statement -> simple_assignment .)
    WHILE           reduce using rule 104 (function_statement -> simple_assignment .)
    RBRACKET        reduce using rule 104 (function_statement -> simple_assignment .)


state 280

    (105) function_statement -> condition0 .

    ID              reduce using rule 105 (function_statement -> condition0 .)
    IF              reduce using rule 105 (function_statement -> condition0 .)
    WRITE           reduce using rule 105 (function_statement -> condition0 .)
    READ            reduce using rule 105 (function_statement -> condition0 .)
    RETURN          reduce using rule 105 (function_statement -> condition0 .)
    WHILE           reduce using rule 105 (function_statement -> condition0 .)
    RBRACKET        reduce using rule 105 (function_statement -> condition0 .)


state 281

    (106) function_statement -> writing0 .

    ID              reduce using rule 106 (function_statement -> writing0 .)
    IF              reduce using rule 106 (function_statement -> writing0 .)
    WRITE           reduce using rule 106 (function_statement -> writing0 .)
    READ            reduce using rule 106 (function_statement -> writing0 .)
    RETURN          reduce using rule 106 (function_statement -> writing0 .)
    WHILE           reduce using rule 106 (function_statement -> writing0 .)
    RBRACKET        reduce using rule 106 (function_statement -> writing0 .)


state 282

    (107) function_statement -> reading .

    ID              reduce using rule 107 (function_statement -> reading .)
    IF              reduce using rule 107 (function_statement -> reading .)
    WRITE           reduce using rule 107 (function_statement -> reading .)
    READ            reduce using rule 107 (function_statement -> reading .)
    RETURN          reduce using rule 107 (function_statement -> reading .)
    WHILE           reduce using rule 107 (function_statement -> reading .)
    RBRACKET        reduce using rule 107 (function_statement -> reading .)


state 283

    (108) function_statement -> return .

    ID              reduce using rule 108 (function_statement -> return .)
    IF              reduce using rule 108 (function_statement -> return .)
    WRITE           reduce using rule 108 (function_statement -> return .)
    READ            reduce using rule 108 (function_statement -> return .)
    RETURN          reduce using rule 108 (function_statement -> return .)
    WHILE           reduce using rule 108 (function_statement -> return .)
    RBRACKET        reduce using rule 108 (function_statement -> return .)


state 284

    (109) function_statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 291


state 285

    (110) function_statement -> method_call0 . SEMICOLON

    SEMICOLON       shift and go to state 292


state 286

    (111) function_statement -> while .

    ID              reduce using rule 111 (function_statement -> while .)
    IF              reduce using rule 111 (function_statement -> while .)
    WRITE           reduce using rule 111 (function_statement -> while .)
    READ            reduce using rule 111 (function_statement -> while .)
    RETURN          reduce using rule 111 (function_statement -> while .)
    WHILE           reduce using rule 111 (function_statement -> while .)
    RBRACKET        reduce using rule 111 (function_statement -> while .)


state 287

    (48) simple_assignment -> ID . EQUALS expression0 SEMICOLON
    (82) function_call -> ID . LPAREN function_call_params0 RPAREN
    (101) method_call0 -> ID . DOT function_call

    EQUALS          shift and go to state 185
    LPAREN          shift and go to state 62
    DOT             shift and go to state 146


state 288

    (15) function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET . function_block0
    (40) function_block0 -> . LBRACKET function_block1 RBRACKET

    LBRACKET        shift and go to state 272

    function_block0                shift and go to state 293

state 289

    (40) function_block0 -> LBRACKET function_block1 RBRACKET .

    PRIVATE         reduce using rule 40 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    PUBLIC          reduce using rule 40 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    RBRACKET        reduce using rule 40 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    CLASS           reduce using rule 40 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    DEF             reduce using rule 40 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    ID              reduce using rule 40 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    MAIN            reduce using rule 40 (function_block0 -> LBRACKET function_block1 RBRACKET .)


state 290

    (41) function_block1 -> function_statement function_block1 .

    RBRACKET        reduce using rule 41 (function_block1 -> function_statement function_block1 .)


state 291

    (109) function_statement -> function_call SEMICOLON .

    ID              reduce using rule 109 (function_statement -> function_call SEMICOLON .)
    IF              reduce using rule 109 (function_statement -> function_call SEMICOLON .)
    WRITE           reduce using rule 109 (function_statement -> function_call SEMICOLON .)
    READ            reduce using rule 109 (function_statement -> function_call SEMICOLON .)
    RETURN          reduce using rule 109 (function_statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 109 (function_statement -> function_call SEMICOLON .)
    RBRACKET        reduce using rule 109 (function_statement -> function_call SEMICOLON .)


state 292

    (110) function_statement -> method_call0 SEMICOLON .

    ID              reduce using rule 110 (function_statement -> method_call0 SEMICOLON .)
    IF              reduce using rule 110 (function_statement -> method_call0 SEMICOLON .)
    WRITE           reduce using rule 110 (function_statement -> method_call0 SEMICOLON .)
    READ            reduce using rule 110 (function_statement -> method_call0 SEMICOLON .)
    RETURN          reduce using rule 110 (function_statement -> method_call0 SEMICOLON .)
    WHILE           reduce using rule 110 (function_statement -> method_call0 SEMICOLON .)
    RBRACKET        reduce using rule 110 (function_statement -> method_call0 SEMICOLON .)


state 293

    (15) function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0 .

    CLASS           reduce using rule 15 (function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0 .)
    DEF             reduce using rule 15 (function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0 .)
    ID              reduce using rule 15 (function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0 .)
    MAIN            reduce using rule 15 (function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0 .)
    PRIVATE         reduce using rule 15 (function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0 .)
    PUBLIC          reduce using rule 15 (function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0 .)
    RBRACKET        reduce using rule 15 (function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LTHAN in state 38 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 38 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 38 resolved as shift
WARNING: shift/reduce conflict for EQUIVALENT in state 38 resolved as shift
WARNING: reduce/reduce conflict in state 74 resolved using rule (power2 -> empty)
WARNING: rejected rule (expression1 -> empty) in state 74
WARNING: reduce/reduce conflict in state 129 resolved using rule (expression3 -> attr_access0)
WARNING: rejected rule (empty -> <empty>) in state 129
WARNING: reduce/reduce conflict in state 158 resolved using rule (class2 -> empty)
WARNING: rejected rule (attributes -> empty) in state 158
WARNING: reduce/reduce conflict in state 216 resolved using rule (class3 -> empty)
WARNING: rejected rule (methods -> empty) in state 216
