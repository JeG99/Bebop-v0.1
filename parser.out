Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BOOL
    CONST_BOOL
    NOT
    OR

Grammar

Rule 0     S' -> routine0
Rule 1     routine0 -> goto_main_neur ROUTINE ID SEMICOLON global_scope routine1 main0
Rule 2     goto_main_neur -> <empty>
Rule 3     routine1 -> statement routine1
Rule 4     routine1 -> class0 routine1
Rule 5     routine1 -> function0 routine1
Rule 6     routine1 -> declaration0 routine1
Rule 7     routine1 -> assignment0 routine1
Rule 8     routine1 -> empty
Rule 9     global_scope -> <empty>
Rule 10    class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global
Rule 11    revert_global -> <empty>
Rule 12    revert_scope -> <empty>
Rule 13    id_def -> ID
Rule 14    class_id_def -> ID
Rule 15    class1 -> COLON ID
Rule 16    class1 -> empty
Rule 17    class2 -> attributes
Rule 18    class2 -> empty
Rule 19    class3 -> methods
Rule 20    class3 -> empty
Rule 21    function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
Rule 22    endParamNeur -> <empty>
Rule 23    startFuncNeur -> <empty>
Rule 24    function1 -> type
Rule 25    function1 -> VOID
Rule 26    function2 -> simple_declaration function2
Rule 27    function2 -> simple_assignment function2
Rule 28    function2 -> empty
Rule 29    declaration0 -> decl_id_def COLON declaration1 SEMICOLON
Rule 30    decl_id_def -> ID
Rule 31    declaration1 -> type simpleMemoryNeur
Rule 32    declaration1 -> complex_type simpleMemoryNeur
Rule 33    declaration1 -> type isArrayNeur LSQRBRACKET exp0 limitNeur RSQRBRACKET declaration2 neurMemory
Rule 34    limitNeur -> <empty>
Rule 35    simpleMemoryNeur -> <empty>
Rule 36    isArrayNeur -> <empty>
Rule 37    neurMemory -> <empty>
Rule 38    declaration2 -> dim2Neur LSQRBRACKET exp0 limitNeur2 RSQRBRACKET
Rule 39    declaration2 -> empty
Rule 40    dim2Neur -> <empty>
Rule 41    limitNeur2 -> <empty>
Rule 42    assignment0 -> ID EQUALS expression0 SEMICOLON
Rule 43    assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON
Rule 44    assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON
Rule 45    arrAccdim2 -> <empty>
Rule 46    rsqrbracket_assign_2dim1 -> RSQRBRACKET
Rule 47    rsqrbracket_assign -> RSQRBRACKET
Rule 48    lsqrbracket_assign -> LSQRBRACKET
Rule 49    assign_id_def -> ID
Rule 50    arrAccNeur1 -> <empty>
Rule 51    constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0
Rule 52    attributes -> data_access simple_declaration attributes
Rule 53    attributes -> simple_assignment attributes
Rule 54    attributes -> empty
Rule 55    methods -> data_access function0 methods
Rule 56    methods -> empty
Rule 57    params0 -> type ID paramsNeur params1
Rule 58    params0 -> empty
Rule 59    paramsNeur -> <empty>
Rule 60    params1 -> COMMA params0
Rule 61    params1 -> empty
Rule 62    function_block0 -> LBRACKET function_block1 RBRACKET
Rule 63    function_block1 -> function_statement function_block1
Rule 64    function_block1 -> empty
Rule 65    type -> INT
Rule 66    type -> FLOAT
Rule 67    type -> STRING
Rule 68    simple_declaration -> decl_id_def COLON type simpleMemoryNeur SEMICOLON
Rule 69    simple_assignment -> ID EQUALS expression0 SEMICOLON
Rule 70    complex_type -> ID
Rule 71    exp0 -> term0 check_last_plus_minus_operator exp1
Rule 72    exp1 -> PLUS push_plus_minus_op exp0
Rule 73    exp1 -> MINUS push_plus_minus_op exp0
Rule 74    exp1 -> empty
Rule 75    push_plus_minus_op -> <empty>
Rule 76    check_last_plus_minus_operator -> <empty>
Rule 77    term0 -> power0 check_last_times_division_operator term1
Rule 78    term1 -> MULTIPLY push_times_division_op term0
Rule 79    term1 -> DIVIDE push_times_division_op term0
Rule 80    term1 -> empty
Rule 81    push_times_division_op -> <empty>
Rule 82    check_last_times_division_operator -> <empty>
Rule 83    power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
Rule 84    power0 -> const_var check_pow_rad_operator power2
Rule 85    power0 -> function_call check_pow_rad_operator power2
Rule 86    power0 -> method_call0 check_pow_rad_operator power2
Rule 87    power0 -> attr_access0 check_pow_rad_operator power2
Rule 88    power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
Rule 89    open_paren -> <empty>
Rule 90    close_paren -> <empty>
Rule 91    power1 -> LSQRBRACKET exp0 RSQRBRACKET
Rule 92    power1 -> empty
Rule 93    power2 -> POWER push_pow_rad_op power0
Rule 94    power2 -> SQRT push_pow_rad_op power0
Rule 95    power2 -> empty
Rule 96    push_pow_rad_op -> <empty>
Rule 97    check_pow_rad_operator -> <empty>
Rule 98    const_var -> CONST_INT neurInt
Rule 99    const_var -> CONST_FLOAT neurFloat
Rule 100   const_var -> ID neurID
Rule 101   neurID -> <empty>
Rule 102   neurInt -> <empty>
Rule 103   neurFloat -> <empty>
Rule 104   function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
Rule 105   neurFuncCall -> <empty>
Rule 106   id_funcCall -> ID
Rule 107   function_call_params0 -> expression0 neurFuncCallParams1 function_call_params1
Rule 108   function_call_params0 -> CONST_STRING neurFuncCallParams1 function_call_params1
Rule 109   function_call_params0 -> empty function_call_params1
Rule 110   neurFuncCallParams1 -> <empty>
Rule 111   function_call_params1 -> COMMA function_call_params0
Rule 112   function_call_params1 -> empty
Rule 113   expression0 -> exp0 expression1
Rule 114   expression0 -> attr_access0 expression1
Rule 115   expression1 -> LTHAN push_rel_op expression3
Rule 116   expression1 -> GTHAN push_rel_op expression3
Rule 117   expression1 -> DIFFERENT push_rel_op expression3
Rule 118   expression1 -> EQUIVALENT push_rel_op expression3
Rule 119   expression1 -> empty
Rule 120   push_rel_op -> <empty>
Rule 121   check_rel_operator -> <empty>
Rule 122   expression3 -> exp0 check_rel_operator
Rule 123   expression3 -> attr_access0
Rule 124   attr_access0 -> ID DOT ID
Rule 125   method_call0 -> ID DOT function_call
Rule 126   data_access -> PRIVATE
Rule 127   data_access -> PUBLIC
Rule 128   function_statement -> simple_assignment
Rule 129   function_statement -> condition0
Rule 130   function_statement -> writing0
Rule 131   function_statement -> reading
Rule 132   function_statement -> return
Rule 133   function_statement -> function_call SEMICOLON
Rule 134   function_statement -> method_call0 SEMICOLON
Rule 135   function_statement -> while
Rule 136   condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3
Rule 137   condNeur1 -> <empty>
Rule 138   condNeur3 -> <empty>
Rule 139   condition1 -> ELSE condNeur2 block0
Rule 140   condition1 -> empty
Rule 141   condNeur2 -> <empty>
Rule 142   writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
Rule 143   push_writing_op -> <empty>
Rule 144   push_string_val -> <empty>
Rule 145   writing1 -> expression0 push_writing_val writing2
Rule 146   writing1 -> CONST_STRING push_string_val push_writing_val writing2
Rule 147   push_writing_val -> <empty>
Rule 148   writing2 -> COMMA push_writing_op writing1
Rule 149   writing2 -> empty
Rule 150   reading -> READ ID SEMICOLON
Rule 151   return -> RETURN expression0 SEMICOLON
Rule 152   return -> RETURN SEMICOLON
Rule 153   while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
Rule 154   wNeur1 -> <empty>
Rule 155   wNeur2 -> <empty>
Rule 156   wNeur3 -> <empty>
Rule 157   block0 -> LBRACKET block1 RBRACKET
Rule 158   block1 -> statement block1
Rule 159   block1 -> empty
Rule 160   statement -> assignment0
Rule 161   statement -> object_assignment
Rule 162   statement -> condition0
Rule 163   statement -> writing0
Rule 164   statement -> reading
Rule 165   statement -> return
Rule 166   statement -> function_call SEMICOLON
Rule 167   statement -> method_call0 SEMICOLON
Rule 168   statement -> while
Rule 169   object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
Rule 170   main0 -> MAIN main_scope LBRACKET main1 RBRACKET
Rule 171   main1 -> declaration0 main1
Rule 172   main1 -> statement main1
Rule 173   main1 -> empty
Rule 174   main_scope -> <empty>
Rule 175   empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ARROW                : 21
BOOL                 : 
CLASS                : 10
COLON                : 15 29 68
COMMA                : 60 111 148
CONSTRUCT            : 51
CONST_BOOL           : 
CONST_FLOAT          : 99
CONST_INT            : 98
CONST_STRING         : 108 146
DEF                  : 21
DIFFERENT            : 117
DIVIDE               : 79
DOT                  : 124 125
ELSE                 : 139
EQUALS               : 42 43 44 69 169
EQUIVALENT           : 118
FLOAT                : 66
GTHAN                : 116
ID                   : 1 13 14 15 30 42 49 51 57 69 70 88 100 106 124 124 125 150 169 169
IF                   : 136
INT                  : 65
LBRACKET             : 10 62 157 170
LPAREN               : 21 51 83 104 136 142 153 169
LSQRBRACKET          : 21 21 33 38 44 48 88 91
LTHAN                : 115
MAIN                 : 170
MINUS                : 73
MULTIPLY             : 78
NEW                  : 169
NOT                  : 
OR                   : 
PLUS                 : 72
POWER                : 93
PRIVATE              : 126
PUBLIC               : 127
RBRACKET             : 10 62 157 170
READ                 : 150
RETURN               : 151 152
ROUTINE              : 1
RPAREN               : 21 51 83 104 136 142 153 169
RSQRBRACKET          : 21 21 33 38 44 46 47 88 91
SEMICOLON            : 1 10 29 42 43 44 68 69 133 134 142 150 151 152 166 167 169
SQRT                 : 94
STRING               : 67
VOID                 : 25
WHILE                : 153
WRITE                : 142
error                : 

Nonterminals, with rules where they appear

arrAccNeur1          : 
arrAccdim2           : 44
assign_id_def        : 43 44
assignment0          : 7 160
attr_access0         : 87 114 123
attributes           : 17 52 53
block0               : 136 139 153
block1               : 157 158
check_last_plus_minus_operator : 71
check_last_times_division_operator : 77
check_pow_rad_operator : 83 84 85 86 87 88
check_rel_operator   : 122
class0               : 4
class1               : 10
class2               : 10
class3               : 10
class_id_def         : 10
close_paren          : 83
complex_type         : 32
condNeur1            : 136
condNeur2            : 139
condNeur3            : 136
condition0           : 129 162
condition1           : 136
const_var            : 84
constructor          : 10
data_access          : 52 55
decl_id_def          : 29 68
declaration0         : 6 171
declaration1         : 29
declaration2         : 33
dim2Neur             : 38
empty                : 8 16 18 20 28 39 54 56 58 61 64 74 80 92 95 109 112 119 140 149 159 173
endParamNeur         : 21
exp0                 : 33 38 43 44 44 72 73 83 88 91 113 122
exp1                 : 71
expression0          : 42 43 44 69 107 136 145 151 153
expression1          : 113 114
expression3          : 115 116 117 118
function0            : 5 55
function1            : 21
function2            : 21 26 27
function_block0      : 21 51
function_block1      : 62 63
function_call        : 85 125 133 166
function_call_params0 : 104 111 169
function_call_params1 : 107 108 109
function_statement   : 63
global_scope         : 1
goto_main_neur       : 1
id_def               : 21
id_funcCall          : 104
isArrayNeur          : 33
limitNeur            : 33
limitNeur2           : 38
lsqrbracket_assign   : 43 44
main0                : 1
main1                : 170 171 172
main_scope           : 170
method_call0         : 86 134 167
methods              : 19 55
neurFloat            : 99
neurFuncCall         : 104
neurFuncCallParams1  : 107 108
neurID               : 100
neurInt              : 98
neurMemory           : 33
object_assignment    : 161
open_paren           : 83
params0              : 21 51 60
params1              : 57
paramsNeur           : 57
power0               : 77 93 94
power1               : 88
power2               : 83 84 85 86 87 88
push_plus_minus_op   : 72 73
push_pow_rad_op      : 93 94
push_rel_op          : 115 116 117 118
push_string_val      : 146
push_times_division_op : 78 79
push_writing_op      : 142 148
push_writing_val     : 145 146
reading              : 131 164
return               : 132 165
revert_global        : 10
revert_scope         : 21
routine0             : 0
routine1             : 1 3 4 5 6 7
rsqrbracket_assign   : 43
rsqrbracket_assign_2dim1 : 44
simpleMemoryNeur     : 31 32 68
simple_assignment    : 27 53 128
simple_declaration   : 26 52
startFuncNeur        : 21
statement            : 3 158 172
term0                : 71 78 79
term1                : 77
type                 : 24 31 33 57 68
wNeur1               : 153
wNeur2               : 153
wNeur3               : 153
while                : 135 168
writing0             : 130 163
writing1             : 142 148
writing2             : 145 146

Parsing method: LALR

state 0

    (0) S' -> . routine0
    (1) routine0 -> . goto_main_neur ROUTINE ID SEMICOLON global_scope routine1 main0
    (2) goto_main_neur -> .

    ROUTINE         reduce using rule 2 (goto_main_neur -> .)

    routine0                       shift and go to state 1
    goto_main_neur                 shift and go to state 2

state 1

    (0) S' -> routine0 .



state 2

    (1) routine0 -> goto_main_neur . ROUTINE ID SEMICOLON global_scope routine1 main0

    ROUTINE         shift and go to state 3


state 3

    (1) routine0 -> goto_main_neur ROUTINE . ID SEMICOLON global_scope routine1 main0

    ID              shift and go to state 4


state 4

    (1) routine0 -> goto_main_neur ROUTINE ID . SEMICOLON global_scope routine1 main0

    SEMICOLON       shift and go to state 5


state 5

    (1) routine0 -> goto_main_neur ROUTINE ID SEMICOLON . global_scope routine1 main0
    (9) global_scope -> .

    CLASS           reduce using rule 9 (global_scope -> .)
    DEF             reduce using rule 9 (global_scope -> .)
    ID              reduce using rule 9 (global_scope -> .)
    IF              reduce using rule 9 (global_scope -> .)
    WRITE           reduce using rule 9 (global_scope -> .)
    READ            reduce using rule 9 (global_scope -> .)
    RETURN          reduce using rule 9 (global_scope -> .)
    WHILE           reduce using rule 9 (global_scope -> .)
    MAIN            reduce using rule 9 (global_scope -> .)

    global_scope                   shift and go to state 6

state 6

    (1) routine0 -> goto_main_neur ROUTINE ID SEMICOLON global_scope . routine1 main0
    (3) routine1 -> . statement routine1
    (4) routine1 -> . class0 routine1
    (5) routine1 -> . function0 routine1
    (6) routine1 -> . declaration0 routine1
    (7) routine1 -> . assignment0 routine1
    (8) routine1 -> . empty
    (160) statement -> . assignment0
    (161) statement -> . object_assignment
    (162) statement -> . condition0
    (163) statement -> . writing0
    (164) statement -> . reading
    (165) statement -> . return
    (166) statement -> . function_call SEMICOLON
    (167) statement -> . method_call0 SEMICOLON
    (168) statement -> . while
    (10) class0 -> . CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global
    (21) function0 -> . DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (29) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON
    (175) empty -> .
    (169) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (136) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3
    (142) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (150) reading -> . READ ID SEMICOLON
    (151) return -> . RETURN expression0 SEMICOLON
    (152) return -> . RETURN SEMICOLON
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (153) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (30) decl_id_def -> . ID
    (49) assign_id_def -> . ID
    (106) id_funcCall -> . ID

    CLASS           shift and go to state 23
    DEF             shift and go to state 24
    ID              shift and go to state 7
    MAIN            reduce using rule 175 (empty -> .)
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    routine1                       shift and go to state 8
    statement                      shift and go to state 9
    class0                         shift and go to state 10
    function0                      shift and go to state 11
    declaration0                   shift and go to state 12
    assignment0                    shift and go to state 13
    empty                          shift and go to state 14
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    decl_id_def                    shift and go to state 25
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 7

    (42) assignment0 -> ID . EQUALS expression0 SEMICOLON
    (169) object_assignment -> ID . EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (125) method_call0 -> ID . DOT function_call
    (30) decl_id_def -> ID .
    (49) assign_id_def -> ID .
    (106) id_funcCall -> ID .

    EQUALS          shift and go to state 33
    DOT             shift and go to state 34
    COLON           reduce using rule 30 (decl_id_def -> ID .)
    LSQRBRACKET     reduce using rule 49 (assign_id_def -> ID .)
    LPAREN          reduce using rule 106 (id_funcCall -> ID .)


state 8

    (1) routine0 -> goto_main_neur ROUTINE ID SEMICOLON global_scope routine1 . main0
    (170) main0 -> . MAIN main_scope LBRACKET main1 RBRACKET

    MAIN            shift and go to state 36

    main0                          shift and go to state 35

state 9

    (3) routine1 -> statement . routine1
    (3) routine1 -> . statement routine1
    (4) routine1 -> . class0 routine1
    (5) routine1 -> . function0 routine1
    (6) routine1 -> . declaration0 routine1
    (7) routine1 -> . assignment0 routine1
    (8) routine1 -> . empty
    (160) statement -> . assignment0
    (161) statement -> . object_assignment
    (162) statement -> . condition0
    (163) statement -> . writing0
    (164) statement -> . reading
    (165) statement -> . return
    (166) statement -> . function_call SEMICOLON
    (167) statement -> . method_call0 SEMICOLON
    (168) statement -> . while
    (10) class0 -> . CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global
    (21) function0 -> . DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (29) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON
    (175) empty -> .
    (169) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (136) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3
    (142) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (150) reading -> . READ ID SEMICOLON
    (151) return -> . RETURN expression0 SEMICOLON
    (152) return -> . RETURN SEMICOLON
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (153) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (30) decl_id_def -> . ID
    (49) assign_id_def -> . ID
    (106) id_funcCall -> . ID

    CLASS           shift and go to state 23
    DEF             shift and go to state 24
    ID              shift and go to state 7
    MAIN            reduce using rule 175 (empty -> .)
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    statement                      shift and go to state 9
    routine1                       shift and go to state 37
    class0                         shift and go to state 10
    function0                      shift and go to state 11
    declaration0                   shift and go to state 12
    assignment0                    shift and go to state 13
    empty                          shift and go to state 14
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    decl_id_def                    shift and go to state 25
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 10

    (4) routine1 -> class0 . routine1
    (3) routine1 -> . statement routine1
    (4) routine1 -> . class0 routine1
    (5) routine1 -> . function0 routine1
    (6) routine1 -> . declaration0 routine1
    (7) routine1 -> . assignment0 routine1
    (8) routine1 -> . empty
    (160) statement -> . assignment0
    (161) statement -> . object_assignment
    (162) statement -> . condition0
    (163) statement -> . writing0
    (164) statement -> . reading
    (165) statement -> . return
    (166) statement -> . function_call SEMICOLON
    (167) statement -> . method_call0 SEMICOLON
    (168) statement -> . while
    (10) class0 -> . CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global
    (21) function0 -> . DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (29) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON
    (175) empty -> .
    (169) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (136) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3
    (142) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (150) reading -> . READ ID SEMICOLON
    (151) return -> . RETURN expression0 SEMICOLON
    (152) return -> . RETURN SEMICOLON
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (153) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (30) decl_id_def -> . ID
    (49) assign_id_def -> . ID
    (106) id_funcCall -> . ID

    CLASS           shift and go to state 23
    DEF             shift and go to state 24
    ID              shift and go to state 7
    MAIN            reduce using rule 175 (empty -> .)
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    class0                         shift and go to state 10
    routine1                       shift and go to state 38
    statement                      shift and go to state 9
    function0                      shift and go to state 11
    declaration0                   shift and go to state 12
    assignment0                    shift and go to state 13
    empty                          shift and go to state 14
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    decl_id_def                    shift and go to state 25
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 11

    (5) routine1 -> function0 . routine1
    (3) routine1 -> . statement routine1
    (4) routine1 -> . class0 routine1
    (5) routine1 -> . function0 routine1
    (6) routine1 -> . declaration0 routine1
    (7) routine1 -> . assignment0 routine1
    (8) routine1 -> . empty
    (160) statement -> . assignment0
    (161) statement -> . object_assignment
    (162) statement -> . condition0
    (163) statement -> . writing0
    (164) statement -> . reading
    (165) statement -> . return
    (166) statement -> . function_call SEMICOLON
    (167) statement -> . method_call0 SEMICOLON
    (168) statement -> . while
    (10) class0 -> . CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global
    (21) function0 -> . DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (29) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON
    (175) empty -> .
    (169) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (136) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3
    (142) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (150) reading -> . READ ID SEMICOLON
    (151) return -> . RETURN expression0 SEMICOLON
    (152) return -> . RETURN SEMICOLON
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (153) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (30) decl_id_def -> . ID
    (49) assign_id_def -> . ID
    (106) id_funcCall -> . ID

    CLASS           shift and go to state 23
    DEF             shift and go to state 24
    ID              shift and go to state 7
    MAIN            reduce using rule 175 (empty -> .)
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    function0                      shift and go to state 11
    routine1                       shift and go to state 39
    statement                      shift and go to state 9
    class0                         shift and go to state 10
    declaration0                   shift and go to state 12
    assignment0                    shift and go to state 13
    empty                          shift and go to state 14
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    decl_id_def                    shift and go to state 25
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 12

    (6) routine1 -> declaration0 . routine1
    (3) routine1 -> . statement routine1
    (4) routine1 -> . class0 routine1
    (5) routine1 -> . function0 routine1
    (6) routine1 -> . declaration0 routine1
    (7) routine1 -> . assignment0 routine1
    (8) routine1 -> . empty
    (160) statement -> . assignment0
    (161) statement -> . object_assignment
    (162) statement -> . condition0
    (163) statement -> . writing0
    (164) statement -> . reading
    (165) statement -> . return
    (166) statement -> . function_call SEMICOLON
    (167) statement -> . method_call0 SEMICOLON
    (168) statement -> . while
    (10) class0 -> . CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global
    (21) function0 -> . DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (29) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON
    (175) empty -> .
    (169) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (136) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3
    (142) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (150) reading -> . READ ID SEMICOLON
    (151) return -> . RETURN expression0 SEMICOLON
    (152) return -> . RETURN SEMICOLON
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (153) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (30) decl_id_def -> . ID
    (49) assign_id_def -> . ID
    (106) id_funcCall -> . ID

    CLASS           shift and go to state 23
    DEF             shift and go to state 24
    ID              shift and go to state 7
    MAIN            reduce using rule 175 (empty -> .)
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    declaration0                   shift and go to state 12
    routine1                       shift and go to state 40
    statement                      shift and go to state 9
    class0                         shift and go to state 10
    function0                      shift and go to state 11
    assignment0                    shift and go to state 13
    empty                          shift and go to state 14
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    decl_id_def                    shift and go to state 25
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 13

    (7) routine1 -> assignment0 . routine1
    (160) statement -> assignment0 .
    (3) routine1 -> . statement routine1
    (4) routine1 -> . class0 routine1
    (5) routine1 -> . function0 routine1
    (6) routine1 -> . declaration0 routine1
    (7) routine1 -> . assignment0 routine1
    (8) routine1 -> . empty
    (160) statement -> . assignment0
    (161) statement -> . object_assignment
    (162) statement -> . condition0
    (163) statement -> . writing0
    (164) statement -> . reading
    (165) statement -> . return
    (166) statement -> . function_call SEMICOLON
    (167) statement -> . method_call0 SEMICOLON
    (168) statement -> . while
    (10) class0 -> . CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global
    (21) function0 -> . DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (29) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON
    (175) empty -> .
    (169) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (136) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3
    (142) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (150) reading -> . READ ID SEMICOLON
    (151) return -> . RETURN expression0 SEMICOLON
    (152) return -> . RETURN SEMICOLON
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (153) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (30) decl_id_def -> . ID
    (49) assign_id_def -> . ID
    (106) id_funcCall -> . ID

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for MAIN resolved using rule 160 (statement -> assignment0 .)
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    MAIN            reduce using rule 160 (statement -> assignment0 .)
    CLASS           shift and go to state 23
    DEF             shift and go to state 24
    ID              shift and go to state 7
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

  ! CLASS           [ reduce using rule 160 (statement -> assignment0 .) ]
  ! DEF             [ reduce using rule 160 (statement -> assignment0 .) ]
  ! ID              [ reduce using rule 160 (statement -> assignment0 .) ]
  ! IF              [ reduce using rule 160 (statement -> assignment0 .) ]
  ! WRITE           [ reduce using rule 160 (statement -> assignment0 .) ]
  ! READ            [ reduce using rule 160 (statement -> assignment0 .) ]
  ! RETURN          [ reduce using rule 160 (statement -> assignment0 .) ]
  ! WHILE           [ reduce using rule 160 (statement -> assignment0 .) ]
  ! MAIN            [ reduce using rule 175 (empty -> .) ]

    assignment0                    shift and go to state 13
    routine1                       shift and go to state 41
    statement                      shift and go to state 9
    class0                         shift and go to state 10
    function0                      shift and go to state 11
    declaration0                   shift and go to state 12
    empty                          shift and go to state 14
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    decl_id_def                    shift and go to state 25
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 14

    (8) routine1 -> empty .

    MAIN            reduce using rule 8 (routine1 -> empty .)


state 15

    (161) statement -> object_assignment .

    CLASS           reduce using rule 161 (statement -> object_assignment .)
    DEF             reduce using rule 161 (statement -> object_assignment .)
    ID              reduce using rule 161 (statement -> object_assignment .)
    IF              reduce using rule 161 (statement -> object_assignment .)
    WRITE           reduce using rule 161 (statement -> object_assignment .)
    READ            reduce using rule 161 (statement -> object_assignment .)
    RETURN          reduce using rule 161 (statement -> object_assignment .)
    WHILE           reduce using rule 161 (statement -> object_assignment .)
    MAIN            reduce using rule 161 (statement -> object_assignment .)
    RBRACKET        reduce using rule 161 (statement -> object_assignment .)


state 16

    (162) statement -> condition0 .

    CLASS           reduce using rule 162 (statement -> condition0 .)
    DEF             reduce using rule 162 (statement -> condition0 .)
    ID              reduce using rule 162 (statement -> condition0 .)
    IF              reduce using rule 162 (statement -> condition0 .)
    WRITE           reduce using rule 162 (statement -> condition0 .)
    READ            reduce using rule 162 (statement -> condition0 .)
    RETURN          reduce using rule 162 (statement -> condition0 .)
    WHILE           reduce using rule 162 (statement -> condition0 .)
    MAIN            reduce using rule 162 (statement -> condition0 .)
    RBRACKET        reduce using rule 162 (statement -> condition0 .)


state 17

    (163) statement -> writing0 .

    CLASS           reduce using rule 163 (statement -> writing0 .)
    DEF             reduce using rule 163 (statement -> writing0 .)
    ID              reduce using rule 163 (statement -> writing0 .)
    IF              reduce using rule 163 (statement -> writing0 .)
    WRITE           reduce using rule 163 (statement -> writing0 .)
    READ            reduce using rule 163 (statement -> writing0 .)
    RETURN          reduce using rule 163 (statement -> writing0 .)
    WHILE           reduce using rule 163 (statement -> writing0 .)
    MAIN            reduce using rule 163 (statement -> writing0 .)
    RBRACKET        reduce using rule 163 (statement -> writing0 .)


state 18

    (164) statement -> reading .

    CLASS           reduce using rule 164 (statement -> reading .)
    DEF             reduce using rule 164 (statement -> reading .)
    ID              reduce using rule 164 (statement -> reading .)
    IF              reduce using rule 164 (statement -> reading .)
    WRITE           reduce using rule 164 (statement -> reading .)
    READ            reduce using rule 164 (statement -> reading .)
    RETURN          reduce using rule 164 (statement -> reading .)
    WHILE           reduce using rule 164 (statement -> reading .)
    MAIN            reduce using rule 164 (statement -> reading .)
    RBRACKET        reduce using rule 164 (statement -> reading .)


state 19

    (165) statement -> return .

    CLASS           reduce using rule 165 (statement -> return .)
    DEF             reduce using rule 165 (statement -> return .)
    ID              reduce using rule 165 (statement -> return .)
    IF              reduce using rule 165 (statement -> return .)
    WRITE           reduce using rule 165 (statement -> return .)
    READ            reduce using rule 165 (statement -> return .)
    RETURN          reduce using rule 165 (statement -> return .)
    WHILE           reduce using rule 165 (statement -> return .)
    MAIN            reduce using rule 165 (statement -> return .)
    RBRACKET        reduce using rule 165 (statement -> return .)


state 20

    (166) statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 42


state 21

    (167) statement -> method_call0 . SEMICOLON

    SEMICOLON       shift and go to state 43


state 22

    (168) statement -> while .

    CLASS           reduce using rule 168 (statement -> while .)
    DEF             reduce using rule 168 (statement -> while .)
    ID              reduce using rule 168 (statement -> while .)
    IF              reduce using rule 168 (statement -> while .)
    WRITE           reduce using rule 168 (statement -> while .)
    READ            reduce using rule 168 (statement -> while .)
    RETURN          reduce using rule 168 (statement -> while .)
    WHILE           reduce using rule 168 (statement -> while .)
    MAIN            reduce using rule 168 (statement -> while .)
    RBRACKET        reduce using rule 168 (statement -> while .)


state 23

    (10) class0 -> CLASS . class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global
    (14) class_id_def -> . ID

    ID              shift and go to state 45

    class_id_def                   shift and go to state 44

state 24

    (21) function0 -> DEF . id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (13) id_def -> . ID

    ID              shift and go to state 47

    id_def                         shift and go to state 46

state 25

    (29) declaration0 -> decl_id_def . COLON declaration1 SEMICOLON

    COLON           shift and go to state 48


state 26

    (43) assignment0 -> assign_id_def . lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON
    (44) assignment0 -> assign_id_def . lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON
    (48) lsqrbracket_assign -> . LSQRBRACKET

    LSQRBRACKET     shift and go to state 50

    lsqrbracket_assign             shift and go to state 49

state 27

    (136) condition0 -> IF . LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3

    LPAREN          shift and go to state 51


state 28

    (142) writing0 -> WRITE . push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (143) push_writing_op -> .

    LPAREN          reduce using rule 143 (push_writing_op -> .)

    push_writing_op                shift and go to state 52

state 29

    (150) reading -> READ . ID SEMICOLON

    ID              shift and go to state 53


state 30

    (151) return -> RETURN . expression0 SEMICOLON
    (152) return -> RETURN . SEMICOLON
    (113) expression0 -> . exp0 expression1
    (114) expression0 -> . attr_access0 expression1
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (124) attr_access0 -> . ID DOT ID
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (106) id_funcCall -> . ID

    SEMICOLON       shift and go to state 55
    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    expression0                    shift and go to state 54
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 31

    (104) function_call -> id_funcCall . LPAREN neurFuncCall function_call_params0 RPAREN

    LPAREN          shift and go to state 67


state 32

    (153) while -> WHILE . wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (154) wNeur1 -> .

    LPAREN          reduce using rule 154 (wNeur1 -> .)

    wNeur1                         shift and go to state 68

state 33

    (42) assignment0 -> ID EQUALS . expression0 SEMICOLON
    (169) object_assignment -> ID EQUALS . NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (113) expression0 -> . exp0 expression1
    (114) expression0 -> . attr_access0 expression1
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (124) attr_access0 -> . ID DOT ID
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (106) id_funcCall -> . ID

    NEW             shift and go to state 70
    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    expression0                    shift and go to state 69
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 34

    (125) method_call0 -> ID DOT . function_call
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (106) id_funcCall -> . ID

    ID              shift and go to state 71

    function_call                  shift and go to state 72
    id_funcCall                    shift and go to state 31

state 35

    (1) routine0 -> goto_main_neur ROUTINE ID SEMICOLON global_scope routine1 main0 .

    $end            reduce using rule 1 (routine0 -> goto_main_neur ROUTINE ID SEMICOLON global_scope routine1 main0 .)


state 36

    (170) main0 -> MAIN . main_scope LBRACKET main1 RBRACKET
    (174) main_scope -> .

    LBRACKET        reduce using rule 174 (main_scope -> .)

    main_scope                     shift and go to state 73

state 37

    (3) routine1 -> statement routine1 .

    MAIN            reduce using rule 3 (routine1 -> statement routine1 .)


state 38

    (4) routine1 -> class0 routine1 .

    MAIN            reduce using rule 4 (routine1 -> class0 routine1 .)


state 39

    (5) routine1 -> function0 routine1 .

    MAIN            reduce using rule 5 (routine1 -> function0 routine1 .)


state 40

    (6) routine1 -> declaration0 routine1 .

    MAIN            reduce using rule 6 (routine1 -> declaration0 routine1 .)


state 41

    (7) routine1 -> assignment0 routine1 .

    MAIN            reduce using rule 7 (routine1 -> assignment0 routine1 .)


state 42

    (166) statement -> function_call SEMICOLON .

    CLASS           reduce using rule 166 (statement -> function_call SEMICOLON .)
    DEF             reduce using rule 166 (statement -> function_call SEMICOLON .)
    ID              reduce using rule 166 (statement -> function_call SEMICOLON .)
    IF              reduce using rule 166 (statement -> function_call SEMICOLON .)
    WRITE           reduce using rule 166 (statement -> function_call SEMICOLON .)
    READ            reduce using rule 166 (statement -> function_call SEMICOLON .)
    RETURN          reduce using rule 166 (statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 166 (statement -> function_call SEMICOLON .)
    MAIN            reduce using rule 166 (statement -> function_call SEMICOLON .)
    RBRACKET        reduce using rule 166 (statement -> function_call SEMICOLON .)


state 43

    (167) statement -> method_call0 SEMICOLON .

    CLASS           reduce using rule 167 (statement -> method_call0 SEMICOLON .)
    DEF             reduce using rule 167 (statement -> method_call0 SEMICOLON .)
    ID              reduce using rule 167 (statement -> method_call0 SEMICOLON .)
    IF              reduce using rule 167 (statement -> method_call0 SEMICOLON .)
    WRITE           reduce using rule 167 (statement -> method_call0 SEMICOLON .)
    READ            reduce using rule 167 (statement -> method_call0 SEMICOLON .)
    RETURN          reduce using rule 167 (statement -> method_call0 SEMICOLON .)
    WHILE           reduce using rule 167 (statement -> method_call0 SEMICOLON .)
    MAIN            reduce using rule 167 (statement -> method_call0 SEMICOLON .)
    RBRACKET        reduce using rule 167 (statement -> method_call0 SEMICOLON .)


state 44

    (10) class0 -> CLASS class_id_def . class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global
    (15) class1 -> . COLON ID
    (16) class1 -> . empty
    (175) empty -> .

    COLON           shift and go to state 75
    LBRACKET        reduce using rule 175 (empty -> .)

    class1                         shift and go to state 74
    empty                          shift and go to state 76

state 45

    (14) class_id_def -> ID .

    COLON           reduce using rule 14 (class_id_def -> ID .)
    LBRACKET        reduce using rule 14 (class_id_def -> ID .)


state 46

    (21) function0 -> DEF id_def . LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope

    LPAREN          shift and go to state 77


state 47

    (13) id_def -> ID .

    LPAREN          reduce using rule 13 (id_def -> ID .)


state 48

    (29) declaration0 -> decl_id_def COLON . declaration1 SEMICOLON
    (31) declaration1 -> . type simpleMemoryNeur
    (32) declaration1 -> . complex_type simpleMemoryNeur
    (33) declaration1 -> . type isArrayNeur LSQRBRACKET exp0 limitNeur RSQRBRACKET declaration2 neurMemory
    (65) type -> . INT
    (66) type -> . FLOAT
    (67) type -> . STRING
    (70) complex_type -> . ID

    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    STRING          shift and go to state 83
    ID              shift and go to state 84

    declaration1                   shift and go to state 78
    type                           shift and go to state 79
    complex_type                   shift and go to state 80

state 49

    (43) assignment0 -> assign_id_def lsqrbracket_assign . exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON
    (44) assignment0 -> assign_id_def lsqrbracket_assign . exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (124) attr_access0 -> . ID DOT ID
    (106) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 87
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 85
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 86
    id_funcCall                    shift and go to state 31

state 50

    (48) lsqrbracket_assign -> LSQRBRACKET .

    LPAREN          reduce using rule 48 (lsqrbracket_assign -> LSQRBRACKET .)
    ID              reduce using rule 48 (lsqrbracket_assign -> LSQRBRACKET .)
    CONST_INT       reduce using rule 48 (lsqrbracket_assign -> LSQRBRACKET .)
    CONST_FLOAT     reduce using rule 48 (lsqrbracket_assign -> LSQRBRACKET .)


state 51

    (136) condition0 -> IF LPAREN . expression0 condNeur1 RPAREN block0 condition1 condNeur3
    (113) expression0 -> . exp0 expression1
    (114) expression0 -> . attr_access0 expression1
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (124) attr_access0 -> . ID DOT ID
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (106) id_funcCall -> . ID

    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    expression0                    shift and go to state 88
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 52

    (142) writing0 -> WRITE push_writing_op . LPAREN writing1 RPAREN SEMICOLON

    LPAREN          shift and go to state 89


state 53

    (150) reading -> READ ID . SEMICOLON

    SEMICOLON       shift and go to state 90


state 54

    (151) return -> RETURN expression0 . SEMICOLON

    SEMICOLON       shift and go to state 91


state 55

    (152) return -> RETURN SEMICOLON .

    CLASS           reduce using rule 152 (return -> RETURN SEMICOLON .)
    DEF             reduce using rule 152 (return -> RETURN SEMICOLON .)
    ID              reduce using rule 152 (return -> RETURN SEMICOLON .)
    IF              reduce using rule 152 (return -> RETURN SEMICOLON .)
    WRITE           reduce using rule 152 (return -> RETURN SEMICOLON .)
    READ            reduce using rule 152 (return -> RETURN SEMICOLON .)
    RETURN          reduce using rule 152 (return -> RETURN SEMICOLON .)
    WHILE           reduce using rule 152 (return -> RETURN SEMICOLON .)
    MAIN            reduce using rule 152 (return -> RETURN SEMICOLON .)
    RBRACKET        reduce using rule 152 (return -> RETURN SEMICOLON .)


state 56

    (113) expression0 -> exp0 . expression1
    (115) expression1 -> . LTHAN push_rel_op expression3
    (116) expression1 -> . GTHAN push_rel_op expression3
    (117) expression1 -> . DIFFERENT push_rel_op expression3
    (118) expression1 -> . EQUIVALENT push_rel_op expression3
    (119) expression1 -> . empty
    (175) empty -> .

    LTHAN           shift and go to state 93
    GTHAN           shift and go to state 94
    DIFFERENT       shift and go to state 95
    EQUIVALENT      shift and go to state 96
    SEMICOLON       reduce using rule 175 (empty -> .)
    RPAREN          reduce using rule 175 (empty -> .)
    COMMA           reduce using rule 175 (empty -> .)

    expression1                    shift and go to state 92
    empty                          shift and go to state 97

state 57

    (114) expression0 -> attr_access0 . expression1
    (87) power0 -> attr_access0 . check_pow_rad_operator power2
    (115) expression1 -> . LTHAN push_rel_op expression3
    (116) expression1 -> . GTHAN push_rel_op expression3
    (117) expression1 -> . DIFFERENT push_rel_op expression3
    (118) expression1 -> . EQUIVALENT push_rel_op expression3
    (119) expression1 -> . empty
    (97) check_pow_rad_operator -> .
    (175) empty -> .

  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for EQUIVALENT resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 97 (check_pow_rad_operator -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 97 (check_pow_rad_operator -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 97 (check_pow_rad_operator -> .)
    LTHAN           shift and go to state 93
    GTHAN           shift and go to state 94
    DIFFERENT       shift and go to state 95
    EQUIVALENT      shift and go to state 96
    POWER           reduce using rule 97 (check_pow_rad_operator -> .)
    SQRT            reduce using rule 97 (check_pow_rad_operator -> .)
    MULTIPLY        reduce using rule 97 (check_pow_rad_operator -> .)
    DIVIDE          reduce using rule 97 (check_pow_rad_operator -> .)
    PLUS            reduce using rule 97 (check_pow_rad_operator -> .)
    MINUS           reduce using rule 97 (check_pow_rad_operator -> .)
    SEMICOLON       reduce using rule 97 (check_pow_rad_operator -> .)
    RPAREN          reduce using rule 97 (check_pow_rad_operator -> .)
    COMMA           reduce using rule 97 (check_pow_rad_operator -> .)

  ! LTHAN           [ reduce using rule 97 (check_pow_rad_operator -> .) ]
  ! GTHAN           [ reduce using rule 97 (check_pow_rad_operator -> .) ]
  ! DIFFERENT       [ reduce using rule 97 (check_pow_rad_operator -> .) ]
  ! EQUIVALENT      [ reduce using rule 97 (check_pow_rad_operator -> .) ]
  ! SEMICOLON       [ reduce using rule 175 (empty -> .) ]
  ! RPAREN          [ reduce using rule 175 (empty -> .) ]
  ! COMMA           [ reduce using rule 175 (empty -> .) ]

    expression1                    shift and go to state 98
    check_pow_rad_operator         shift and go to state 99
    empty                          shift and go to state 97

state 58

    (71) exp0 -> term0 . check_last_plus_minus_operator exp1
    (76) check_last_plus_minus_operator -> .

    PLUS            reduce using rule 76 (check_last_plus_minus_operator -> .)
    MINUS           reduce using rule 76 (check_last_plus_minus_operator -> .)
    LTHAN           reduce using rule 76 (check_last_plus_minus_operator -> .)
    GTHAN           reduce using rule 76 (check_last_plus_minus_operator -> .)
    DIFFERENT       reduce using rule 76 (check_last_plus_minus_operator -> .)
    EQUIVALENT      reduce using rule 76 (check_last_plus_minus_operator -> .)
    SEMICOLON       reduce using rule 76 (check_last_plus_minus_operator -> .)
    RSQRBRACKET     reduce using rule 76 (check_last_plus_minus_operator -> .)
    RPAREN          reduce using rule 76 (check_last_plus_minus_operator -> .)
    COMMA           reduce using rule 76 (check_last_plus_minus_operator -> .)

    check_last_plus_minus_operator shift and go to state 100

state 59

    (124) attr_access0 -> ID . DOT ID
    (88) power0 -> ID . LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (100) const_var -> ID . neurID
    (125) method_call0 -> ID . DOT function_call
    (106) id_funcCall -> ID .
    (101) neurID -> .

    DOT             shift and go to state 101
    LSQRBRACKET     shift and go to state 102
    LPAREN          reduce using rule 106 (id_funcCall -> ID .)
    POWER           reduce using rule 101 (neurID -> .)
    SQRT            reduce using rule 101 (neurID -> .)
    MULTIPLY        reduce using rule 101 (neurID -> .)
    DIVIDE          reduce using rule 101 (neurID -> .)
    PLUS            reduce using rule 101 (neurID -> .)
    MINUS           reduce using rule 101 (neurID -> .)
    LTHAN           reduce using rule 101 (neurID -> .)
    GTHAN           reduce using rule 101 (neurID -> .)
    DIFFERENT       reduce using rule 101 (neurID -> .)
    EQUIVALENT      reduce using rule 101 (neurID -> .)
    SEMICOLON       reduce using rule 101 (neurID -> .)
    RPAREN          reduce using rule 101 (neurID -> .)
    COMMA           reduce using rule 101 (neurID -> .)

    neurID                         shift and go to state 103

state 60

    (77) term0 -> power0 . check_last_times_division_operator term1
    (82) check_last_times_division_operator -> .

    MULTIPLY        reduce using rule 82 (check_last_times_division_operator -> .)
    DIVIDE          reduce using rule 82 (check_last_times_division_operator -> .)
    PLUS            reduce using rule 82 (check_last_times_division_operator -> .)
    MINUS           reduce using rule 82 (check_last_times_division_operator -> .)
    LTHAN           reduce using rule 82 (check_last_times_division_operator -> .)
    GTHAN           reduce using rule 82 (check_last_times_division_operator -> .)
    DIFFERENT       reduce using rule 82 (check_last_times_division_operator -> .)
    EQUIVALENT      reduce using rule 82 (check_last_times_division_operator -> .)
    SEMICOLON       reduce using rule 82 (check_last_times_division_operator -> .)
    RSQRBRACKET     reduce using rule 82 (check_last_times_division_operator -> .)
    RPAREN          reduce using rule 82 (check_last_times_division_operator -> .)
    COMMA           reduce using rule 82 (check_last_times_division_operator -> .)

    check_last_times_division_operator shift and go to state 104

state 61

    (83) power0 -> LPAREN . open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (89) open_paren -> .

    LPAREN          reduce using rule 89 (open_paren -> .)
    ID              reduce using rule 89 (open_paren -> .)
    CONST_INT       reduce using rule 89 (open_paren -> .)
    CONST_FLOAT     reduce using rule 89 (open_paren -> .)

    open_paren                     shift and go to state 105

state 62

    (84) power0 -> const_var . check_pow_rad_operator power2
    (97) check_pow_rad_operator -> .

    POWER           reduce using rule 97 (check_pow_rad_operator -> .)
    SQRT            reduce using rule 97 (check_pow_rad_operator -> .)
    MULTIPLY        reduce using rule 97 (check_pow_rad_operator -> .)
    DIVIDE          reduce using rule 97 (check_pow_rad_operator -> .)
    PLUS            reduce using rule 97 (check_pow_rad_operator -> .)
    MINUS           reduce using rule 97 (check_pow_rad_operator -> .)
    LTHAN           reduce using rule 97 (check_pow_rad_operator -> .)
    GTHAN           reduce using rule 97 (check_pow_rad_operator -> .)
    DIFFERENT       reduce using rule 97 (check_pow_rad_operator -> .)
    EQUIVALENT      reduce using rule 97 (check_pow_rad_operator -> .)
    SEMICOLON       reduce using rule 97 (check_pow_rad_operator -> .)
    RSQRBRACKET     reduce using rule 97 (check_pow_rad_operator -> .)
    RPAREN          reduce using rule 97 (check_pow_rad_operator -> .)
    COMMA           reduce using rule 97 (check_pow_rad_operator -> .)

    check_pow_rad_operator         shift and go to state 106

state 63

    (85) power0 -> function_call . check_pow_rad_operator power2
    (97) check_pow_rad_operator -> .

    POWER           reduce using rule 97 (check_pow_rad_operator -> .)
    SQRT            reduce using rule 97 (check_pow_rad_operator -> .)
    MULTIPLY        reduce using rule 97 (check_pow_rad_operator -> .)
    DIVIDE          reduce using rule 97 (check_pow_rad_operator -> .)
    PLUS            reduce using rule 97 (check_pow_rad_operator -> .)
    MINUS           reduce using rule 97 (check_pow_rad_operator -> .)
    LTHAN           reduce using rule 97 (check_pow_rad_operator -> .)
    GTHAN           reduce using rule 97 (check_pow_rad_operator -> .)
    DIFFERENT       reduce using rule 97 (check_pow_rad_operator -> .)
    EQUIVALENT      reduce using rule 97 (check_pow_rad_operator -> .)
    SEMICOLON       reduce using rule 97 (check_pow_rad_operator -> .)
    RSQRBRACKET     reduce using rule 97 (check_pow_rad_operator -> .)
    RPAREN          reduce using rule 97 (check_pow_rad_operator -> .)
    COMMA           reduce using rule 97 (check_pow_rad_operator -> .)

    check_pow_rad_operator         shift and go to state 107

state 64

    (86) power0 -> method_call0 . check_pow_rad_operator power2
    (97) check_pow_rad_operator -> .

    POWER           reduce using rule 97 (check_pow_rad_operator -> .)
    SQRT            reduce using rule 97 (check_pow_rad_operator -> .)
    MULTIPLY        reduce using rule 97 (check_pow_rad_operator -> .)
    DIVIDE          reduce using rule 97 (check_pow_rad_operator -> .)
    PLUS            reduce using rule 97 (check_pow_rad_operator -> .)
    MINUS           reduce using rule 97 (check_pow_rad_operator -> .)
    LTHAN           reduce using rule 97 (check_pow_rad_operator -> .)
    GTHAN           reduce using rule 97 (check_pow_rad_operator -> .)
    DIFFERENT       reduce using rule 97 (check_pow_rad_operator -> .)
    EQUIVALENT      reduce using rule 97 (check_pow_rad_operator -> .)
    SEMICOLON       reduce using rule 97 (check_pow_rad_operator -> .)
    RSQRBRACKET     reduce using rule 97 (check_pow_rad_operator -> .)
    RPAREN          reduce using rule 97 (check_pow_rad_operator -> .)
    COMMA           reduce using rule 97 (check_pow_rad_operator -> .)

    check_pow_rad_operator         shift and go to state 108

state 65

    (98) const_var -> CONST_INT . neurInt
    (102) neurInt -> .

    POWER           reduce using rule 102 (neurInt -> .)
    SQRT            reduce using rule 102 (neurInt -> .)
    MULTIPLY        reduce using rule 102 (neurInt -> .)
    DIVIDE          reduce using rule 102 (neurInt -> .)
    PLUS            reduce using rule 102 (neurInt -> .)
    MINUS           reduce using rule 102 (neurInt -> .)
    LTHAN           reduce using rule 102 (neurInt -> .)
    GTHAN           reduce using rule 102 (neurInt -> .)
    DIFFERENT       reduce using rule 102 (neurInt -> .)
    EQUIVALENT      reduce using rule 102 (neurInt -> .)
    SEMICOLON       reduce using rule 102 (neurInt -> .)
    RSQRBRACKET     reduce using rule 102 (neurInt -> .)
    RPAREN          reduce using rule 102 (neurInt -> .)
    COMMA           reduce using rule 102 (neurInt -> .)

    neurInt                        shift and go to state 109

state 66

    (99) const_var -> CONST_FLOAT . neurFloat
    (103) neurFloat -> .

    POWER           reduce using rule 103 (neurFloat -> .)
    SQRT            reduce using rule 103 (neurFloat -> .)
    MULTIPLY        reduce using rule 103 (neurFloat -> .)
    DIVIDE          reduce using rule 103 (neurFloat -> .)
    PLUS            reduce using rule 103 (neurFloat -> .)
    MINUS           reduce using rule 103 (neurFloat -> .)
    LTHAN           reduce using rule 103 (neurFloat -> .)
    GTHAN           reduce using rule 103 (neurFloat -> .)
    DIFFERENT       reduce using rule 103 (neurFloat -> .)
    EQUIVALENT      reduce using rule 103 (neurFloat -> .)
    SEMICOLON       reduce using rule 103 (neurFloat -> .)
    RSQRBRACKET     reduce using rule 103 (neurFloat -> .)
    RPAREN          reduce using rule 103 (neurFloat -> .)
    COMMA           reduce using rule 103 (neurFloat -> .)

    neurFloat                      shift and go to state 110

state 67

    (104) function_call -> id_funcCall LPAREN . neurFuncCall function_call_params0 RPAREN
    (105) neurFuncCall -> .

    CONST_STRING    reduce using rule 105 (neurFuncCall -> .)
    ID              reduce using rule 105 (neurFuncCall -> .)
    LPAREN          reduce using rule 105 (neurFuncCall -> .)
    CONST_INT       reduce using rule 105 (neurFuncCall -> .)
    CONST_FLOAT     reduce using rule 105 (neurFuncCall -> .)
    RPAREN          reduce using rule 105 (neurFuncCall -> .)
    COMMA           reduce using rule 105 (neurFuncCall -> .)

    neurFuncCall                   shift and go to state 111

state 68

    (153) while -> WHILE wNeur1 . LPAREN expression0 RPAREN wNeur2 block0 wNeur3

    LPAREN          shift and go to state 112


state 69

    (42) assignment0 -> ID EQUALS expression0 . SEMICOLON

    SEMICOLON       shift and go to state 113


state 70

    (169) object_assignment -> ID EQUALS NEW . ID LPAREN function_call_params0 RPAREN SEMICOLON

    ID              shift and go to state 114


state 71

    (106) id_funcCall -> ID .

    LPAREN          reduce using rule 106 (id_funcCall -> ID .)


state 72

    (125) method_call0 -> ID DOT function_call .

    SEMICOLON       reduce using rule 125 (method_call0 -> ID DOT function_call .)
    POWER           reduce using rule 125 (method_call0 -> ID DOT function_call .)
    SQRT            reduce using rule 125 (method_call0 -> ID DOT function_call .)
    MULTIPLY        reduce using rule 125 (method_call0 -> ID DOT function_call .)
    DIVIDE          reduce using rule 125 (method_call0 -> ID DOT function_call .)
    PLUS            reduce using rule 125 (method_call0 -> ID DOT function_call .)
    MINUS           reduce using rule 125 (method_call0 -> ID DOT function_call .)
    LTHAN           reduce using rule 125 (method_call0 -> ID DOT function_call .)
    GTHAN           reduce using rule 125 (method_call0 -> ID DOT function_call .)
    DIFFERENT       reduce using rule 125 (method_call0 -> ID DOT function_call .)
    EQUIVALENT      reduce using rule 125 (method_call0 -> ID DOT function_call .)
    RSQRBRACKET     reduce using rule 125 (method_call0 -> ID DOT function_call .)
    RPAREN          reduce using rule 125 (method_call0 -> ID DOT function_call .)
    COMMA           reduce using rule 125 (method_call0 -> ID DOT function_call .)


state 73

    (170) main0 -> MAIN main_scope . LBRACKET main1 RBRACKET

    LBRACKET        shift and go to state 115


state 74

    (10) class0 -> CLASS class_id_def class1 . LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global

    LBRACKET        shift and go to state 116


state 75

    (15) class1 -> COLON . ID

    ID              shift and go to state 117


state 76

    (16) class1 -> empty .

    LBRACKET        reduce using rule 16 (class1 -> empty .)


state 77

    (21) function0 -> DEF id_def LPAREN . params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (57) params0 -> . type ID paramsNeur params1
    (58) params0 -> . empty
    (65) type -> . INT
    (66) type -> . FLOAT
    (67) type -> . STRING
    (175) empty -> .

    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    STRING          shift and go to state 83
    RPAREN          reduce using rule 175 (empty -> .)

    params0                        shift and go to state 118
    type                           shift and go to state 119
    empty                          shift and go to state 120

state 78

    (29) declaration0 -> decl_id_def COLON declaration1 . SEMICOLON

    SEMICOLON       shift and go to state 121


state 79

    (31) declaration1 -> type . simpleMemoryNeur
    (33) declaration1 -> type . isArrayNeur LSQRBRACKET exp0 limitNeur RSQRBRACKET declaration2 neurMemory
    (35) simpleMemoryNeur -> .
    (36) isArrayNeur -> .

    SEMICOLON       reduce using rule 35 (simpleMemoryNeur -> .)
    LSQRBRACKET     reduce using rule 36 (isArrayNeur -> .)

    simpleMemoryNeur               shift and go to state 122
    isArrayNeur                    shift and go to state 123

state 80

    (32) declaration1 -> complex_type . simpleMemoryNeur
    (35) simpleMemoryNeur -> .

    SEMICOLON       reduce using rule 35 (simpleMemoryNeur -> .)

    simpleMemoryNeur               shift and go to state 124

state 81

    (65) type -> INT .

    LSQRBRACKET     reduce using rule 65 (type -> INT .)
    SEMICOLON       reduce using rule 65 (type -> INT .)
    ID              reduce using rule 65 (type -> INT .)


state 82

    (66) type -> FLOAT .

    LSQRBRACKET     reduce using rule 66 (type -> FLOAT .)
    SEMICOLON       reduce using rule 66 (type -> FLOAT .)
    ID              reduce using rule 66 (type -> FLOAT .)


state 83

    (67) type -> STRING .

    LSQRBRACKET     reduce using rule 67 (type -> STRING .)
    SEMICOLON       reduce using rule 67 (type -> STRING .)
    ID              reduce using rule 67 (type -> STRING .)


state 84

    (70) complex_type -> ID .

    SEMICOLON       reduce using rule 70 (complex_type -> ID .)


state 85

    (43) assignment0 -> assign_id_def lsqrbracket_assign exp0 . rsqrbracket_assign EQUALS expression0 SEMICOLON
    (44) assignment0 -> assign_id_def lsqrbracket_assign exp0 . rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON
    (47) rsqrbracket_assign -> . RSQRBRACKET
    (46) rsqrbracket_assign_2dim1 -> . RSQRBRACKET

    RSQRBRACKET     shift and go to state 127

    rsqrbracket_assign             shift and go to state 125
    rsqrbracket_assign_2dim1       shift and go to state 126

state 86

    (87) power0 -> attr_access0 . check_pow_rad_operator power2
    (97) check_pow_rad_operator -> .

    POWER           reduce using rule 97 (check_pow_rad_operator -> .)
    SQRT            reduce using rule 97 (check_pow_rad_operator -> .)
    MULTIPLY        reduce using rule 97 (check_pow_rad_operator -> .)
    DIVIDE          reduce using rule 97 (check_pow_rad_operator -> .)
    PLUS            reduce using rule 97 (check_pow_rad_operator -> .)
    MINUS           reduce using rule 97 (check_pow_rad_operator -> .)
    RSQRBRACKET     reduce using rule 97 (check_pow_rad_operator -> .)
    RPAREN          reduce using rule 97 (check_pow_rad_operator -> .)
    LTHAN           reduce using rule 97 (check_pow_rad_operator -> .)
    GTHAN           reduce using rule 97 (check_pow_rad_operator -> .)
    DIFFERENT       reduce using rule 97 (check_pow_rad_operator -> .)
    EQUIVALENT      reduce using rule 97 (check_pow_rad_operator -> .)
    SEMICOLON       reduce using rule 97 (check_pow_rad_operator -> .)
    COMMA           reduce using rule 97 (check_pow_rad_operator -> .)

    check_pow_rad_operator         shift and go to state 99

state 87

    (88) power0 -> ID . LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (100) const_var -> ID . neurID
    (125) method_call0 -> ID . DOT function_call
    (124) attr_access0 -> ID . DOT ID
    (106) id_funcCall -> ID .
    (101) neurID -> .

    LSQRBRACKET     shift and go to state 102
    DOT             shift and go to state 128
    LPAREN          reduce using rule 106 (id_funcCall -> ID .)
    POWER           reduce using rule 101 (neurID -> .)
    SQRT            reduce using rule 101 (neurID -> .)
    MULTIPLY        reduce using rule 101 (neurID -> .)
    DIVIDE          reduce using rule 101 (neurID -> .)
    PLUS            reduce using rule 101 (neurID -> .)
    MINUS           reduce using rule 101 (neurID -> .)
    RSQRBRACKET     reduce using rule 101 (neurID -> .)
    RPAREN          reduce using rule 101 (neurID -> .)
    LTHAN           reduce using rule 101 (neurID -> .)
    GTHAN           reduce using rule 101 (neurID -> .)
    DIFFERENT       reduce using rule 101 (neurID -> .)
    EQUIVALENT      reduce using rule 101 (neurID -> .)
    SEMICOLON       reduce using rule 101 (neurID -> .)
    COMMA           reduce using rule 101 (neurID -> .)

    neurID                         shift and go to state 103

state 88

    (136) condition0 -> IF LPAREN expression0 . condNeur1 RPAREN block0 condition1 condNeur3
    (137) condNeur1 -> .

    RPAREN          reduce using rule 137 (condNeur1 -> .)

    condNeur1                      shift and go to state 129

state 89

    (142) writing0 -> WRITE push_writing_op LPAREN . writing1 RPAREN SEMICOLON
    (145) writing1 -> . expression0 push_writing_val writing2
    (146) writing1 -> . CONST_STRING push_string_val push_writing_val writing2
    (113) expression0 -> . exp0 expression1
    (114) expression0 -> . attr_access0 expression1
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (124) attr_access0 -> . ID DOT ID
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (106) id_funcCall -> . ID

    CONST_STRING    shift and go to state 132
    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    writing1                       shift and go to state 130
    expression0                    shift and go to state 131
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 90

    (150) reading -> READ ID SEMICOLON .

    CLASS           reduce using rule 150 (reading -> READ ID SEMICOLON .)
    DEF             reduce using rule 150 (reading -> READ ID SEMICOLON .)
    ID              reduce using rule 150 (reading -> READ ID SEMICOLON .)
    IF              reduce using rule 150 (reading -> READ ID SEMICOLON .)
    WRITE           reduce using rule 150 (reading -> READ ID SEMICOLON .)
    READ            reduce using rule 150 (reading -> READ ID SEMICOLON .)
    RETURN          reduce using rule 150 (reading -> READ ID SEMICOLON .)
    WHILE           reduce using rule 150 (reading -> READ ID SEMICOLON .)
    MAIN            reduce using rule 150 (reading -> READ ID SEMICOLON .)
    RBRACKET        reduce using rule 150 (reading -> READ ID SEMICOLON .)


state 91

    (151) return -> RETURN expression0 SEMICOLON .

    CLASS           reduce using rule 151 (return -> RETURN expression0 SEMICOLON .)
    DEF             reduce using rule 151 (return -> RETURN expression0 SEMICOLON .)
    ID              reduce using rule 151 (return -> RETURN expression0 SEMICOLON .)
    IF              reduce using rule 151 (return -> RETURN expression0 SEMICOLON .)
    WRITE           reduce using rule 151 (return -> RETURN expression0 SEMICOLON .)
    READ            reduce using rule 151 (return -> RETURN expression0 SEMICOLON .)
    RETURN          reduce using rule 151 (return -> RETURN expression0 SEMICOLON .)
    WHILE           reduce using rule 151 (return -> RETURN expression0 SEMICOLON .)
    MAIN            reduce using rule 151 (return -> RETURN expression0 SEMICOLON .)
    RBRACKET        reduce using rule 151 (return -> RETURN expression0 SEMICOLON .)


state 92

    (113) expression0 -> exp0 expression1 .

    SEMICOLON       reduce using rule 113 (expression0 -> exp0 expression1 .)
    RPAREN          reduce using rule 113 (expression0 -> exp0 expression1 .)
    COMMA           reduce using rule 113 (expression0 -> exp0 expression1 .)


state 93

    (115) expression1 -> LTHAN . push_rel_op expression3
    (120) push_rel_op -> .

    ID              reduce using rule 120 (push_rel_op -> .)
    LPAREN          reduce using rule 120 (push_rel_op -> .)
    CONST_INT       reduce using rule 120 (push_rel_op -> .)
    CONST_FLOAT     reduce using rule 120 (push_rel_op -> .)

    push_rel_op                    shift and go to state 133

state 94

    (116) expression1 -> GTHAN . push_rel_op expression3
    (120) push_rel_op -> .

    ID              reduce using rule 120 (push_rel_op -> .)
    LPAREN          reduce using rule 120 (push_rel_op -> .)
    CONST_INT       reduce using rule 120 (push_rel_op -> .)
    CONST_FLOAT     reduce using rule 120 (push_rel_op -> .)

    push_rel_op                    shift and go to state 134

state 95

    (117) expression1 -> DIFFERENT . push_rel_op expression3
    (120) push_rel_op -> .

    ID              reduce using rule 120 (push_rel_op -> .)
    LPAREN          reduce using rule 120 (push_rel_op -> .)
    CONST_INT       reduce using rule 120 (push_rel_op -> .)
    CONST_FLOAT     reduce using rule 120 (push_rel_op -> .)

    push_rel_op                    shift and go to state 135

state 96

    (118) expression1 -> EQUIVALENT . push_rel_op expression3
    (120) push_rel_op -> .

    ID              reduce using rule 120 (push_rel_op -> .)
    LPAREN          reduce using rule 120 (push_rel_op -> .)
    CONST_INT       reduce using rule 120 (push_rel_op -> .)
    CONST_FLOAT     reduce using rule 120 (push_rel_op -> .)

    push_rel_op                    shift and go to state 136

state 97

    (119) expression1 -> empty .

    SEMICOLON       reduce using rule 119 (expression1 -> empty .)
    RPAREN          reduce using rule 119 (expression1 -> empty .)
    COMMA           reduce using rule 119 (expression1 -> empty .)


state 98

    (114) expression0 -> attr_access0 expression1 .

    SEMICOLON       reduce using rule 114 (expression0 -> attr_access0 expression1 .)
    RPAREN          reduce using rule 114 (expression0 -> attr_access0 expression1 .)
    COMMA           reduce using rule 114 (expression0 -> attr_access0 expression1 .)


state 99

    (87) power0 -> attr_access0 check_pow_rad_operator . power2
    (93) power2 -> . POWER push_pow_rad_op power0
    (94) power2 -> . SQRT push_pow_rad_op power0
    (95) power2 -> . empty
    (175) empty -> .

    POWER           shift and go to state 138
    SQRT            shift and go to state 139
    MULTIPLY        reduce using rule 175 (empty -> .)
    DIVIDE          reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    LTHAN           reduce using rule 175 (empty -> .)
    GTHAN           reduce using rule 175 (empty -> .)
    DIFFERENT       reduce using rule 175 (empty -> .)
    EQUIVALENT      reduce using rule 175 (empty -> .)
    SEMICOLON       reduce using rule 175 (empty -> .)
    RSQRBRACKET     reduce using rule 175 (empty -> .)
    RPAREN          reduce using rule 175 (empty -> .)
    COMMA           reduce using rule 175 (empty -> .)

    power2                         shift and go to state 137
    empty                          shift and go to state 140

state 100

    (71) exp0 -> term0 check_last_plus_minus_operator . exp1
    (72) exp1 -> . PLUS push_plus_minus_op exp0
    (73) exp1 -> . MINUS push_plus_minus_op exp0
    (74) exp1 -> . empty
    (175) empty -> .

    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    LTHAN           reduce using rule 175 (empty -> .)
    GTHAN           reduce using rule 175 (empty -> .)
    DIFFERENT       reduce using rule 175 (empty -> .)
    EQUIVALENT      reduce using rule 175 (empty -> .)
    SEMICOLON       reduce using rule 175 (empty -> .)
    RSQRBRACKET     reduce using rule 175 (empty -> .)
    RPAREN          reduce using rule 175 (empty -> .)
    COMMA           reduce using rule 175 (empty -> .)

    exp1                           shift and go to state 141
    empty                          shift and go to state 144

state 101

    (124) attr_access0 -> ID DOT . ID
    (125) method_call0 -> ID DOT . function_call
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (106) id_funcCall -> . ID

    ID              shift and go to state 145

    function_call                  shift and go to state 72
    id_funcCall                    shift and go to state 31

state 102

    (88) power0 -> ID LSQRBRACKET . exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (124) attr_access0 -> . ID DOT ID
    (106) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 87
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 146
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 86
    id_funcCall                    shift and go to state 31

state 103

    (100) const_var -> ID neurID .

    POWER           reduce using rule 100 (const_var -> ID neurID .)
    SQRT            reduce using rule 100 (const_var -> ID neurID .)
    MULTIPLY        reduce using rule 100 (const_var -> ID neurID .)
    DIVIDE          reduce using rule 100 (const_var -> ID neurID .)
    PLUS            reduce using rule 100 (const_var -> ID neurID .)
    MINUS           reduce using rule 100 (const_var -> ID neurID .)
    LTHAN           reduce using rule 100 (const_var -> ID neurID .)
    GTHAN           reduce using rule 100 (const_var -> ID neurID .)
    DIFFERENT       reduce using rule 100 (const_var -> ID neurID .)
    EQUIVALENT      reduce using rule 100 (const_var -> ID neurID .)
    SEMICOLON       reduce using rule 100 (const_var -> ID neurID .)
    RSQRBRACKET     reduce using rule 100 (const_var -> ID neurID .)
    RPAREN          reduce using rule 100 (const_var -> ID neurID .)
    COMMA           reduce using rule 100 (const_var -> ID neurID .)


state 104

    (77) term0 -> power0 check_last_times_division_operator . term1
    (78) term1 -> . MULTIPLY push_times_division_op term0
    (79) term1 -> . DIVIDE push_times_division_op term0
    (80) term1 -> . empty
    (175) empty -> .

    MULTIPLY        shift and go to state 148
    DIVIDE          shift and go to state 149
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    LTHAN           reduce using rule 175 (empty -> .)
    GTHAN           reduce using rule 175 (empty -> .)
    DIFFERENT       reduce using rule 175 (empty -> .)
    EQUIVALENT      reduce using rule 175 (empty -> .)
    SEMICOLON       reduce using rule 175 (empty -> .)
    RSQRBRACKET     reduce using rule 175 (empty -> .)
    RPAREN          reduce using rule 175 (empty -> .)
    COMMA           reduce using rule 175 (empty -> .)

    term1                          shift and go to state 147
    empty                          shift and go to state 150

state 105

    (83) power0 -> LPAREN open_paren . exp0 RPAREN close_paren check_pow_rad_operator power2
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (124) attr_access0 -> . ID DOT ID
    (106) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 87
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 151
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 86
    id_funcCall                    shift and go to state 31

state 106

    (84) power0 -> const_var check_pow_rad_operator . power2
    (93) power2 -> . POWER push_pow_rad_op power0
    (94) power2 -> . SQRT push_pow_rad_op power0
    (95) power2 -> . empty
    (175) empty -> .

    POWER           shift and go to state 138
    SQRT            shift and go to state 139
    MULTIPLY        reduce using rule 175 (empty -> .)
    DIVIDE          reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    LTHAN           reduce using rule 175 (empty -> .)
    GTHAN           reduce using rule 175 (empty -> .)
    DIFFERENT       reduce using rule 175 (empty -> .)
    EQUIVALENT      reduce using rule 175 (empty -> .)
    SEMICOLON       reduce using rule 175 (empty -> .)
    RSQRBRACKET     reduce using rule 175 (empty -> .)
    RPAREN          reduce using rule 175 (empty -> .)
    COMMA           reduce using rule 175 (empty -> .)

    power2                         shift and go to state 152
    empty                          shift and go to state 140

state 107

    (85) power0 -> function_call check_pow_rad_operator . power2
    (93) power2 -> . POWER push_pow_rad_op power0
    (94) power2 -> . SQRT push_pow_rad_op power0
    (95) power2 -> . empty
    (175) empty -> .

    POWER           shift and go to state 138
    SQRT            shift and go to state 139
    MULTIPLY        reduce using rule 175 (empty -> .)
    DIVIDE          reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    LTHAN           reduce using rule 175 (empty -> .)
    GTHAN           reduce using rule 175 (empty -> .)
    DIFFERENT       reduce using rule 175 (empty -> .)
    EQUIVALENT      reduce using rule 175 (empty -> .)
    SEMICOLON       reduce using rule 175 (empty -> .)
    RSQRBRACKET     reduce using rule 175 (empty -> .)
    RPAREN          reduce using rule 175 (empty -> .)
    COMMA           reduce using rule 175 (empty -> .)

    power2                         shift and go to state 153
    empty                          shift and go to state 140

state 108

    (86) power0 -> method_call0 check_pow_rad_operator . power2
    (93) power2 -> . POWER push_pow_rad_op power0
    (94) power2 -> . SQRT push_pow_rad_op power0
    (95) power2 -> . empty
    (175) empty -> .

    POWER           shift and go to state 138
    SQRT            shift and go to state 139
    MULTIPLY        reduce using rule 175 (empty -> .)
    DIVIDE          reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    LTHAN           reduce using rule 175 (empty -> .)
    GTHAN           reduce using rule 175 (empty -> .)
    DIFFERENT       reduce using rule 175 (empty -> .)
    EQUIVALENT      reduce using rule 175 (empty -> .)
    SEMICOLON       reduce using rule 175 (empty -> .)
    RSQRBRACKET     reduce using rule 175 (empty -> .)
    RPAREN          reduce using rule 175 (empty -> .)
    COMMA           reduce using rule 175 (empty -> .)

    power2                         shift and go to state 154
    empty                          shift and go to state 140

state 109

    (98) const_var -> CONST_INT neurInt .

    POWER           reduce using rule 98 (const_var -> CONST_INT neurInt .)
    SQRT            reduce using rule 98 (const_var -> CONST_INT neurInt .)
    MULTIPLY        reduce using rule 98 (const_var -> CONST_INT neurInt .)
    DIVIDE          reduce using rule 98 (const_var -> CONST_INT neurInt .)
    PLUS            reduce using rule 98 (const_var -> CONST_INT neurInt .)
    MINUS           reduce using rule 98 (const_var -> CONST_INT neurInt .)
    LTHAN           reduce using rule 98 (const_var -> CONST_INT neurInt .)
    GTHAN           reduce using rule 98 (const_var -> CONST_INT neurInt .)
    DIFFERENT       reduce using rule 98 (const_var -> CONST_INT neurInt .)
    EQUIVALENT      reduce using rule 98 (const_var -> CONST_INT neurInt .)
    SEMICOLON       reduce using rule 98 (const_var -> CONST_INT neurInt .)
    RSQRBRACKET     reduce using rule 98 (const_var -> CONST_INT neurInt .)
    RPAREN          reduce using rule 98 (const_var -> CONST_INT neurInt .)
    COMMA           reduce using rule 98 (const_var -> CONST_INT neurInt .)


state 110

    (99) const_var -> CONST_FLOAT neurFloat .

    POWER           reduce using rule 99 (const_var -> CONST_FLOAT neurFloat .)
    SQRT            reduce using rule 99 (const_var -> CONST_FLOAT neurFloat .)
    MULTIPLY        reduce using rule 99 (const_var -> CONST_FLOAT neurFloat .)
    DIVIDE          reduce using rule 99 (const_var -> CONST_FLOAT neurFloat .)
    PLUS            reduce using rule 99 (const_var -> CONST_FLOAT neurFloat .)
    MINUS           reduce using rule 99 (const_var -> CONST_FLOAT neurFloat .)
    LTHAN           reduce using rule 99 (const_var -> CONST_FLOAT neurFloat .)
    GTHAN           reduce using rule 99 (const_var -> CONST_FLOAT neurFloat .)
    DIFFERENT       reduce using rule 99 (const_var -> CONST_FLOAT neurFloat .)
    EQUIVALENT      reduce using rule 99 (const_var -> CONST_FLOAT neurFloat .)
    SEMICOLON       reduce using rule 99 (const_var -> CONST_FLOAT neurFloat .)
    RSQRBRACKET     reduce using rule 99 (const_var -> CONST_FLOAT neurFloat .)
    RPAREN          reduce using rule 99 (const_var -> CONST_FLOAT neurFloat .)
    COMMA           reduce using rule 99 (const_var -> CONST_FLOAT neurFloat .)


state 111

    (104) function_call -> id_funcCall LPAREN neurFuncCall . function_call_params0 RPAREN
    (107) function_call_params0 -> . expression0 neurFuncCallParams1 function_call_params1
    (108) function_call_params0 -> . CONST_STRING neurFuncCallParams1 function_call_params1
    (109) function_call_params0 -> . empty function_call_params1
    (113) expression0 -> . exp0 expression1
    (114) expression0 -> . attr_access0 expression1
    (175) empty -> .
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (124) attr_access0 -> . ID DOT ID
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (106) id_funcCall -> . ID

    CONST_STRING    shift and go to state 157
    COMMA           reduce using rule 175 (empty -> .)
    RPAREN          reduce using rule 175 (empty -> .)
    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    id_funcCall                    shift and go to state 31
    function_call_params0          shift and go to state 155
    expression0                    shift and go to state 156
    empty                          shift and go to state 158
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64

state 112

    (153) while -> WHILE wNeur1 LPAREN . expression0 RPAREN wNeur2 block0 wNeur3
    (113) expression0 -> . exp0 expression1
    (114) expression0 -> . attr_access0 expression1
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (124) attr_access0 -> . ID DOT ID
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (106) id_funcCall -> . ID

    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    expression0                    shift and go to state 159
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 113

    (42) assignment0 -> ID EQUALS expression0 SEMICOLON .

    CLASS           reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    DEF             reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    ID              reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    IF              reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    WRITE           reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    READ            reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    RETURN          reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    WHILE           reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    MAIN            reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    RBRACKET        reduce using rule 42 (assignment0 -> ID EQUALS expression0 SEMICOLON .)


state 114

    (169) object_assignment -> ID EQUALS NEW ID . LPAREN function_call_params0 RPAREN SEMICOLON

    LPAREN          shift and go to state 160


state 115

    (170) main0 -> MAIN main_scope LBRACKET . main1 RBRACKET
    (171) main1 -> . declaration0 main1
    (172) main1 -> . statement main1
    (173) main1 -> . empty
    (29) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (160) statement -> . assignment0
    (161) statement -> . object_assignment
    (162) statement -> . condition0
    (163) statement -> . writing0
    (164) statement -> . reading
    (165) statement -> . return
    (166) statement -> . function_call SEMICOLON
    (167) statement -> . method_call0 SEMICOLON
    (168) statement -> . while
    (175) empty -> .
    (30) decl_id_def -> . ID
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON
    (169) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (136) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3
    (142) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (150) reading -> . READ ID SEMICOLON
    (151) return -> . RETURN expression0 SEMICOLON
    (152) return -> . RETURN SEMICOLON
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (153) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (49) assign_id_def -> . ID
    (106) id_funcCall -> . ID

    RBRACKET        reduce using rule 175 (empty -> .)
    ID              shift and go to state 166
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    main1                          shift and go to state 161
    declaration0                   shift and go to state 162
    statement                      shift and go to state 163
    empty                          shift and go to state 164
    decl_id_def                    shift and go to state 25
    assignment0                    shift and go to state 165
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 116

    (10) class0 -> CLASS class_id_def class1 LBRACKET . class2 constructor class3 RBRACKET SEMICOLON revert_global
    (17) class2 -> . attributes
    (18) class2 -> . empty
    (52) attributes -> . data_access simple_declaration attributes
    (53) attributes -> . simple_assignment attributes
    (54) attributes -> . empty
    (175) empty -> .
    (126) data_access -> . PRIVATE
    (127) data_access -> . PUBLIC
    (69) simple_assignment -> . ID EQUALS expression0 SEMICOLON

    CONSTRUCT       reduce using rule 175 (empty -> .)
    PRIVATE         shift and go to state 172
    PUBLIC          shift and go to state 173
    ID              shift and go to state 174

    class2                         shift and go to state 167
    attributes                     shift and go to state 168
    empty                          shift and go to state 169
    data_access                    shift and go to state 170
    simple_assignment              shift and go to state 171

state 117

    (15) class1 -> COLON ID .

    LBRACKET        reduce using rule 15 (class1 -> COLON ID .)


state 118

    (21) function0 -> DEF id_def LPAREN params0 . RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope

    RPAREN          shift and go to state 175


state 119

    (57) params0 -> type . ID paramsNeur params1

    ID              shift and go to state 176


state 120

    (58) params0 -> empty .

    RPAREN          reduce using rule 58 (params0 -> empty .)


state 121

    (29) declaration0 -> decl_id_def COLON declaration1 SEMICOLON .

    CLASS           reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    DEF             reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    ID              reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    IF              reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    WRITE           reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    READ            reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    RETURN          reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    WHILE           reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    MAIN            reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    RBRACKET        reduce using rule 29 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)


state 122

    (31) declaration1 -> type simpleMemoryNeur .

    SEMICOLON       reduce using rule 31 (declaration1 -> type simpleMemoryNeur .)


state 123

    (33) declaration1 -> type isArrayNeur . LSQRBRACKET exp0 limitNeur RSQRBRACKET declaration2 neurMemory

    LSQRBRACKET     shift and go to state 177


state 124

    (32) declaration1 -> complex_type simpleMemoryNeur .

    SEMICOLON       reduce using rule 32 (declaration1 -> complex_type simpleMemoryNeur .)


state 125

    (43) assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign . EQUALS expression0 SEMICOLON

    EQUALS          shift and go to state 178


state 126

    (44) assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 . LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON

    LSQRBRACKET     shift and go to state 179


state 127

    (47) rsqrbracket_assign -> RSQRBRACKET .
    (46) rsqrbracket_assign_2dim1 -> RSQRBRACKET .

    EQUALS          reduce using rule 47 (rsqrbracket_assign -> RSQRBRACKET .)
    LSQRBRACKET     reduce using rule 46 (rsqrbracket_assign_2dim1 -> RSQRBRACKET .)


state 128

    (125) method_call0 -> ID DOT . function_call
    (124) attr_access0 -> ID DOT . ID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (106) id_funcCall -> . ID

    ID              shift and go to state 145

    function_call                  shift and go to state 72
    id_funcCall                    shift and go to state 31

state 129

    (136) condition0 -> IF LPAREN expression0 condNeur1 . RPAREN block0 condition1 condNeur3

    RPAREN          shift and go to state 180


state 130

    (142) writing0 -> WRITE push_writing_op LPAREN writing1 . RPAREN SEMICOLON

    RPAREN          shift and go to state 181


state 131

    (145) writing1 -> expression0 . push_writing_val writing2
    (147) push_writing_val -> .

    COMMA           reduce using rule 147 (push_writing_val -> .)
    RPAREN          reduce using rule 147 (push_writing_val -> .)

    push_writing_val               shift and go to state 182

state 132

    (146) writing1 -> CONST_STRING . push_string_val push_writing_val writing2
    (144) push_string_val -> .

    COMMA           reduce using rule 144 (push_string_val -> .)
    RPAREN          reduce using rule 144 (push_string_val -> .)

    push_string_val                shift and go to state 183

state 133

    (115) expression1 -> LTHAN push_rel_op . expression3
    (122) expression3 -> . exp0 check_rel_operator
    (123) expression3 -> . attr_access0
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (124) attr_access0 -> . ID DOT ID
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (106) id_funcCall -> . ID

    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    expression3                    shift and go to state 184
    exp0                           shift and go to state 185
    attr_access0                   shift and go to state 186
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 134

    (116) expression1 -> GTHAN push_rel_op . expression3
    (122) expression3 -> . exp0 check_rel_operator
    (123) expression3 -> . attr_access0
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (124) attr_access0 -> . ID DOT ID
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (106) id_funcCall -> . ID

    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    expression3                    shift and go to state 187
    exp0                           shift and go to state 185
    attr_access0                   shift and go to state 186
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 135

    (117) expression1 -> DIFFERENT push_rel_op . expression3
    (122) expression3 -> . exp0 check_rel_operator
    (123) expression3 -> . attr_access0
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (124) attr_access0 -> . ID DOT ID
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (106) id_funcCall -> . ID

    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    expression3                    shift and go to state 188
    exp0                           shift and go to state 185
    attr_access0                   shift and go to state 186
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 136

    (118) expression1 -> EQUIVALENT push_rel_op . expression3
    (122) expression3 -> . exp0 check_rel_operator
    (123) expression3 -> . attr_access0
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (124) attr_access0 -> . ID DOT ID
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (106) id_funcCall -> . ID

    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    expression3                    shift and go to state 189
    exp0                           shift and go to state 185
    attr_access0                   shift and go to state 186
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 137

    (87) power0 -> attr_access0 check_pow_rad_operator power2 .

    MULTIPLY        reduce using rule 87 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    DIVIDE          reduce using rule 87 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    PLUS            reduce using rule 87 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    MINUS           reduce using rule 87 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    LTHAN           reduce using rule 87 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    GTHAN           reduce using rule 87 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    DIFFERENT       reduce using rule 87 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    EQUIVALENT      reduce using rule 87 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    SEMICOLON       reduce using rule 87 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    RSQRBRACKET     reduce using rule 87 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    RPAREN          reduce using rule 87 (power0 -> attr_access0 check_pow_rad_operator power2 .)
    COMMA           reduce using rule 87 (power0 -> attr_access0 check_pow_rad_operator power2 .)


state 138

    (93) power2 -> POWER . push_pow_rad_op power0
    (96) push_pow_rad_op -> .

    LPAREN          reduce using rule 96 (push_pow_rad_op -> .)
    ID              reduce using rule 96 (push_pow_rad_op -> .)
    CONST_INT       reduce using rule 96 (push_pow_rad_op -> .)
    CONST_FLOAT     reduce using rule 96 (push_pow_rad_op -> .)

    push_pow_rad_op                shift and go to state 190

state 139

    (94) power2 -> SQRT . push_pow_rad_op power0
    (96) push_pow_rad_op -> .

    LPAREN          reduce using rule 96 (push_pow_rad_op -> .)
    ID              reduce using rule 96 (push_pow_rad_op -> .)
    CONST_INT       reduce using rule 96 (push_pow_rad_op -> .)
    CONST_FLOAT     reduce using rule 96 (push_pow_rad_op -> .)

    push_pow_rad_op                shift and go to state 191

state 140

    (95) power2 -> empty .

    MULTIPLY        reduce using rule 95 (power2 -> empty .)
    DIVIDE          reduce using rule 95 (power2 -> empty .)
    PLUS            reduce using rule 95 (power2 -> empty .)
    MINUS           reduce using rule 95 (power2 -> empty .)
    LTHAN           reduce using rule 95 (power2 -> empty .)
    GTHAN           reduce using rule 95 (power2 -> empty .)
    DIFFERENT       reduce using rule 95 (power2 -> empty .)
    EQUIVALENT      reduce using rule 95 (power2 -> empty .)
    SEMICOLON       reduce using rule 95 (power2 -> empty .)
    RSQRBRACKET     reduce using rule 95 (power2 -> empty .)
    RPAREN          reduce using rule 95 (power2 -> empty .)
    COMMA           reduce using rule 95 (power2 -> empty .)


state 141

    (71) exp0 -> term0 check_last_plus_minus_operator exp1 .

    LTHAN           reduce using rule 71 (exp0 -> term0 check_last_plus_minus_operator exp1 .)
    GTHAN           reduce using rule 71 (exp0 -> term0 check_last_plus_minus_operator exp1 .)
    DIFFERENT       reduce using rule 71 (exp0 -> term0 check_last_plus_minus_operator exp1 .)
    EQUIVALENT      reduce using rule 71 (exp0 -> term0 check_last_plus_minus_operator exp1 .)
    SEMICOLON       reduce using rule 71 (exp0 -> term0 check_last_plus_minus_operator exp1 .)
    RSQRBRACKET     reduce using rule 71 (exp0 -> term0 check_last_plus_minus_operator exp1 .)
    RPAREN          reduce using rule 71 (exp0 -> term0 check_last_plus_minus_operator exp1 .)
    COMMA           reduce using rule 71 (exp0 -> term0 check_last_plus_minus_operator exp1 .)


state 142

    (72) exp1 -> PLUS . push_plus_minus_op exp0
    (75) push_plus_minus_op -> .

    LPAREN          reduce using rule 75 (push_plus_minus_op -> .)
    ID              reduce using rule 75 (push_plus_minus_op -> .)
    CONST_INT       reduce using rule 75 (push_plus_minus_op -> .)
    CONST_FLOAT     reduce using rule 75 (push_plus_minus_op -> .)

    push_plus_minus_op             shift and go to state 192

state 143

    (73) exp1 -> MINUS . push_plus_minus_op exp0
    (75) push_plus_minus_op -> .

    LPAREN          reduce using rule 75 (push_plus_minus_op -> .)
    ID              reduce using rule 75 (push_plus_minus_op -> .)
    CONST_INT       reduce using rule 75 (push_plus_minus_op -> .)
    CONST_FLOAT     reduce using rule 75 (push_plus_minus_op -> .)

    push_plus_minus_op             shift and go to state 193

state 144

    (74) exp1 -> empty .

    LTHAN           reduce using rule 74 (exp1 -> empty .)
    GTHAN           reduce using rule 74 (exp1 -> empty .)
    DIFFERENT       reduce using rule 74 (exp1 -> empty .)
    EQUIVALENT      reduce using rule 74 (exp1 -> empty .)
    SEMICOLON       reduce using rule 74 (exp1 -> empty .)
    RSQRBRACKET     reduce using rule 74 (exp1 -> empty .)
    RPAREN          reduce using rule 74 (exp1 -> empty .)
    COMMA           reduce using rule 74 (exp1 -> empty .)


state 145

    (124) attr_access0 -> ID DOT ID .
    (106) id_funcCall -> ID .

    LTHAN           reduce using rule 124 (attr_access0 -> ID DOT ID .)
    GTHAN           reduce using rule 124 (attr_access0 -> ID DOT ID .)
    DIFFERENT       reduce using rule 124 (attr_access0 -> ID DOT ID .)
    EQUIVALENT      reduce using rule 124 (attr_access0 -> ID DOT ID .)
    POWER           reduce using rule 124 (attr_access0 -> ID DOT ID .)
    SQRT            reduce using rule 124 (attr_access0 -> ID DOT ID .)
    SEMICOLON       reduce using rule 124 (attr_access0 -> ID DOT ID .)
    MULTIPLY        reduce using rule 124 (attr_access0 -> ID DOT ID .)
    DIVIDE          reduce using rule 124 (attr_access0 -> ID DOT ID .)
    PLUS            reduce using rule 124 (attr_access0 -> ID DOT ID .)
    MINUS           reduce using rule 124 (attr_access0 -> ID DOT ID .)
    RSQRBRACKET     reduce using rule 124 (attr_access0 -> ID DOT ID .)
    RPAREN          reduce using rule 124 (attr_access0 -> ID DOT ID .)
    COMMA           reduce using rule 124 (attr_access0 -> ID DOT ID .)
    LPAREN          reduce using rule 106 (id_funcCall -> ID .)


state 146

    (88) power0 -> ID LSQRBRACKET exp0 . RSQRBRACKET check_pow_rad_operator power1 power2

    RSQRBRACKET     shift and go to state 194


state 147

    (77) term0 -> power0 check_last_times_division_operator term1 .

    PLUS            reduce using rule 77 (term0 -> power0 check_last_times_division_operator term1 .)
    MINUS           reduce using rule 77 (term0 -> power0 check_last_times_division_operator term1 .)
    LTHAN           reduce using rule 77 (term0 -> power0 check_last_times_division_operator term1 .)
    GTHAN           reduce using rule 77 (term0 -> power0 check_last_times_division_operator term1 .)
    DIFFERENT       reduce using rule 77 (term0 -> power0 check_last_times_division_operator term1 .)
    EQUIVALENT      reduce using rule 77 (term0 -> power0 check_last_times_division_operator term1 .)
    SEMICOLON       reduce using rule 77 (term0 -> power0 check_last_times_division_operator term1 .)
    RSQRBRACKET     reduce using rule 77 (term0 -> power0 check_last_times_division_operator term1 .)
    RPAREN          reduce using rule 77 (term0 -> power0 check_last_times_division_operator term1 .)
    COMMA           reduce using rule 77 (term0 -> power0 check_last_times_division_operator term1 .)


state 148

    (78) term1 -> MULTIPLY . push_times_division_op term0
    (81) push_times_division_op -> .

    LPAREN          reduce using rule 81 (push_times_division_op -> .)
    ID              reduce using rule 81 (push_times_division_op -> .)
    CONST_INT       reduce using rule 81 (push_times_division_op -> .)
    CONST_FLOAT     reduce using rule 81 (push_times_division_op -> .)

    push_times_division_op         shift and go to state 195

state 149

    (79) term1 -> DIVIDE . push_times_division_op term0
    (81) push_times_division_op -> .

    LPAREN          reduce using rule 81 (push_times_division_op -> .)
    ID              reduce using rule 81 (push_times_division_op -> .)
    CONST_INT       reduce using rule 81 (push_times_division_op -> .)
    CONST_FLOAT     reduce using rule 81 (push_times_division_op -> .)

    push_times_division_op         shift and go to state 196

state 150

    (80) term1 -> empty .

    PLUS            reduce using rule 80 (term1 -> empty .)
    MINUS           reduce using rule 80 (term1 -> empty .)
    LTHAN           reduce using rule 80 (term1 -> empty .)
    GTHAN           reduce using rule 80 (term1 -> empty .)
    DIFFERENT       reduce using rule 80 (term1 -> empty .)
    EQUIVALENT      reduce using rule 80 (term1 -> empty .)
    SEMICOLON       reduce using rule 80 (term1 -> empty .)
    RSQRBRACKET     reduce using rule 80 (term1 -> empty .)
    RPAREN          reduce using rule 80 (term1 -> empty .)
    COMMA           reduce using rule 80 (term1 -> empty .)


state 151

    (83) power0 -> LPAREN open_paren exp0 . RPAREN close_paren check_pow_rad_operator power2

    RPAREN          shift and go to state 197


state 152

    (84) power0 -> const_var check_pow_rad_operator power2 .

    MULTIPLY        reduce using rule 84 (power0 -> const_var check_pow_rad_operator power2 .)
    DIVIDE          reduce using rule 84 (power0 -> const_var check_pow_rad_operator power2 .)
    PLUS            reduce using rule 84 (power0 -> const_var check_pow_rad_operator power2 .)
    MINUS           reduce using rule 84 (power0 -> const_var check_pow_rad_operator power2 .)
    LTHAN           reduce using rule 84 (power0 -> const_var check_pow_rad_operator power2 .)
    GTHAN           reduce using rule 84 (power0 -> const_var check_pow_rad_operator power2 .)
    DIFFERENT       reduce using rule 84 (power0 -> const_var check_pow_rad_operator power2 .)
    EQUIVALENT      reduce using rule 84 (power0 -> const_var check_pow_rad_operator power2 .)
    SEMICOLON       reduce using rule 84 (power0 -> const_var check_pow_rad_operator power2 .)
    RSQRBRACKET     reduce using rule 84 (power0 -> const_var check_pow_rad_operator power2 .)
    RPAREN          reduce using rule 84 (power0 -> const_var check_pow_rad_operator power2 .)
    COMMA           reduce using rule 84 (power0 -> const_var check_pow_rad_operator power2 .)


state 153

    (85) power0 -> function_call check_pow_rad_operator power2 .

    MULTIPLY        reduce using rule 85 (power0 -> function_call check_pow_rad_operator power2 .)
    DIVIDE          reduce using rule 85 (power0 -> function_call check_pow_rad_operator power2 .)
    PLUS            reduce using rule 85 (power0 -> function_call check_pow_rad_operator power2 .)
    MINUS           reduce using rule 85 (power0 -> function_call check_pow_rad_operator power2 .)
    LTHAN           reduce using rule 85 (power0 -> function_call check_pow_rad_operator power2 .)
    GTHAN           reduce using rule 85 (power0 -> function_call check_pow_rad_operator power2 .)
    DIFFERENT       reduce using rule 85 (power0 -> function_call check_pow_rad_operator power2 .)
    EQUIVALENT      reduce using rule 85 (power0 -> function_call check_pow_rad_operator power2 .)
    SEMICOLON       reduce using rule 85 (power0 -> function_call check_pow_rad_operator power2 .)
    RSQRBRACKET     reduce using rule 85 (power0 -> function_call check_pow_rad_operator power2 .)
    RPAREN          reduce using rule 85 (power0 -> function_call check_pow_rad_operator power2 .)
    COMMA           reduce using rule 85 (power0 -> function_call check_pow_rad_operator power2 .)


state 154

    (86) power0 -> method_call0 check_pow_rad_operator power2 .

    MULTIPLY        reduce using rule 86 (power0 -> method_call0 check_pow_rad_operator power2 .)
    DIVIDE          reduce using rule 86 (power0 -> method_call0 check_pow_rad_operator power2 .)
    PLUS            reduce using rule 86 (power0 -> method_call0 check_pow_rad_operator power2 .)
    MINUS           reduce using rule 86 (power0 -> method_call0 check_pow_rad_operator power2 .)
    LTHAN           reduce using rule 86 (power0 -> method_call0 check_pow_rad_operator power2 .)
    GTHAN           reduce using rule 86 (power0 -> method_call0 check_pow_rad_operator power2 .)
    DIFFERENT       reduce using rule 86 (power0 -> method_call0 check_pow_rad_operator power2 .)
    EQUIVALENT      reduce using rule 86 (power0 -> method_call0 check_pow_rad_operator power2 .)
    SEMICOLON       reduce using rule 86 (power0 -> method_call0 check_pow_rad_operator power2 .)
    RSQRBRACKET     reduce using rule 86 (power0 -> method_call0 check_pow_rad_operator power2 .)
    RPAREN          reduce using rule 86 (power0 -> method_call0 check_pow_rad_operator power2 .)
    COMMA           reduce using rule 86 (power0 -> method_call0 check_pow_rad_operator power2 .)


state 155

    (104) function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 . RPAREN

    RPAREN          shift and go to state 198


state 156

    (107) function_call_params0 -> expression0 . neurFuncCallParams1 function_call_params1
    (110) neurFuncCallParams1 -> .

    COMMA           reduce using rule 110 (neurFuncCallParams1 -> .)
    RPAREN          reduce using rule 110 (neurFuncCallParams1 -> .)

    neurFuncCallParams1            shift and go to state 199

state 157

    (108) function_call_params0 -> CONST_STRING . neurFuncCallParams1 function_call_params1
    (110) neurFuncCallParams1 -> .

    COMMA           reduce using rule 110 (neurFuncCallParams1 -> .)
    RPAREN          reduce using rule 110 (neurFuncCallParams1 -> .)

    neurFuncCallParams1            shift and go to state 200

state 158

    (109) function_call_params0 -> empty . function_call_params1
    (111) function_call_params1 -> . COMMA function_call_params0
    (112) function_call_params1 -> . empty
    (175) empty -> .

    COMMA           shift and go to state 203
    RPAREN          reduce using rule 175 (empty -> .)

    empty                          shift and go to state 201
    function_call_params1          shift and go to state 202

state 159

    (153) while -> WHILE wNeur1 LPAREN expression0 . RPAREN wNeur2 block0 wNeur3

    RPAREN          shift and go to state 204


state 160

    (169) object_assignment -> ID EQUALS NEW ID LPAREN . function_call_params0 RPAREN SEMICOLON
    (107) function_call_params0 -> . expression0 neurFuncCallParams1 function_call_params1
    (108) function_call_params0 -> . CONST_STRING neurFuncCallParams1 function_call_params1
    (109) function_call_params0 -> . empty function_call_params1
    (113) expression0 -> . exp0 expression1
    (114) expression0 -> . attr_access0 expression1
    (175) empty -> .
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (124) attr_access0 -> . ID DOT ID
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (106) id_funcCall -> . ID

    CONST_STRING    shift and go to state 157
    COMMA           reduce using rule 175 (empty -> .)
    RPAREN          reduce using rule 175 (empty -> .)
    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    function_call_params0          shift and go to state 205
    expression0                    shift and go to state 156
    empty                          shift and go to state 158
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 161

    (170) main0 -> MAIN main_scope LBRACKET main1 . RBRACKET

    RBRACKET        shift and go to state 206


state 162

    (171) main1 -> declaration0 . main1
    (171) main1 -> . declaration0 main1
    (172) main1 -> . statement main1
    (173) main1 -> . empty
    (29) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (160) statement -> . assignment0
    (161) statement -> . object_assignment
    (162) statement -> . condition0
    (163) statement -> . writing0
    (164) statement -> . reading
    (165) statement -> . return
    (166) statement -> . function_call SEMICOLON
    (167) statement -> . method_call0 SEMICOLON
    (168) statement -> . while
    (175) empty -> .
    (30) decl_id_def -> . ID
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON
    (169) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (136) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3
    (142) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (150) reading -> . READ ID SEMICOLON
    (151) return -> . RETURN expression0 SEMICOLON
    (152) return -> . RETURN SEMICOLON
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (153) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (49) assign_id_def -> . ID
    (106) id_funcCall -> . ID

    RBRACKET        reduce using rule 175 (empty -> .)
    ID              shift and go to state 166
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    declaration0                   shift and go to state 162
    main1                          shift and go to state 207
    statement                      shift and go to state 163
    empty                          shift and go to state 164
    decl_id_def                    shift and go to state 25
    assignment0                    shift and go to state 165
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 163

    (172) main1 -> statement . main1
    (171) main1 -> . declaration0 main1
    (172) main1 -> . statement main1
    (173) main1 -> . empty
    (29) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (160) statement -> . assignment0
    (161) statement -> . object_assignment
    (162) statement -> . condition0
    (163) statement -> . writing0
    (164) statement -> . reading
    (165) statement -> . return
    (166) statement -> . function_call SEMICOLON
    (167) statement -> . method_call0 SEMICOLON
    (168) statement -> . while
    (175) empty -> .
    (30) decl_id_def -> . ID
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON
    (169) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (136) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3
    (142) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (150) reading -> . READ ID SEMICOLON
    (151) return -> . RETURN expression0 SEMICOLON
    (152) return -> . RETURN SEMICOLON
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (153) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (49) assign_id_def -> . ID
    (106) id_funcCall -> . ID

    RBRACKET        reduce using rule 175 (empty -> .)
    ID              shift and go to state 166
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    statement                      shift and go to state 163
    main1                          shift and go to state 208
    declaration0                   shift and go to state 162
    empty                          shift and go to state 164
    decl_id_def                    shift and go to state 25
    assignment0                    shift and go to state 165
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 164

    (173) main1 -> empty .

    RBRACKET        reduce using rule 173 (main1 -> empty .)


state 165

    (160) statement -> assignment0 .

    ID              reduce using rule 160 (statement -> assignment0 .)
    IF              reduce using rule 160 (statement -> assignment0 .)
    WRITE           reduce using rule 160 (statement -> assignment0 .)
    READ            reduce using rule 160 (statement -> assignment0 .)
    RETURN          reduce using rule 160 (statement -> assignment0 .)
    WHILE           reduce using rule 160 (statement -> assignment0 .)
    RBRACKET        reduce using rule 160 (statement -> assignment0 .)


state 166

    (30) decl_id_def -> ID .
    (42) assignment0 -> ID . EQUALS expression0 SEMICOLON
    (169) object_assignment -> ID . EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (125) method_call0 -> ID . DOT function_call
    (49) assign_id_def -> ID .
    (106) id_funcCall -> ID .

    COLON           reduce using rule 30 (decl_id_def -> ID .)
    EQUALS          shift and go to state 33
    DOT             shift and go to state 34
    LSQRBRACKET     reduce using rule 49 (assign_id_def -> ID .)
    LPAREN          reduce using rule 106 (id_funcCall -> ID .)


state 167

    (10) class0 -> CLASS class_id_def class1 LBRACKET class2 . constructor class3 RBRACKET SEMICOLON revert_global
    (51) constructor -> . CONSTRUCT ID LPAREN params0 RPAREN function_block0

    CONSTRUCT       shift and go to state 210

    constructor                    shift and go to state 209

state 168

    (17) class2 -> attributes .

    CONSTRUCT       reduce using rule 17 (class2 -> attributes .)


state 169

    (18) class2 -> empty .
    (54) attributes -> empty .

  ! reduce/reduce conflict for CONSTRUCT resolved using rule 18 (class2 -> empty .)
    CONSTRUCT       reduce using rule 18 (class2 -> empty .)

  ! CONSTRUCT       [ reduce using rule 54 (attributes -> empty .) ]


state 170

    (52) attributes -> data_access . simple_declaration attributes
    (68) simple_declaration -> . decl_id_def COLON type simpleMemoryNeur SEMICOLON
    (30) decl_id_def -> . ID

    ID              shift and go to state 213

    simple_declaration             shift and go to state 211
    decl_id_def                    shift and go to state 212

state 171

    (53) attributes -> simple_assignment . attributes
    (52) attributes -> . data_access simple_declaration attributes
    (53) attributes -> . simple_assignment attributes
    (54) attributes -> . empty
    (126) data_access -> . PRIVATE
    (127) data_access -> . PUBLIC
    (69) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (175) empty -> .

    PRIVATE         shift and go to state 172
    PUBLIC          shift and go to state 173
    ID              shift and go to state 174
    CONSTRUCT       reduce using rule 175 (empty -> .)

    simple_assignment              shift and go to state 171
    attributes                     shift and go to state 214
    data_access                    shift and go to state 170
    empty                          shift and go to state 215

state 172

    (126) data_access -> PRIVATE .

    ID              reduce using rule 126 (data_access -> PRIVATE .)
    DEF             reduce using rule 126 (data_access -> PRIVATE .)


state 173

    (127) data_access -> PUBLIC .

    ID              reduce using rule 127 (data_access -> PUBLIC .)
    DEF             reduce using rule 127 (data_access -> PUBLIC .)


state 174

    (69) simple_assignment -> ID . EQUALS expression0 SEMICOLON

    EQUALS          shift and go to state 216


state 175

    (21) function0 -> DEF id_def LPAREN params0 RPAREN . endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (22) endParamNeur -> .

    ARROW           reduce using rule 22 (endParamNeur -> .)

    endParamNeur                   shift and go to state 217

state 176

    (57) params0 -> type ID . paramsNeur params1
    (59) paramsNeur -> .

    COMMA           reduce using rule 59 (paramsNeur -> .)
    RPAREN          reduce using rule 59 (paramsNeur -> .)

    paramsNeur                     shift and go to state 218

state 177

    (33) declaration1 -> type isArrayNeur LSQRBRACKET . exp0 limitNeur RSQRBRACKET declaration2 neurMemory
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (124) attr_access0 -> . ID DOT ID
    (106) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 87
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 219
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 86
    id_funcCall                    shift and go to state 31

state 178

    (43) assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS . expression0 SEMICOLON
    (113) expression0 -> . exp0 expression1
    (114) expression0 -> . attr_access0 expression1
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (124) attr_access0 -> . ID DOT ID
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (106) id_funcCall -> . ID

    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 56
    expression0                    shift and go to state 220
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 179

    (44) assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET . exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (124) attr_access0 -> . ID DOT ID
    (106) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 87
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 221
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 86
    id_funcCall                    shift and go to state 31

state 180

    (136) condition0 -> IF LPAREN expression0 condNeur1 RPAREN . block0 condition1 condNeur3
    (157) block0 -> . LBRACKET block1 RBRACKET

    LBRACKET        shift and go to state 223

    block0                         shift and go to state 222

state 181

    (142) writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 224


state 182

    (145) writing1 -> expression0 push_writing_val . writing2
    (148) writing2 -> . COMMA push_writing_op writing1
    (149) writing2 -> . empty
    (175) empty -> .

    COMMA           shift and go to state 226
    RPAREN          reduce using rule 175 (empty -> .)

    writing2                       shift and go to state 225
    empty                          shift and go to state 227

state 183

    (146) writing1 -> CONST_STRING push_string_val . push_writing_val writing2
    (147) push_writing_val -> .

    COMMA           reduce using rule 147 (push_writing_val -> .)
    RPAREN          reduce using rule 147 (push_writing_val -> .)

    push_writing_val               shift and go to state 228

state 184

    (115) expression1 -> LTHAN push_rel_op expression3 .

    SEMICOLON       reduce using rule 115 (expression1 -> LTHAN push_rel_op expression3 .)
    RPAREN          reduce using rule 115 (expression1 -> LTHAN push_rel_op expression3 .)
    COMMA           reduce using rule 115 (expression1 -> LTHAN push_rel_op expression3 .)


state 185

    (122) expression3 -> exp0 . check_rel_operator
    (121) check_rel_operator -> .

    SEMICOLON       reduce using rule 121 (check_rel_operator -> .)
    RPAREN          reduce using rule 121 (check_rel_operator -> .)
    COMMA           reduce using rule 121 (check_rel_operator -> .)

    check_rel_operator             shift and go to state 229

state 186

    (123) expression3 -> attr_access0 .
    (87) power0 -> attr_access0 . check_pow_rad_operator power2
    (97) check_pow_rad_operator -> .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 97 (check_pow_rad_operator -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 97 (check_pow_rad_operator -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 97 (check_pow_rad_operator -> .)
    POWER           reduce using rule 97 (check_pow_rad_operator -> .)
    SQRT            reduce using rule 97 (check_pow_rad_operator -> .)
    MULTIPLY        reduce using rule 97 (check_pow_rad_operator -> .)
    DIVIDE          reduce using rule 97 (check_pow_rad_operator -> .)
    PLUS            reduce using rule 97 (check_pow_rad_operator -> .)
    MINUS           reduce using rule 97 (check_pow_rad_operator -> .)
    SEMICOLON       reduce using rule 97 (check_pow_rad_operator -> .)
    RPAREN          reduce using rule 97 (check_pow_rad_operator -> .)
    COMMA           reduce using rule 97 (check_pow_rad_operator -> .)

  ! SEMICOLON       [ reduce using rule 123 (expression3 -> attr_access0 .) ]
  ! RPAREN          [ reduce using rule 123 (expression3 -> attr_access0 .) ]
  ! COMMA           [ reduce using rule 123 (expression3 -> attr_access0 .) ]

    check_pow_rad_operator         shift and go to state 99

state 187

    (116) expression1 -> GTHAN push_rel_op expression3 .

    SEMICOLON       reduce using rule 116 (expression1 -> GTHAN push_rel_op expression3 .)
    RPAREN          reduce using rule 116 (expression1 -> GTHAN push_rel_op expression3 .)
    COMMA           reduce using rule 116 (expression1 -> GTHAN push_rel_op expression3 .)


state 188

    (117) expression1 -> DIFFERENT push_rel_op expression3 .

    SEMICOLON       reduce using rule 117 (expression1 -> DIFFERENT push_rel_op expression3 .)
    RPAREN          reduce using rule 117 (expression1 -> DIFFERENT push_rel_op expression3 .)
    COMMA           reduce using rule 117 (expression1 -> DIFFERENT push_rel_op expression3 .)


state 189

    (118) expression1 -> EQUIVALENT push_rel_op expression3 .

    SEMICOLON       reduce using rule 118 (expression1 -> EQUIVALENT push_rel_op expression3 .)
    RPAREN          reduce using rule 118 (expression1 -> EQUIVALENT push_rel_op expression3 .)
    COMMA           reduce using rule 118 (expression1 -> EQUIVALENT push_rel_op expression3 .)


state 190

    (93) power2 -> POWER push_pow_rad_op . power0
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (124) attr_access0 -> . ID DOT ID
    (106) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 87
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    power0                         shift and go to state 230
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 86
    id_funcCall                    shift and go to state 31

state 191

    (94) power2 -> SQRT push_pow_rad_op . power0
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (124) attr_access0 -> . ID DOT ID
    (106) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 87
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    power0                         shift and go to state 231
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 86
    id_funcCall                    shift and go to state 31

state 192

    (72) exp1 -> PLUS push_plus_minus_op . exp0
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (124) attr_access0 -> . ID DOT ID
    (106) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 87
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 232
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 86
    id_funcCall                    shift and go to state 31

state 193

    (73) exp1 -> MINUS push_plus_minus_op . exp0
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (124) attr_access0 -> . ID DOT ID
    (106) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 87
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 233
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 86
    id_funcCall                    shift and go to state 31

state 194

    (88) power0 -> ID LSQRBRACKET exp0 RSQRBRACKET . check_pow_rad_operator power1 power2
    (97) check_pow_rad_operator -> .

    LSQRBRACKET     reduce using rule 97 (check_pow_rad_operator -> .)
    POWER           reduce using rule 97 (check_pow_rad_operator -> .)
    SQRT            reduce using rule 97 (check_pow_rad_operator -> .)
    MULTIPLY        reduce using rule 97 (check_pow_rad_operator -> .)
    DIVIDE          reduce using rule 97 (check_pow_rad_operator -> .)
    PLUS            reduce using rule 97 (check_pow_rad_operator -> .)
    MINUS           reduce using rule 97 (check_pow_rad_operator -> .)
    LTHAN           reduce using rule 97 (check_pow_rad_operator -> .)
    GTHAN           reduce using rule 97 (check_pow_rad_operator -> .)
    DIFFERENT       reduce using rule 97 (check_pow_rad_operator -> .)
    EQUIVALENT      reduce using rule 97 (check_pow_rad_operator -> .)
    SEMICOLON       reduce using rule 97 (check_pow_rad_operator -> .)
    RSQRBRACKET     reduce using rule 97 (check_pow_rad_operator -> .)
    RPAREN          reduce using rule 97 (check_pow_rad_operator -> .)
    COMMA           reduce using rule 97 (check_pow_rad_operator -> .)

    check_pow_rad_operator         shift and go to state 234

state 195

    (78) term1 -> MULTIPLY push_times_division_op . term0
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (124) attr_access0 -> . ID DOT ID
    (106) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 87
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    term0                          shift and go to state 235
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 86
    id_funcCall                    shift and go to state 31

state 196

    (79) term1 -> DIVIDE push_times_division_op . term0
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (124) attr_access0 -> . ID DOT ID
    (106) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 87
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    term0                          shift and go to state 236
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 86
    id_funcCall                    shift and go to state 31

state 197

    (83) power0 -> LPAREN open_paren exp0 RPAREN . close_paren check_pow_rad_operator power2
    (90) close_paren -> .

    POWER           reduce using rule 90 (close_paren -> .)
    SQRT            reduce using rule 90 (close_paren -> .)
    MULTIPLY        reduce using rule 90 (close_paren -> .)
    DIVIDE          reduce using rule 90 (close_paren -> .)
    PLUS            reduce using rule 90 (close_paren -> .)
    MINUS           reduce using rule 90 (close_paren -> .)
    LTHAN           reduce using rule 90 (close_paren -> .)
    GTHAN           reduce using rule 90 (close_paren -> .)
    DIFFERENT       reduce using rule 90 (close_paren -> .)
    EQUIVALENT      reduce using rule 90 (close_paren -> .)
    SEMICOLON       reduce using rule 90 (close_paren -> .)
    RSQRBRACKET     reduce using rule 90 (close_paren -> .)
    RPAREN          reduce using rule 90 (close_paren -> .)
    COMMA           reduce using rule 90 (close_paren -> .)

    close_paren                    shift and go to state 237

state 198

    (104) function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .

    SEMICOLON       reduce using rule 104 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    POWER           reduce using rule 104 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    SQRT            reduce using rule 104 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    MULTIPLY        reduce using rule 104 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    DIVIDE          reduce using rule 104 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    PLUS            reduce using rule 104 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    MINUS           reduce using rule 104 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    LTHAN           reduce using rule 104 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    GTHAN           reduce using rule 104 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    DIFFERENT       reduce using rule 104 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    EQUIVALENT      reduce using rule 104 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    RSQRBRACKET     reduce using rule 104 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    RPAREN          reduce using rule 104 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)
    COMMA           reduce using rule 104 (function_call -> id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN .)


state 199

    (107) function_call_params0 -> expression0 neurFuncCallParams1 . function_call_params1
    (111) function_call_params1 -> . COMMA function_call_params0
    (112) function_call_params1 -> . empty
    (175) empty -> .

    COMMA           shift and go to state 203
    RPAREN          reduce using rule 175 (empty -> .)

    function_call_params1          shift and go to state 238
    empty                          shift and go to state 201

state 200

    (108) function_call_params0 -> CONST_STRING neurFuncCallParams1 . function_call_params1
    (111) function_call_params1 -> . COMMA function_call_params0
    (112) function_call_params1 -> . empty
    (175) empty -> .

    COMMA           shift and go to state 203
    RPAREN          reduce using rule 175 (empty -> .)

    function_call_params1          shift and go to state 239
    empty                          shift and go to state 201

state 201

    (112) function_call_params1 -> empty .

    RPAREN          reduce using rule 112 (function_call_params1 -> empty .)


state 202

    (109) function_call_params0 -> empty function_call_params1 .

    RPAREN          reduce using rule 109 (function_call_params0 -> empty function_call_params1 .)


state 203

    (111) function_call_params1 -> COMMA . function_call_params0
    (107) function_call_params0 -> . expression0 neurFuncCallParams1 function_call_params1
    (108) function_call_params0 -> . CONST_STRING neurFuncCallParams1 function_call_params1
    (109) function_call_params0 -> . empty function_call_params1
    (113) expression0 -> . exp0 expression1
    (114) expression0 -> . attr_access0 expression1
    (175) empty -> .
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (124) attr_access0 -> . ID DOT ID
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (106) id_funcCall -> . ID

    CONST_STRING    shift and go to state 157
    COMMA           reduce using rule 175 (empty -> .)
    RPAREN          reduce using rule 175 (empty -> .)
    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    function_call_params0          shift and go to state 240
    expression0                    shift and go to state 156
    empty                          shift and go to state 158
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 204

    (153) while -> WHILE wNeur1 LPAREN expression0 RPAREN . wNeur2 block0 wNeur3
    (155) wNeur2 -> .

    LBRACKET        reduce using rule 155 (wNeur2 -> .)

    wNeur2                         shift and go to state 241

state 205

    (169) object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 . RPAREN SEMICOLON

    RPAREN          shift and go to state 242


state 206

    (170) main0 -> MAIN main_scope LBRACKET main1 RBRACKET .

    $end            reduce using rule 170 (main0 -> MAIN main_scope LBRACKET main1 RBRACKET .)


state 207

    (171) main1 -> declaration0 main1 .

    RBRACKET        reduce using rule 171 (main1 -> declaration0 main1 .)


state 208

    (172) main1 -> statement main1 .

    RBRACKET        reduce using rule 172 (main1 -> statement main1 .)


state 209

    (10) class0 -> CLASS class_id_def class1 LBRACKET class2 constructor . class3 RBRACKET SEMICOLON revert_global
    (19) class3 -> . methods
    (20) class3 -> . empty
    (55) methods -> . data_access function0 methods
    (56) methods -> . empty
    (175) empty -> .
    (126) data_access -> . PRIVATE
    (127) data_access -> . PUBLIC

    RBRACKET        reduce using rule 175 (empty -> .)
    PRIVATE         shift and go to state 172
    PUBLIC          shift and go to state 173

    class3                         shift and go to state 243
    methods                        shift and go to state 244
    empty                          shift and go to state 245
    data_access                    shift and go to state 246

state 210

    (51) constructor -> CONSTRUCT . ID LPAREN params0 RPAREN function_block0

    ID              shift and go to state 247


state 211

    (52) attributes -> data_access simple_declaration . attributes
    (52) attributes -> . data_access simple_declaration attributes
    (53) attributes -> . simple_assignment attributes
    (54) attributes -> . empty
    (126) data_access -> . PRIVATE
    (127) data_access -> . PUBLIC
    (69) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (175) empty -> .

    PRIVATE         shift and go to state 172
    PUBLIC          shift and go to state 173
    ID              shift and go to state 174
    CONSTRUCT       reduce using rule 175 (empty -> .)

    data_access                    shift and go to state 170
    attributes                     shift and go to state 248
    simple_assignment              shift and go to state 171
    empty                          shift and go to state 215

state 212

    (68) simple_declaration -> decl_id_def . COLON type simpleMemoryNeur SEMICOLON

    COLON           shift and go to state 249


state 213

    (30) decl_id_def -> ID .

    COLON           reduce using rule 30 (decl_id_def -> ID .)


state 214

    (53) attributes -> simple_assignment attributes .

    CONSTRUCT       reduce using rule 53 (attributes -> simple_assignment attributes .)


state 215

    (54) attributes -> empty .

    CONSTRUCT       reduce using rule 54 (attributes -> empty .)


state 216

    (69) simple_assignment -> ID EQUALS . expression0 SEMICOLON
    (113) expression0 -> . exp0 expression1
    (114) expression0 -> . attr_access0 expression1
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (124) attr_access0 -> . ID DOT ID
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (106) id_funcCall -> . ID

    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    expression0                    shift and go to state 250
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 217

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur . ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope

    ARROW           shift and go to state 251


state 218

    (57) params0 -> type ID paramsNeur . params1
    (60) params1 -> . COMMA params0
    (61) params1 -> . empty
    (175) empty -> .

    COMMA           shift and go to state 253
    RPAREN          reduce using rule 175 (empty -> .)

    params1                        shift and go to state 252
    empty                          shift and go to state 254

state 219

    (33) declaration1 -> type isArrayNeur LSQRBRACKET exp0 . limitNeur RSQRBRACKET declaration2 neurMemory
    (34) limitNeur -> .

    RSQRBRACKET     reduce using rule 34 (limitNeur -> .)

    limitNeur                      shift and go to state 255

state 220

    (43) assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 . SEMICOLON

    SEMICOLON       shift and go to state 256


state 221

    (44) assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 . RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON

    RSQRBRACKET     shift and go to state 257


state 222

    (136) condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 . condition1 condNeur3
    (139) condition1 -> . ELSE condNeur2 block0
    (140) condition1 -> . empty
    (175) empty -> .

    ELSE            shift and go to state 259
    CLASS           reduce using rule 175 (empty -> .)
    DEF             reduce using rule 175 (empty -> .)
    ID              reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    WRITE           reduce using rule 175 (empty -> .)
    READ            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    MAIN            reduce using rule 175 (empty -> .)
    RBRACKET        reduce using rule 175 (empty -> .)

    condition1                     shift and go to state 258
    empty                          shift and go to state 260

state 223

    (157) block0 -> LBRACKET . block1 RBRACKET
    (158) block1 -> . statement block1
    (159) block1 -> . empty
    (160) statement -> . assignment0
    (161) statement -> . object_assignment
    (162) statement -> . condition0
    (163) statement -> . writing0
    (164) statement -> . reading
    (165) statement -> . return
    (166) statement -> . function_call SEMICOLON
    (167) statement -> . method_call0 SEMICOLON
    (168) statement -> . while
    (175) empty -> .
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON
    (169) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (136) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3
    (142) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (150) reading -> . READ ID SEMICOLON
    (151) return -> . RETURN expression0 SEMICOLON
    (152) return -> . RETURN SEMICOLON
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (153) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (49) assign_id_def -> . ID
    (106) id_funcCall -> . ID

    RBRACKET        reduce using rule 175 (empty -> .)
    ID              shift and go to state 264
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    block1                         shift and go to state 261
    statement                      shift and go to state 262
    empty                          shift and go to state 263
    assignment0                    shift and go to state 165
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 224

    (142) writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .

    CLASS           reduce using rule 142 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)
    DEF             reduce using rule 142 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)
    ID              reduce using rule 142 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)
    IF              reduce using rule 142 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)
    WRITE           reduce using rule 142 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)
    READ            reduce using rule 142 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)
    RETURN          reduce using rule 142 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)
    WHILE           reduce using rule 142 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)
    MAIN            reduce using rule 142 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 142 (writing0 -> WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON .)


state 225

    (145) writing1 -> expression0 push_writing_val writing2 .

    RPAREN          reduce using rule 145 (writing1 -> expression0 push_writing_val writing2 .)


state 226

    (148) writing2 -> COMMA . push_writing_op writing1
    (143) push_writing_op -> .

    CONST_STRING    reduce using rule 143 (push_writing_op -> .)
    ID              reduce using rule 143 (push_writing_op -> .)
    LPAREN          reduce using rule 143 (push_writing_op -> .)
    CONST_INT       reduce using rule 143 (push_writing_op -> .)
    CONST_FLOAT     reduce using rule 143 (push_writing_op -> .)

    push_writing_op                shift and go to state 265

state 227

    (149) writing2 -> empty .

    RPAREN          reduce using rule 149 (writing2 -> empty .)


state 228

    (146) writing1 -> CONST_STRING push_string_val push_writing_val . writing2
    (148) writing2 -> . COMMA push_writing_op writing1
    (149) writing2 -> . empty
    (175) empty -> .

    COMMA           shift and go to state 226
    RPAREN          reduce using rule 175 (empty -> .)

    writing2                       shift and go to state 266
    empty                          shift and go to state 227

state 229

    (122) expression3 -> exp0 check_rel_operator .

    SEMICOLON       reduce using rule 122 (expression3 -> exp0 check_rel_operator .)
    RPAREN          reduce using rule 122 (expression3 -> exp0 check_rel_operator .)
    COMMA           reduce using rule 122 (expression3 -> exp0 check_rel_operator .)


state 230

    (93) power2 -> POWER push_pow_rad_op power0 .

    MULTIPLY        reduce using rule 93 (power2 -> POWER push_pow_rad_op power0 .)
    DIVIDE          reduce using rule 93 (power2 -> POWER push_pow_rad_op power0 .)
    PLUS            reduce using rule 93 (power2 -> POWER push_pow_rad_op power0 .)
    MINUS           reduce using rule 93 (power2 -> POWER push_pow_rad_op power0 .)
    LTHAN           reduce using rule 93 (power2 -> POWER push_pow_rad_op power0 .)
    GTHAN           reduce using rule 93 (power2 -> POWER push_pow_rad_op power0 .)
    DIFFERENT       reduce using rule 93 (power2 -> POWER push_pow_rad_op power0 .)
    EQUIVALENT      reduce using rule 93 (power2 -> POWER push_pow_rad_op power0 .)
    SEMICOLON       reduce using rule 93 (power2 -> POWER push_pow_rad_op power0 .)
    RSQRBRACKET     reduce using rule 93 (power2 -> POWER push_pow_rad_op power0 .)
    RPAREN          reduce using rule 93 (power2 -> POWER push_pow_rad_op power0 .)
    COMMA           reduce using rule 93 (power2 -> POWER push_pow_rad_op power0 .)


state 231

    (94) power2 -> SQRT push_pow_rad_op power0 .

    MULTIPLY        reduce using rule 94 (power2 -> SQRT push_pow_rad_op power0 .)
    DIVIDE          reduce using rule 94 (power2 -> SQRT push_pow_rad_op power0 .)
    PLUS            reduce using rule 94 (power2 -> SQRT push_pow_rad_op power0 .)
    MINUS           reduce using rule 94 (power2 -> SQRT push_pow_rad_op power0 .)
    LTHAN           reduce using rule 94 (power2 -> SQRT push_pow_rad_op power0 .)
    GTHAN           reduce using rule 94 (power2 -> SQRT push_pow_rad_op power0 .)
    DIFFERENT       reduce using rule 94 (power2 -> SQRT push_pow_rad_op power0 .)
    EQUIVALENT      reduce using rule 94 (power2 -> SQRT push_pow_rad_op power0 .)
    SEMICOLON       reduce using rule 94 (power2 -> SQRT push_pow_rad_op power0 .)
    RSQRBRACKET     reduce using rule 94 (power2 -> SQRT push_pow_rad_op power0 .)
    RPAREN          reduce using rule 94 (power2 -> SQRT push_pow_rad_op power0 .)
    COMMA           reduce using rule 94 (power2 -> SQRT push_pow_rad_op power0 .)


state 232

    (72) exp1 -> PLUS push_plus_minus_op exp0 .

    LTHAN           reduce using rule 72 (exp1 -> PLUS push_plus_minus_op exp0 .)
    GTHAN           reduce using rule 72 (exp1 -> PLUS push_plus_minus_op exp0 .)
    DIFFERENT       reduce using rule 72 (exp1 -> PLUS push_plus_minus_op exp0 .)
    EQUIVALENT      reduce using rule 72 (exp1 -> PLUS push_plus_minus_op exp0 .)
    SEMICOLON       reduce using rule 72 (exp1 -> PLUS push_plus_minus_op exp0 .)
    RSQRBRACKET     reduce using rule 72 (exp1 -> PLUS push_plus_minus_op exp0 .)
    RPAREN          reduce using rule 72 (exp1 -> PLUS push_plus_minus_op exp0 .)
    COMMA           reduce using rule 72 (exp1 -> PLUS push_plus_minus_op exp0 .)


state 233

    (73) exp1 -> MINUS push_plus_minus_op exp0 .

    LTHAN           reduce using rule 73 (exp1 -> MINUS push_plus_minus_op exp0 .)
    GTHAN           reduce using rule 73 (exp1 -> MINUS push_plus_minus_op exp0 .)
    DIFFERENT       reduce using rule 73 (exp1 -> MINUS push_plus_minus_op exp0 .)
    EQUIVALENT      reduce using rule 73 (exp1 -> MINUS push_plus_minus_op exp0 .)
    SEMICOLON       reduce using rule 73 (exp1 -> MINUS push_plus_minus_op exp0 .)
    RSQRBRACKET     reduce using rule 73 (exp1 -> MINUS push_plus_minus_op exp0 .)
    RPAREN          reduce using rule 73 (exp1 -> MINUS push_plus_minus_op exp0 .)
    COMMA           reduce using rule 73 (exp1 -> MINUS push_plus_minus_op exp0 .)


state 234

    (88) power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator . power1 power2
    (91) power1 -> . LSQRBRACKET exp0 RSQRBRACKET
    (92) power1 -> . empty
    (175) empty -> .

    LSQRBRACKET     shift and go to state 267
    POWER           reduce using rule 175 (empty -> .)
    SQRT            reduce using rule 175 (empty -> .)
    MULTIPLY        reduce using rule 175 (empty -> .)
    DIVIDE          reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    LTHAN           reduce using rule 175 (empty -> .)
    GTHAN           reduce using rule 175 (empty -> .)
    DIFFERENT       reduce using rule 175 (empty -> .)
    EQUIVALENT      reduce using rule 175 (empty -> .)
    SEMICOLON       reduce using rule 175 (empty -> .)
    RSQRBRACKET     reduce using rule 175 (empty -> .)
    RPAREN          reduce using rule 175 (empty -> .)
    COMMA           reduce using rule 175 (empty -> .)

    power1                         shift and go to state 268
    empty                          shift and go to state 269

state 235

    (78) term1 -> MULTIPLY push_times_division_op term0 .

    PLUS            reduce using rule 78 (term1 -> MULTIPLY push_times_division_op term0 .)
    MINUS           reduce using rule 78 (term1 -> MULTIPLY push_times_division_op term0 .)
    LTHAN           reduce using rule 78 (term1 -> MULTIPLY push_times_division_op term0 .)
    GTHAN           reduce using rule 78 (term1 -> MULTIPLY push_times_division_op term0 .)
    DIFFERENT       reduce using rule 78 (term1 -> MULTIPLY push_times_division_op term0 .)
    EQUIVALENT      reduce using rule 78 (term1 -> MULTIPLY push_times_division_op term0 .)
    SEMICOLON       reduce using rule 78 (term1 -> MULTIPLY push_times_division_op term0 .)
    RSQRBRACKET     reduce using rule 78 (term1 -> MULTIPLY push_times_division_op term0 .)
    RPAREN          reduce using rule 78 (term1 -> MULTIPLY push_times_division_op term0 .)
    COMMA           reduce using rule 78 (term1 -> MULTIPLY push_times_division_op term0 .)


state 236

    (79) term1 -> DIVIDE push_times_division_op term0 .

    PLUS            reduce using rule 79 (term1 -> DIVIDE push_times_division_op term0 .)
    MINUS           reduce using rule 79 (term1 -> DIVIDE push_times_division_op term0 .)
    LTHAN           reduce using rule 79 (term1 -> DIVIDE push_times_division_op term0 .)
    GTHAN           reduce using rule 79 (term1 -> DIVIDE push_times_division_op term0 .)
    DIFFERENT       reduce using rule 79 (term1 -> DIVIDE push_times_division_op term0 .)
    EQUIVALENT      reduce using rule 79 (term1 -> DIVIDE push_times_division_op term0 .)
    SEMICOLON       reduce using rule 79 (term1 -> DIVIDE push_times_division_op term0 .)
    RSQRBRACKET     reduce using rule 79 (term1 -> DIVIDE push_times_division_op term0 .)
    RPAREN          reduce using rule 79 (term1 -> DIVIDE push_times_division_op term0 .)
    COMMA           reduce using rule 79 (term1 -> DIVIDE push_times_division_op term0 .)


state 237

    (83) power0 -> LPAREN open_paren exp0 RPAREN close_paren . check_pow_rad_operator power2
    (97) check_pow_rad_operator -> .

    POWER           reduce using rule 97 (check_pow_rad_operator -> .)
    SQRT            reduce using rule 97 (check_pow_rad_operator -> .)
    MULTIPLY        reduce using rule 97 (check_pow_rad_operator -> .)
    DIVIDE          reduce using rule 97 (check_pow_rad_operator -> .)
    PLUS            reduce using rule 97 (check_pow_rad_operator -> .)
    MINUS           reduce using rule 97 (check_pow_rad_operator -> .)
    LTHAN           reduce using rule 97 (check_pow_rad_operator -> .)
    GTHAN           reduce using rule 97 (check_pow_rad_operator -> .)
    DIFFERENT       reduce using rule 97 (check_pow_rad_operator -> .)
    EQUIVALENT      reduce using rule 97 (check_pow_rad_operator -> .)
    SEMICOLON       reduce using rule 97 (check_pow_rad_operator -> .)
    RSQRBRACKET     reduce using rule 97 (check_pow_rad_operator -> .)
    RPAREN          reduce using rule 97 (check_pow_rad_operator -> .)
    COMMA           reduce using rule 97 (check_pow_rad_operator -> .)

    check_pow_rad_operator         shift and go to state 270

state 238

    (107) function_call_params0 -> expression0 neurFuncCallParams1 function_call_params1 .

    RPAREN          reduce using rule 107 (function_call_params0 -> expression0 neurFuncCallParams1 function_call_params1 .)


state 239

    (108) function_call_params0 -> CONST_STRING neurFuncCallParams1 function_call_params1 .

    RPAREN          reduce using rule 108 (function_call_params0 -> CONST_STRING neurFuncCallParams1 function_call_params1 .)


state 240

    (111) function_call_params1 -> COMMA function_call_params0 .

    RPAREN          reduce using rule 111 (function_call_params1 -> COMMA function_call_params0 .)


state 241

    (153) while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 . block0 wNeur3
    (157) block0 -> . LBRACKET block1 RBRACKET

    LBRACKET        shift and go to state 223

    block0                         shift and go to state 271

state 242

    (169) object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 272


state 243

    (10) class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 . RBRACKET SEMICOLON revert_global

    RBRACKET        shift and go to state 273


state 244

    (19) class3 -> methods .

    RBRACKET        reduce using rule 19 (class3 -> methods .)


state 245

    (20) class3 -> empty .
    (56) methods -> empty .

  ! reduce/reduce conflict for RBRACKET resolved using rule 20 (class3 -> empty .)
    RBRACKET        reduce using rule 20 (class3 -> empty .)

  ! RBRACKET        [ reduce using rule 56 (methods -> empty .) ]


state 246

    (55) methods -> data_access . function0 methods
    (21) function0 -> . DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope

    DEF             shift and go to state 24

    function0                      shift and go to state 274

state 247

    (51) constructor -> CONSTRUCT ID . LPAREN params0 RPAREN function_block0

    LPAREN          shift and go to state 275


state 248

    (52) attributes -> data_access simple_declaration attributes .

    CONSTRUCT       reduce using rule 52 (attributes -> data_access simple_declaration attributes .)


state 249

    (68) simple_declaration -> decl_id_def COLON . type simpleMemoryNeur SEMICOLON
    (65) type -> . INT
    (66) type -> . FLOAT
    (67) type -> . STRING

    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    STRING          shift and go to state 83

    type                           shift and go to state 276

state 250

    (69) simple_assignment -> ID EQUALS expression0 . SEMICOLON

    SEMICOLON       shift and go to state 277


state 251

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW . function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (24) function1 -> . type
    (25) function1 -> . VOID
    (65) type -> . INT
    (66) type -> . FLOAT
    (67) type -> . STRING

    VOID            shift and go to state 280
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    STRING          shift and go to state 83

    function1                      shift and go to state 278
    type                           shift and go to state 279

state 252

    (57) params0 -> type ID paramsNeur params1 .

    RPAREN          reduce using rule 57 (params0 -> type ID paramsNeur params1 .)


state 253

    (60) params1 -> COMMA . params0
    (57) params0 -> . type ID paramsNeur params1
    (58) params0 -> . empty
    (65) type -> . INT
    (66) type -> . FLOAT
    (67) type -> . STRING
    (175) empty -> .

    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    STRING          shift and go to state 83
    RPAREN          reduce using rule 175 (empty -> .)

    params0                        shift and go to state 281
    type                           shift and go to state 119
    empty                          shift and go to state 120

state 254

    (61) params1 -> empty .

    RPAREN          reduce using rule 61 (params1 -> empty .)


state 255

    (33) declaration1 -> type isArrayNeur LSQRBRACKET exp0 limitNeur . RSQRBRACKET declaration2 neurMemory

    RSQRBRACKET     shift and go to state 282


state 256

    (43) assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON .

    CLASS           reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON .)
    DEF             reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON .)
    ID              reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON .)
    IF              reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON .)
    WRITE           reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON .)
    READ            reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON .)
    RETURN          reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON .)
    WHILE           reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON .)
    MAIN            reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON .)
    RBRACKET        reduce using rule 43 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON .)


state 257

    (44) assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET . arrAccdim2 EQUALS expression0 SEMICOLON
    (45) arrAccdim2 -> .

    EQUALS          reduce using rule 45 (arrAccdim2 -> .)

    arrAccdim2                     shift and go to state 283

state 258

    (136) condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 . condNeur3
    (138) condNeur3 -> .

    CLASS           reduce using rule 138 (condNeur3 -> .)
    DEF             reduce using rule 138 (condNeur3 -> .)
    ID              reduce using rule 138 (condNeur3 -> .)
    IF              reduce using rule 138 (condNeur3 -> .)
    WRITE           reduce using rule 138 (condNeur3 -> .)
    READ            reduce using rule 138 (condNeur3 -> .)
    RETURN          reduce using rule 138 (condNeur3 -> .)
    WHILE           reduce using rule 138 (condNeur3 -> .)
    MAIN            reduce using rule 138 (condNeur3 -> .)
    RBRACKET        reduce using rule 138 (condNeur3 -> .)

    condNeur3                      shift and go to state 284

state 259

    (139) condition1 -> ELSE . condNeur2 block0
    (141) condNeur2 -> .

    LBRACKET        reduce using rule 141 (condNeur2 -> .)

    condNeur2                      shift and go to state 285

state 260

    (140) condition1 -> empty .

    CLASS           reduce using rule 140 (condition1 -> empty .)
    DEF             reduce using rule 140 (condition1 -> empty .)
    ID              reduce using rule 140 (condition1 -> empty .)
    IF              reduce using rule 140 (condition1 -> empty .)
    WRITE           reduce using rule 140 (condition1 -> empty .)
    READ            reduce using rule 140 (condition1 -> empty .)
    RETURN          reduce using rule 140 (condition1 -> empty .)
    WHILE           reduce using rule 140 (condition1 -> empty .)
    MAIN            reduce using rule 140 (condition1 -> empty .)
    RBRACKET        reduce using rule 140 (condition1 -> empty .)


state 261

    (157) block0 -> LBRACKET block1 . RBRACKET

    RBRACKET        shift and go to state 286


state 262

    (158) block1 -> statement . block1
    (158) block1 -> . statement block1
    (159) block1 -> . empty
    (160) statement -> . assignment0
    (161) statement -> . object_assignment
    (162) statement -> . condition0
    (163) statement -> . writing0
    (164) statement -> . reading
    (165) statement -> . return
    (166) statement -> . function_call SEMICOLON
    (167) statement -> . method_call0 SEMICOLON
    (168) statement -> . while
    (175) empty -> .
    (42) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (43) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign EQUALS expression0 SEMICOLON
    (44) assignment0 -> . assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON
    (169) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (136) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3
    (142) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (150) reading -> . READ ID SEMICOLON
    (151) return -> . RETURN expression0 SEMICOLON
    (152) return -> . RETURN SEMICOLON
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (153) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (49) assign_id_def -> . ID
    (106) id_funcCall -> . ID

    RBRACKET        reduce using rule 175 (empty -> .)
    ID              shift and go to state 264
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    statement                      shift and go to state 262
    block1                         shift and go to state 287
    empty                          shift and go to state 263
    assignment0                    shift and go to state 165
    object_assignment              shift and go to state 15
    condition0                     shift and go to state 16
    writing0                       shift and go to state 17
    reading                        shift and go to state 18
    return                         shift and go to state 19
    function_call                  shift and go to state 20
    method_call0                   shift and go to state 21
    while                          shift and go to state 22
    assign_id_def                  shift and go to state 26
    id_funcCall                    shift and go to state 31

state 263

    (159) block1 -> empty .

    RBRACKET        reduce using rule 159 (block1 -> empty .)


state 264

    (42) assignment0 -> ID . EQUALS expression0 SEMICOLON
    (169) object_assignment -> ID . EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (125) method_call0 -> ID . DOT function_call
    (49) assign_id_def -> ID .
    (106) id_funcCall -> ID .

    EQUALS          shift and go to state 33
    DOT             shift and go to state 34
    LSQRBRACKET     reduce using rule 49 (assign_id_def -> ID .)
    LPAREN          reduce using rule 106 (id_funcCall -> ID .)


state 265

    (148) writing2 -> COMMA push_writing_op . writing1
    (145) writing1 -> . expression0 push_writing_val writing2
    (146) writing1 -> . CONST_STRING push_string_val push_writing_val writing2
    (113) expression0 -> . exp0 expression1
    (114) expression0 -> . attr_access0 expression1
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (124) attr_access0 -> . ID DOT ID
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (106) id_funcCall -> . ID

    CONST_STRING    shift and go to state 132
    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    writing1                       shift and go to state 288
    expression0                    shift and go to state 131
    exp0                           shift and go to state 56
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 266

    (146) writing1 -> CONST_STRING push_string_val push_writing_val writing2 .

    RPAREN          reduce using rule 146 (writing1 -> CONST_STRING push_string_val push_writing_val writing2 .)


state 267

    (91) power1 -> LSQRBRACKET . exp0 RSQRBRACKET
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (124) attr_access0 -> . ID DOT ID
    (106) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 87
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 289
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 86
    id_funcCall                    shift and go to state 31

state 268

    (88) power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 . power2
    (93) power2 -> . POWER push_pow_rad_op power0
    (94) power2 -> . SQRT push_pow_rad_op power0
    (95) power2 -> . empty
    (175) empty -> .

    POWER           shift and go to state 138
    SQRT            shift and go to state 139
    MULTIPLY        reduce using rule 175 (empty -> .)
    DIVIDE          reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    LTHAN           reduce using rule 175 (empty -> .)
    GTHAN           reduce using rule 175 (empty -> .)
    DIFFERENT       reduce using rule 175 (empty -> .)
    EQUIVALENT      reduce using rule 175 (empty -> .)
    SEMICOLON       reduce using rule 175 (empty -> .)
    RSQRBRACKET     reduce using rule 175 (empty -> .)
    RPAREN          reduce using rule 175 (empty -> .)
    COMMA           reduce using rule 175 (empty -> .)

    power2                         shift and go to state 290
    empty                          shift and go to state 140

state 269

    (92) power1 -> empty .

    POWER           reduce using rule 92 (power1 -> empty .)
    SQRT            reduce using rule 92 (power1 -> empty .)
    MULTIPLY        reduce using rule 92 (power1 -> empty .)
    DIVIDE          reduce using rule 92 (power1 -> empty .)
    PLUS            reduce using rule 92 (power1 -> empty .)
    MINUS           reduce using rule 92 (power1 -> empty .)
    LTHAN           reduce using rule 92 (power1 -> empty .)
    GTHAN           reduce using rule 92 (power1 -> empty .)
    DIFFERENT       reduce using rule 92 (power1 -> empty .)
    EQUIVALENT      reduce using rule 92 (power1 -> empty .)
    SEMICOLON       reduce using rule 92 (power1 -> empty .)
    RSQRBRACKET     reduce using rule 92 (power1 -> empty .)
    RPAREN          reduce using rule 92 (power1 -> empty .)
    COMMA           reduce using rule 92 (power1 -> empty .)


state 270

    (83) power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator . power2
    (93) power2 -> . POWER push_pow_rad_op power0
    (94) power2 -> . SQRT push_pow_rad_op power0
    (95) power2 -> . empty
    (175) empty -> .

    POWER           shift and go to state 138
    SQRT            shift and go to state 139
    MULTIPLY        reduce using rule 175 (empty -> .)
    DIVIDE          reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    LTHAN           reduce using rule 175 (empty -> .)
    GTHAN           reduce using rule 175 (empty -> .)
    DIFFERENT       reduce using rule 175 (empty -> .)
    EQUIVALENT      reduce using rule 175 (empty -> .)
    SEMICOLON       reduce using rule 175 (empty -> .)
    RSQRBRACKET     reduce using rule 175 (empty -> .)
    RPAREN          reduce using rule 175 (empty -> .)
    COMMA           reduce using rule 175 (empty -> .)

    power2                         shift and go to state 291
    empty                          shift and go to state 140

state 271

    (153) while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 . wNeur3
    (156) wNeur3 -> .

    CLASS           reduce using rule 156 (wNeur3 -> .)
    DEF             reduce using rule 156 (wNeur3 -> .)
    ID              reduce using rule 156 (wNeur3 -> .)
    IF              reduce using rule 156 (wNeur3 -> .)
    WRITE           reduce using rule 156 (wNeur3 -> .)
    READ            reduce using rule 156 (wNeur3 -> .)
    RETURN          reduce using rule 156 (wNeur3 -> .)
    WHILE           reduce using rule 156 (wNeur3 -> .)
    MAIN            reduce using rule 156 (wNeur3 -> .)
    RBRACKET        reduce using rule 156 (wNeur3 -> .)

    wNeur3                         shift and go to state 292

state 272

    (169) object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .

    CLASS           reduce using rule 169 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    DEF             reduce using rule 169 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    ID              reduce using rule 169 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    IF              reduce using rule 169 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    WRITE           reduce using rule 169 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    READ            reduce using rule 169 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    RETURN          reduce using rule 169 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    WHILE           reduce using rule 169 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    MAIN            reduce using rule 169 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 169 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)


state 273

    (10) class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET . SEMICOLON revert_global

    SEMICOLON       shift and go to state 293


state 274

    (55) methods -> data_access function0 . methods
    (55) methods -> . data_access function0 methods
    (56) methods -> . empty
    (126) data_access -> . PRIVATE
    (127) data_access -> . PUBLIC
    (175) empty -> .

    PRIVATE         shift and go to state 172
    PUBLIC          shift and go to state 173
    RBRACKET        reduce using rule 175 (empty -> .)

    data_access                    shift and go to state 246
    methods                        shift and go to state 294
    empty                          shift and go to state 295

state 275

    (51) constructor -> CONSTRUCT ID LPAREN . params0 RPAREN function_block0
    (57) params0 -> . type ID paramsNeur params1
    (58) params0 -> . empty
    (65) type -> . INT
    (66) type -> . FLOAT
    (67) type -> . STRING
    (175) empty -> .

    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    STRING          shift and go to state 83
    RPAREN          reduce using rule 175 (empty -> .)

    params0                        shift and go to state 296
    type                           shift and go to state 119
    empty                          shift and go to state 120

state 276

    (68) simple_declaration -> decl_id_def COLON type . simpleMemoryNeur SEMICOLON
    (35) simpleMemoryNeur -> .

    SEMICOLON       reduce using rule 35 (simpleMemoryNeur -> .)

    simpleMemoryNeur               shift and go to state 297

state 277

    (69) simple_assignment -> ID EQUALS expression0 SEMICOLON .

    PRIVATE         reduce using rule 69 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    PUBLIC          reduce using rule 69 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    ID              reduce using rule 69 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    CONSTRUCT       reduce using rule 69 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    RSQRBRACKET     reduce using rule 69 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    IF              reduce using rule 69 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    WRITE           reduce using rule 69 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    READ            reduce using rule 69 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    RETURN          reduce using rule 69 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    WHILE           reduce using rule 69 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    RBRACKET        reduce using rule 69 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)


state 278

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 . LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope

    LSQRBRACKET     shift and go to state 298


state 279

    (24) function1 -> type .

    LSQRBRACKET     reduce using rule 24 (function1 -> type .)


state 280

    (25) function1 -> VOID .

    LSQRBRACKET     reduce using rule 25 (function1 -> VOID .)


state 281

    (60) params1 -> COMMA params0 .

    RPAREN          reduce using rule 60 (params1 -> COMMA params0 .)


state 282

    (33) declaration1 -> type isArrayNeur LSQRBRACKET exp0 limitNeur RSQRBRACKET . declaration2 neurMemory
    (38) declaration2 -> . dim2Neur LSQRBRACKET exp0 limitNeur2 RSQRBRACKET
    (39) declaration2 -> . empty
    (40) dim2Neur -> .
    (175) empty -> .

    LSQRBRACKET     reduce using rule 40 (dim2Neur -> .)
    SEMICOLON       reduce using rule 175 (empty -> .)

    declaration2                   shift and go to state 299
    dim2Neur                       shift and go to state 300
    empty                          shift and go to state 301

state 283

    (44) assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 . EQUALS expression0 SEMICOLON

    EQUALS          shift and go to state 302


state 284

    (136) condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3 .

    CLASS           reduce using rule 136 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3 .)
    DEF             reduce using rule 136 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3 .)
    ID              reduce using rule 136 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3 .)
    IF              reduce using rule 136 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3 .)
    WRITE           reduce using rule 136 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3 .)
    READ            reduce using rule 136 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3 .)
    RETURN          reduce using rule 136 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3 .)
    WHILE           reduce using rule 136 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3 .)
    MAIN            reduce using rule 136 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3 .)
    RBRACKET        reduce using rule 136 (condition0 -> IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3 .)


state 285

    (139) condition1 -> ELSE condNeur2 . block0
    (157) block0 -> . LBRACKET block1 RBRACKET

    LBRACKET        shift and go to state 223

    block0                         shift and go to state 303

state 286

    (157) block0 -> LBRACKET block1 RBRACKET .

    ELSE            reduce using rule 157 (block0 -> LBRACKET block1 RBRACKET .)
    CLASS           reduce using rule 157 (block0 -> LBRACKET block1 RBRACKET .)
    DEF             reduce using rule 157 (block0 -> LBRACKET block1 RBRACKET .)
    ID              reduce using rule 157 (block0 -> LBRACKET block1 RBRACKET .)
    IF              reduce using rule 157 (block0 -> LBRACKET block1 RBRACKET .)
    WRITE           reduce using rule 157 (block0 -> LBRACKET block1 RBRACKET .)
    READ            reduce using rule 157 (block0 -> LBRACKET block1 RBRACKET .)
    RETURN          reduce using rule 157 (block0 -> LBRACKET block1 RBRACKET .)
    WHILE           reduce using rule 157 (block0 -> LBRACKET block1 RBRACKET .)
    MAIN            reduce using rule 157 (block0 -> LBRACKET block1 RBRACKET .)
    RBRACKET        reduce using rule 157 (block0 -> LBRACKET block1 RBRACKET .)


state 287

    (158) block1 -> statement block1 .

    RBRACKET        reduce using rule 158 (block1 -> statement block1 .)


state 288

    (148) writing2 -> COMMA push_writing_op writing1 .

    RPAREN          reduce using rule 148 (writing2 -> COMMA push_writing_op writing1 .)


state 289

    (91) power1 -> LSQRBRACKET exp0 . RSQRBRACKET

    RSQRBRACKET     shift and go to state 304


state 290

    (88) power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .

    MULTIPLY        reduce using rule 88 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    DIVIDE          reduce using rule 88 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    PLUS            reduce using rule 88 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    MINUS           reduce using rule 88 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    LTHAN           reduce using rule 88 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    GTHAN           reduce using rule 88 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    DIFFERENT       reduce using rule 88 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    EQUIVALENT      reduce using rule 88 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    SEMICOLON       reduce using rule 88 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    RSQRBRACKET     reduce using rule 88 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    RPAREN          reduce using rule 88 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)
    COMMA           reduce using rule 88 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2 .)


state 291

    (83) power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .

    MULTIPLY        reduce using rule 83 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    DIVIDE          reduce using rule 83 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    PLUS            reduce using rule 83 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    MINUS           reduce using rule 83 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    LTHAN           reduce using rule 83 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    GTHAN           reduce using rule 83 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    DIFFERENT       reduce using rule 83 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    EQUIVALENT      reduce using rule 83 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    SEMICOLON       reduce using rule 83 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    RSQRBRACKET     reduce using rule 83 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    RPAREN          reduce using rule 83 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)
    COMMA           reduce using rule 83 (power0 -> LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2 .)


state 292

    (153) while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .

    CLASS           reduce using rule 153 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)
    DEF             reduce using rule 153 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)
    ID              reduce using rule 153 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)
    IF              reduce using rule 153 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)
    WRITE           reduce using rule 153 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)
    READ            reduce using rule 153 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)
    RETURN          reduce using rule 153 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)
    WHILE           reduce using rule 153 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)
    MAIN            reduce using rule 153 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)
    RBRACKET        reduce using rule 153 (while -> WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3 .)


state 293

    (10) class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON . revert_global
    (11) revert_global -> .

    CLASS           reduce using rule 11 (revert_global -> .)
    DEF             reduce using rule 11 (revert_global -> .)
    ID              reduce using rule 11 (revert_global -> .)
    IF              reduce using rule 11 (revert_global -> .)
    WRITE           reduce using rule 11 (revert_global -> .)
    READ            reduce using rule 11 (revert_global -> .)
    RETURN          reduce using rule 11 (revert_global -> .)
    WHILE           reduce using rule 11 (revert_global -> .)
    MAIN            reduce using rule 11 (revert_global -> .)

    revert_global                  shift and go to state 305

state 294

    (55) methods -> data_access function0 methods .

    RBRACKET        reduce using rule 55 (methods -> data_access function0 methods .)


state 295

    (56) methods -> empty .

    RBRACKET        reduce using rule 56 (methods -> empty .)


state 296

    (51) constructor -> CONSTRUCT ID LPAREN params0 . RPAREN function_block0

    RPAREN          shift and go to state 306


state 297

    (68) simple_declaration -> decl_id_def COLON type simpleMemoryNeur . SEMICOLON

    SEMICOLON       shift and go to state 307


state 298

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET . LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope

    LSQRBRACKET     shift and go to state 308


state 299

    (33) declaration1 -> type isArrayNeur LSQRBRACKET exp0 limitNeur RSQRBRACKET declaration2 . neurMemory
    (37) neurMemory -> .

    SEMICOLON       reduce using rule 37 (neurMemory -> .)

    neurMemory                     shift and go to state 309

state 300

    (38) declaration2 -> dim2Neur . LSQRBRACKET exp0 limitNeur2 RSQRBRACKET

    LSQRBRACKET     shift and go to state 310


state 301

    (39) declaration2 -> empty .

    SEMICOLON       reduce using rule 39 (declaration2 -> empty .)


state 302

    (44) assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS . expression0 SEMICOLON
    (113) expression0 -> . exp0 expression1
    (114) expression0 -> . attr_access0 expression1
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (124) attr_access0 -> . ID DOT ID
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (106) id_funcCall -> . ID

    ID              shift and go to state 59
    LPAREN          shift and go to state 61
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 56
    expression0                    shift and go to state 311
    attr_access0                   shift and go to state 57
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    id_funcCall                    shift and go to state 31

state 303

    (139) condition1 -> ELSE condNeur2 block0 .

    CLASS           reduce using rule 139 (condition1 -> ELSE condNeur2 block0 .)
    DEF             reduce using rule 139 (condition1 -> ELSE condNeur2 block0 .)
    ID              reduce using rule 139 (condition1 -> ELSE condNeur2 block0 .)
    IF              reduce using rule 139 (condition1 -> ELSE condNeur2 block0 .)
    WRITE           reduce using rule 139 (condition1 -> ELSE condNeur2 block0 .)
    READ            reduce using rule 139 (condition1 -> ELSE condNeur2 block0 .)
    RETURN          reduce using rule 139 (condition1 -> ELSE condNeur2 block0 .)
    WHILE           reduce using rule 139 (condition1 -> ELSE condNeur2 block0 .)
    MAIN            reduce using rule 139 (condition1 -> ELSE condNeur2 block0 .)
    RBRACKET        reduce using rule 139 (condition1 -> ELSE condNeur2 block0 .)


state 304

    (91) power1 -> LSQRBRACKET exp0 RSQRBRACKET .

    POWER           reduce using rule 91 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    SQRT            reduce using rule 91 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    MULTIPLY        reduce using rule 91 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    DIVIDE          reduce using rule 91 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    PLUS            reduce using rule 91 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    MINUS           reduce using rule 91 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    LTHAN           reduce using rule 91 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    GTHAN           reduce using rule 91 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    DIFFERENT       reduce using rule 91 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    EQUIVALENT      reduce using rule 91 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    SEMICOLON       reduce using rule 91 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    RSQRBRACKET     reduce using rule 91 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    RPAREN          reduce using rule 91 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    COMMA           reduce using rule 91 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)


state 305

    (10) class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .

    CLASS           reduce using rule 10 (class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .)
    DEF             reduce using rule 10 (class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .)
    ID              reduce using rule 10 (class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .)
    IF              reduce using rule 10 (class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .)
    WRITE           reduce using rule 10 (class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .)
    READ            reduce using rule 10 (class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .)
    RETURN          reduce using rule 10 (class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .)
    WHILE           reduce using rule 10 (class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .)
    MAIN            reduce using rule 10 (class0 -> CLASS class_id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON revert_global .)


state 306

    (51) constructor -> CONSTRUCT ID LPAREN params0 RPAREN . function_block0
    (62) function_block0 -> . LBRACKET function_block1 RBRACKET

    LBRACKET        shift and go to state 313

    function_block0                shift and go to state 312

state 307

    (68) simple_declaration -> decl_id_def COLON type simpleMemoryNeur SEMICOLON .

    PRIVATE         reduce using rule 68 (simple_declaration -> decl_id_def COLON type simpleMemoryNeur SEMICOLON .)
    PUBLIC          reduce using rule 68 (simple_declaration -> decl_id_def COLON type simpleMemoryNeur SEMICOLON .)
    ID              reduce using rule 68 (simple_declaration -> decl_id_def COLON type simpleMemoryNeur SEMICOLON .)
    CONSTRUCT       reduce using rule 68 (simple_declaration -> decl_id_def COLON type simpleMemoryNeur SEMICOLON .)
    RSQRBRACKET     reduce using rule 68 (simple_declaration -> decl_id_def COLON type simpleMemoryNeur SEMICOLON .)


state 308

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET . function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope
    (26) function2 -> . simple_declaration function2
    (27) function2 -> . simple_assignment function2
    (28) function2 -> . empty
    (68) simple_declaration -> . decl_id_def COLON type simpleMemoryNeur SEMICOLON
    (69) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (175) empty -> .
    (30) decl_id_def -> . ID

    ID              shift and go to state 318
    RSQRBRACKET     reduce using rule 175 (empty -> .)

    function2                      shift and go to state 314
    simple_declaration             shift and go to state 315
    simple_assignment              shift and go to state 316
    empty                          shift and go to state 317
    decl_id_def                    shift and go to state 212

state 309

    (33) declaration1 -> type isArrayNeur LSQRBRACKET exp0 limitNeur RSQRBRACKET declaration2 neurMemory .

    SEMICOLON       reduce using rule 33 (declaration1 -> type isArrayNeur LSQRBRACKET exp0 limitNeur RSQRBRACKET declaration2 neurMemory .)


state 310

    (38) declaration2 -> dim2Neur LSQRBRACKET . exp0 limitNeur2 RSQRBRACKET
    (71) exp0 -> . term0 check_last_plus_minus_operator exp1
    (77) term0 -> . power0 check_last_times_division_operator term1
    (83) power0 -> . LPAREN open_paren exp0 RPAREN close_paren check_pow_rad_operator power2
    (84) power0 -> . const_var check_pow_rad_operator power2
    (85) power0 -> . function_call check_pow_rad_operator power2
    (86) power0 -> . method_call0 check_pow_rad_operator power2
    (87) power0 -> . attr_access0 check_pow_rad_operator power2
    (88) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET check_pow_rad_operator power1 power2
    (98) const_var -> . CONST_INT neurInt
    (99) const_var -> . CONST_FLOAT neurFloat
    (100) const_var -> . ID neurID
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (124) attr_access0 -> . ID DOT ID
    (106) id_funcCall -> . ID

    LPAREN          shift and go to state 61
    ID              shift and go to state 87
    CONST_INT       shift and go to state 65
    CONST_FLOAT     shift and go to state 66

    exp0                           shift and go to state 319
    term0                          shift and go to state 58
    power0                         shift and go to state 60
    const_var                      shift and go to state 62
    function_call                  shift and go to state 63
    method_call0                   shift and go to state 64
    attr_access0                   shift and go to state 86
    id_funcCall                    shift and go to state 31

state 311

    (44) assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 . SEMICOLON

    SEMICOLON       shift and go to state 320


state 312

    (51) constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0 .

    PRIVATE         reduce using rule 51 (constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0 .)
    PUBLIC          reduce using rule 51 (constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0 .)
    RBRACKET        reduce using rule 51 (constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0 .)


state 313

    (62) function_block0 -> LBRACKET . function_block1 RBRACKET
    (63) function_block1 -> . function_statement function_block1
    (64) function_block1 -> . empty
    (128) function_statement -> . simple_assignment
    (129) function_statement -> . condition0
    (130) function_statement -> . writing0
    (131) function_statement -> . reading
    (132) function_statement -> . return
    (133) function_statement -> . function_call SEMICOLON
    (134) function_statement -> . method_call0 SEMICOLON
    (135) function_statement -> . while
    (175) empty -> .
    (69) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (136) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3
    (142) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (150) reading -> . READ ID SEMICOLON
    (151) return -> . RETURN expression0 SEMICOLON
    (152) return -> . RETURN SEMICOLON
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (153) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (106) id_funcCall -> . ID

    RBRACKET        reduce using rule 175 (empty -> .)
    ID              shift and go to state 332
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    function_block1                shift and go to state 321
    function_statement             shift and go to state 322
    empty                          shift and go to state 323
    simple_assignment              shift and go to state 324
    condition0                     shift and go to state 325
    writing0                       shift and go to state 326
    reading                        shift and go to state 327
    return                         shift and go to state 328
    function_call                  shift and go to state 329
    method_call0                   shift and go to state 330
    while                          shift and go to state 331
    id_funcCall                    shift and go to state 31

state 314

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 . RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope

    RSQRBRACKET     shift and go to state 333


state 315

    (26) function2 -> simple_declaration . function2
    (26) function2 -> . simple_declaration function2
    (27) function2 -> . simple_assignment function2
    (28) function2 -> . empty
    (68) simple_declaration -> . decl_id_def COLON type simpleMemoryNeur SEMICOLON
    (69) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (175) empty -> .
    (30) decl_id_def -> . ID

    ID              shift and go to state 318
    RSQRBRACKET     reduce using rule 175 (empty -> .)

    simple_declaration             shift and go to state 315
    function2                      shift and go to state 334
    simple_assignment              shift and go to state 316
    empty                          shift and go to state 317
    decl_id_def                    shift and go to state 212

state 316

    (27) function2 -> simple_assignment . function2
    (26) function2 -> . simple_declaration function2
    (27) function2 -> . simple_assignment function2
    (28) function2 -> . empty
    (68) simple_declaration -> . decl_id_def COLON type simpleMemoryNeur SEMICOLON
    (69) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (175) empty -> .
    (30) decl_id_def -> . ID

    ID              shift and go to state 318
    RSQRBRACKET     reduce using rule 175 (empty -> .)

    simple_assignment              shift and go to state 316
    function2                      shift and go to state 335
    simple_declaration             shift and go to state 315
    empty                          shift and go to state 317
    decl_id_def                    shift and go to state 212

state 317

    (28) function2 -> empty .

    RSQRBRACKET     reduce using rule 28 (function2 -> empty .)


state 318

    (69) simple_assignment -> ID . EQUALS expression0 SEMICOLON
    (30) decl_id_def -> ID .

    EQUALS          shift and go to state 216
    COLON           reduce using rule 30 (decl_id_def -> ID .)


state 319

    (38) declaration2 -> dim2Neur LSQRBRACKET exp0 . limitNeur2 RSQRBRACKET
    (41) limitNeur2 -> .

    RSQRBRACKET     reduce using rule 41 (limitNeur2 -> .)

    limitNeur2                     shift and go to state 336

state 320

    (44) assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON .

    CLASS           reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON .)
    DEF             reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON .)
    ID              reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON .)
    IF              reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON .)
    WRITE           reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON .)
    READ            reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON .)
    RETURN          reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON .)
    WHILE           reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON .)
    MAIN            reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON .)
    RBRACKET        reduce using rule 44 (assignment0 -> assign_id_def lsqrbracket_assign exp0 rsqrbracket_assign_2dim1 LSQRBRACKET exp0 RSQRBRACKET arrAccdim2 EQUALS expression0 SEMICOLON .)


state 321

    (62) function_block0 -> LBRACKET function_block1 . RBRACKET

    RBRACKET        shift and go to state 337


state 322

    (63) function_block1 -> function_statement . function_block1
    (63) function_block1 -> . function_statement function_block1
    (64) function_block1 -> . empty
    (128) function_statement -> . simple_assignment
    (129) function_statement -> . condition0
    (130) function_statement -> . writing0
    (131) function_statement -> . reading
    (132) function_statement -> . return
    (133) function_statement -> . function_call SEMICOLON
    (134) function_statement -> . method_call0 SEMICOLON
    (135) function_statement -> . while
    (175) empty -> .
    (69) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (136) condition0 -> . IF LPAREN expression0 condNeur1 RPAREN block0 condition1 condNeur3
    (142) writing0 -> . WRITE push_writing_op LPAREN writing1 RPAREN SEMICOLON
    (150) reading -> . READ ID SEMICOLON
    (151) return -> . RETURN expression0 SEMICOLON
    (152) return -> . RETURN SEMICOLON
    (104) function_call -> . id_funcCall LPAREN neurFuncCall function_call_params0 RPAREN
    (125) method_call0 -> . ID DOT function_call
    (153) while -> . WHILE wNeur1 LPAREN expression0 RPAREN wNeur2 block0 wNeur3
    (106) id_funcCall -> . ID

    RBRACKET        reduce using rule 175 (empty -> .)
    ID              shift and go to state 332
    IF              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    RETURN          shift and go to state 30
    WHILE           shift and go to state 32

    function_statement             shift and go to state 322
    function_block1                shift and go to state 338
    empty                          shift and go to state 323
    simple_assignment              shift and go to state 324
    condition0                     shift and go to state 325
    writing0                       shift and go to state 326
    reading                        shift and go to state 327
    return                         shift and go to state 328
    function_call                  shift and go to state 329
    method_call0                   shift and go to state 330
    while                          shift and go to state 331
    id_funcCall                    shift and go to state 31

state 323

    (64) function_block1 -> empty .

    RBRACKET        reduce using rule 64 (function_block1 -> empty .)


state 324

    (128) function_statement -> simple_assignment .

    ID              reduce using rule 128 (function_statement -> simple_assignment .)
    IF              reduce using rule 128 (function_statement -> simple_assignment .)
    WRITE           reduce using rule 128 (function_statement -> simple_assignment .)
    READ            reduce using rule 128 (function_statement -> simple_assignment .)
    RETURN          reduce using rule 128 (function_statement -> simple_assignment .)
    WHILE           reduce using rule 128 (function_statement -> simple_assignment .)
    RBRACKET        reduce using rule 128 (function_statement -> simple_assignment .)


state 325

    (129) function_statement -> condition0 .

    ID              reduce using rule 129 (function_statement -> condition0 .)
    IF              reduce using rule 129 (function_statement -> condition0 .)
    WRITE           reduce using rule 129 (function_statement -> condition0 .)
    READ            reduce using rule 129 (function_statement -> condition0 .)
    RETURN          reduce using rule 129 (function_statement -> condition0 .)
    WHILE           reduce using rule 129 (function_statement -> condition0 .)
    RBRACKET        reduce using rule 129 (function_statement -> condition0 .)


state 326

    (130) function_statement -> writing0 .

    ID              reduce using rule 130 (function_statement -> writing0 .)
    IF              reduce using rule 130 (function_statement -> writing0 .)
    WRITE           reduce using rule 130 (function_statement -> writing0 .)
    READ            reduce using rule 130 (function_statement -> writing0 .)
    RETURN          reduce using rule 130 (function_statement -> writing0 .)
    WHILE           reduce using rule 130 (function_statement -> writing0 .)
    RBRACKET        reduce using rule 130 (function_statement -> writing0 .)


state 327

    (131) function_statement -> reading .

    ID              reduce using rule 131 (function_statement -> reading .)
    IF              reduce using rule 131 (function_statement -> reading .)
    WRITE           reduce using rule 131 (function_statement -> reading .)
    READ            reduce using rule 131 (function_statement -> reading .)
    RETURN          reduce using rule 131 (function_statement -> reading .)
    WHILE           reduce using rule 131 (function_statement -> reading .)
    RBRACKET        reduce using rule 131 (function_statement -> reading .)


state 328

    (132) function_statement -> return .

    ID              reduce using rule 132 (function_statement -> return .)
    IF              reduce using rule 132 (function_statement -> return .)
    WRITE           reduce using rule 132 (function_statement -> return .)
    READ            reduce using rule 132 (function_statement -> return .)
    RETURN          reduce using rule 132 (function_statement -> return .)
    WHILE           reduce using rule 132 (function_statement -> return .)
    RBRACKET        reduce using rule 132 (function_statement -> return .)


state 329

    (133) function_statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 339


state 330

    (134) function_statement -> method_call0 . SEMICOLON

    SEMICOLON       shift and go to state 340


state 331

    (135) function_statement -> while .

    ID              reduce using rule 135 (function_statement -> while .)
    IF              reduce using rule 135 (function_statement -> while .)
    WRITE           reduce using rule 135 (function_statement -> while .)
    READ            reduce using rule 135 (function_statement -> while .)
    RETURN          reduce using rule 135 (function_statement -> while .)
    WHILE           reduce using rule 135 (function_statement -> while .)
    RBRACKET        reduce using rule 135 (function_statement -> while .)


state 332

    (69) simple_assignment -> ID . EQUALS expression0 SEMICOLON
    (125) method_call0 -> ID . DOT function_call
    (106) id_funcCall -> ID .

    EQUALS          shift and go to state 216
    DOT             shift and go to state 34
    LPAREN          reduce using rule 106 (id_funcCall -> ID .)


state 333

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET . RSQRBRACKET startFuncNeur function_block0 revert_scope

    RSQRBRACKET     shift and go to state 341


state 334

    (26) function2 -> simple_declaration function2 .

    RSQRBRACKET     reduce using rule 26 (function2 -> simple_declaration function2 .)


state 335

    (27) function2 -> simple_assignment function2 .

    RSQRBRACKET     reduce using rule 27 (function2 -> simple_assignment function2 .)


state 336

    (38) declaration2 -> dim2Neur LSQRBRACKET exp0 limitNeur2 . RSQRBRACKET

    RSQRBRACKET     shift and go to state 342


state 337

    (62) function_block0 -> LBRACKET function_block1 RBRACKET .

    PRIVATE         reduce using rule 62 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    PUBLIC          reduce using rule 62 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    RBRACKET        reduce using rule 62 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    CLASS           reduce using rule 62 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    DEF             reduce using rule 62 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    ID              reduce using rule 62 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    IF              reduce using rule 62 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    WRITE           reduce using rule 62 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    READ            reduce using rule 62 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    RETURN          reduce using rule 62 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    WHILE           reduce using rule 62 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    MAIN            reduce using rule 62 (function_block0 -> LBRACKET function_block1 RBRACKET .)


state 338

    (63) function_block1 -> function_statement function_block1 .

    RBRACKET        reduce using rule 63 (function_block1 -> function_statement function_block1 .)


state 339

    (133) function_statement -> function_call SEMICOLON .

    ID              reduce using rule 133 (function_statement -> function_call SEMICOLON .)
    IF              reduce using rule 133 (function_statement -> function_call SEMICOLON .)
    WRITE           reduce using rule 133 (function_statement -> function_call SEMICOLON .)
    READ            reduce using rule 133 (function_statement -> function_call SEMICOLON .)
    RETURN          reduce using rule 133 (function_statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 133 (function_statement -> function_call SEMICOLON .)
    RBRACKET        reduce using rule 133 (function_statement -> function_call SEMICOLON .)


state 340

    (134) function_statement -> method_call0 SEMICOLON .

    ID              reduce using rule 134 (function_statement -> method_call0 SEMICOLON .)
    IF              reduce using rule 134 (function_statement -> method_call0 SEMICOLON .)
    WRITE           reduce using rule 134 (function_statement -> method_call0 SEMICOLON .)
    READ            reduce using rule 134 (function_statement -> method_call0 SEMICOLON .)
    RETURN          reduce using rule 134 (function_statement -> method_call0 SEMICOLON .)
    WHILE           reduce using rule 134 (function_statement -> method_call0 SEMICOLON .)
    RBRACKET        reduce using rule 134 (function_statement -> method_call0 SEMICOLON .)


state 341

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET . startFuncNeur function_block0 revert_scope
    (23) startFuncNeur -> .

    LBRACKET        reduce using rule 23 (startFuncNeur -> .)

    startFuncNeur                  shift and go to state 343

state 342

    (38) declaration2 -> dim2Neur LSQRBRACKET exp0 limitNeur2 RSQRBRACKET .

    SEMICOLON       reduce using rule 38 (declaration2 -> dim2Neur LSQRBRACKET exp0 limitNeur2 RSQRBRACKET .)


state 343

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur . function_block0 revert_scope
    (62) function_block0 -> . LBRACKET function_block1 RBRACKET

    LBRACKET        shift and go to state 313

    function_block0                shift and go to state 344

state 344

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 . revert_scope
    (12) revert_scope -> .

    CLASS           reduce using rule 12 (revert_scope -> .)
    DEF             reduce using rule 12 (revert_scope -> .)
    ID              reduce using rule 12 (revert_scope -> .)
    IF              reduce using rule 12 (revert_scope -> .)
    WRITE           reduce using rule 12 (revert_scope -> .)
    READ            reduce using rule 12 (revert_scope -> .)
    RETURN          reduce using rule 12 (revert_scope -> .)
    WHILE           reduce using rule 12 (revert_scope -> .)
    MAIN            reduce using rule 12 (revert_scope -> .)
    PRIVATE         reduce using rule 12 (revert_scope -> .)
    PUBLIC          reduce using rule 12 (revert_scope -> .)
    RBRACKET        reduce using rule 12 (revert_scope -> .)

    revert_scope                   shift and go to state 345

state 345

    (21) function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .

    CLASS           reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    DEF             reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    ID              reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    IF              reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    WRITE           reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    READ            reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    RETURN          reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    WHILE           reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    MAIN            reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    PRIVATE         reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    PUBLIC          reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)
    RBRACKET        reduce using rule 21 (function0 -> DEF id_def LPAREN params0 RPAREN endParamNeur ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET startFuncNeur function_block0 revert_scope .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CLASS in state 13 resolved as shift
WARNING: shift/reduce conflict for DEF in state 13 resolved as shift
WARNING: shift/reduce conflict for ID in state 13 resolved as shift
WARNING: shift/reduce conflict for IF in state 13 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 13 resolved as shift
WARNING: shift/reduce conflict for READ in state 13 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 13 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 13 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 57 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 57 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 57 resolved as shift
WARNING: shift/reduce conflict for EQUIVALENT in state 57 resolved as shift
WARNING: reduce/reduce conflict in state 13 resolved using rule (statement -> assignment0)
WARNING: rejected rule (empty -> <empty>) in state 13
WARNING: reduce/reduce conflict in state 57 resolved using rule (check_pow_rad_operator -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 57
WARNING: reduce/reduce conflict in state 169 resolved using rule (class2 -> empty)
WARNING: rejected rule (attributes -> empty) in state 169
WARNING: reduce/reduce conflict in state 186 resolved using rule (check_pow_rad_operator -> <empty>)
WARNING: rejected rule (expression3 -> attr_access0) in state 186
WARNING: reduce/reduce conflict in state 245 resolved using rule (class3 -> empty)
WARNING: rejected rule (methods -> empty) in state 245
WARNING: Rule (expression3 -> attr_access0) is never reduced
