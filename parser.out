Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> routine0
Rule 1     routine0 -> ROUTINE ID SEMICOLON global_scope routine1 main0
Rule 2     routine1 -> class0 routine1
Rule 3     routine1 -> function0 routine1
Rule 4     routine1 -> declaration0 routine1
Rule 5     routine1 -> assignment0 routine1
Rule 6     routine1 -> empty
Rule 7     global_scope -> <empty>
Rule 8     class0 -> CLASS id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON
Rule 9     id_def -> ID
Rule 10    class1 -> COLON ID
Rule 11    class1 -> empty
Rule 12    class2 -> attributes
Rule 13    class2 -> empty
Rule 14    class3 -> methods
Rule 15    class3 -> empty
Rule 16    function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0
Rule 17    function1 -> type
Rule 18    function1 -> VOID
Rule 19    function2 -> simple_declaration function2
Rule 20    function2 -> simple_assignment function2
Rule 21    function2 -> empty
Rule 22    declaration0 -> decl_id_def COLON declaration1 SEMICOLON
Rule 23    decl_id_def -> ID
Rule 24    declaration1 -> type
Rule 25    declaration1 -> complex_type
Rule 26    declaration1 -> type LSQRBRACKET exp0 RSQRBRACKET declaration2
Rule 27    declaration2 -> LSQRBRACKET exp0 RSQRBRACKET
Rule 28    declaration2 -> empty
Rule 29    assignment0 -> ID EQUALS expression0 SEMICOLON
Rule 30    assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
Rule 31    assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
Rule 32    constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0
Rule 33    attributes -> data_access simple_declaration attributes
Rule 34    attributes -> simple_assignment attributes
Rule 35    attributes -> empty
Rule 36    methods -> data_access function0 methods
Rule 37    methods -> empty
Rule 38    params0 -> type ID params1
Rule 39    params0 -> empty
Rule 40    params1 -> COMMA params0
Rule 41    params1 -> empty
Rule 42    function_block0 -> LBRACKET function_block1 RBRACKET
Rule 43    function_block1 -> function_statement function_block1
Rule 44    function_block1 -> empty
Rule 45    type -> INT
Rule 46    type -> FLOAT
Rule 47    type -> STRING
Rule 48    type -> BOOL
Rule 49    simple_declaration -> ID COLON type SEMICOLON
Rule 50    simple_assignment -> ID EQUALS expression0 SEMICOLON
Rule 51    complex_type -> ID
Rule 52    logic_or0 -> logic_and0 logic_or1
Rule 53    logic_or1 -> OR logic_or0
Rule 54    logic_or1 -> empty
Rule 55    logic_and0 -> logic_operand logic_and1
Rule 56    logic_and1 -> AND logic_and0
Rule 57    logic_and1 -> empty
Rule 58    logic_operand -> NOT expression0
Rule 59    exp0 -> term0 exp1
Rule 60    exp1 -> PLUS exp0
Rule 61    exp1 -> MINUS exp0
Rule 62    exp1 -> empty
Rule 63    term0 -> factor term1
Rule 64    term1 -> MULTIPLY term0
Rule 65    term1 -> DIVIDE term0
Rule 66    term1 -> empty
Rule 67    factor -> PLUS power0
Rule 68    factor -> MINUS power0
Rule 69    factor -> power0
Rule 70    power0 -> LPAREN exp0 RPAREN power2
Rule 71    power0 -> const_var power2
Rule 72    power0 -> function_call power2
Rule 73    power0 -> method_call0 power2
Rule 74    power0 -> attr_access0 power2
Rule 75    power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
Rule 76    power1 -> LSQRBRACKET exp0 RSQRBRACKET
Rule 77    power1 -> empty
Rule 78    power2 -> POWER power0
Rule 79    power2 -> SQRT power0
Rule 80    power2 -> empty
Rule 81    const_var -> CONST_INT
Rule 82    const_var -> CONST_FLOAT
Rule 83    const_var -> ID
Rule 84    function_call -> ID LPAREN function_call_params0 RPAREN
Rule 85    function_call_params0 -> expression0 function_call_params1
Rule 86    function_call_params0 -> CONST_STRING function_call_params1
Rule 87    function_call_params0 -> empty function_call_params1
Rule 88    function_call_params1 -> COMMA function_call_params0
Rule 89    function_call_params1 -> empty
Rule 90    expression0 -> exp0 expression1
Rule 91    expression0 -> CONST_BOOL expression1
Rule 92    expression0 -> attr_access0 expression1
Rule 93    expression1 -> empty
Rule 94    expression1 -> expression2
Rule 95    expression2 -> LTHAN expression3
Rule 96    expression2 -> GTHAN expression3
Rule 97    expression2 -> DIFFERENT expression3
Rule 98    expression2 -> EQUIVALENT expression3
Rule 99    expression3 -> exp0
Rule 100   expression3 -> CONST_BOOL
Rule 101   expression3 -> attr_access0
Rule 102   attr_access0 -> ID DOT ID
Rule 103   method_call0 -> ID DOT function_call
Rule 104   data_access -> PRIVATE
Rule 105   data_access -> PUBLIC
Rule 106   function_statement -> simple_assignment
Rule 107   function_statement -> condition0
Rule 108   function_statement -> writing0
Rule 109   function_statement -> reading
Rule 110   function_statement -> return
Rule 111   function_statement -> function_call SEMICOLON
Rule 112   function_statement -> method_call0 SEMICOLON
Rule 113   function_statement -> while
Rule 114   condition0 -> IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON
Rule 115   condition1 -> ELSE block0
Rule 116   condition1 -> empty
Rule 117   writing0 -> WRITE LPAREN writing1 RPAREN SEMICOLON
Rule 118   writing1 -> expression0 writing2
Rule 119   writing1 -> CONST_STRING writing2
Rule 120   writing2 -> COMMA writing1
Rule 121   writing2 -> empty
Rule 122   reading -> READ ID SEMICOLON
Rule 123   return -> RETURN expression0 SEMICOLON
Rule 124   return -> RETURN SEMICOLON
Rule 125   while -> WHILE LPAREN expression0 RPAREN block0
Rule 126   block0 -> LBRACKET block1 RBRACKET
Rule 127   block1 -> statement block1
Rule 128   block1 -> empty
Rule 129   statement -> assignment0
Rule 130   statement -> object_assignment
Rule 131   statement -> condition0
Rule 132   statement -> writing0
Rule 133   statement -> reading
Rule 134   statement -> return
Rule 135   statement -> function_call SEMICOLON
Rule 136   statement -> method_call0 SEMICOLON
Rule 137   statement -> while
Rule 138   object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
Rule 139   main0 -> MAIN main_scope LBRACKET main1 RBRACKET
Rule 140   main1 -> declaration0 main1
Rule 141   main1 -> statement main1
Rule 142   main1 -> empty
Rule 143   main_scope -> <empty>
Rule 144   empty -> <empty>

Terminals, with rules where they appear

AND                  : 56
ARROW                : 16
BOOL                 : 48
CLASS                : 8
COLON                : 10 22 49
COMMA                : 40 88 120
CONSTRUCT            : 32
CONST_BOOL           : 91 100
CONST_FLOAT          : 82
CONST_INT            : 81
CONST_STRING         : 86 119
DEF                  : 16
DIFFERENT            : 97
DIVIDE               : 65
DOT                  : 102 103
ELSE                 : 115
EQUALS               : 29 30 31 50 138
EQUIVALENT           : 98
FLOAT                : 46
GTHAN                : 96
ID                   : 1 9 10 16 23 29 30 31 32 38 49 50 51 75 83 84 102 102 103 122 138 138
IF                   : 114
INT                  : 45
LBRACKET             : 8 42 126 139
LPAREN               : 16 32 70 84 114 117 125 138
LSQRBRACKET          : 16 16 26 27 30 31 31 75 76
LTHAN                : 95
MAIN                 : 139
MINUS                : 61 68
MULTIPLY             : 64
NEW                  : 138
NOT                  : 58
OR                   : 53
PLUS                 : 60 67
POWER                : 78
PRIVATE              : 104
PUBLIC               : 105
RBRACKET             : 8 42 126 139
READ                 : 122
RETURN               : 123 124
ROUTINE              : 1
RPAREN               : 16 32 70 84 114 117 125 138
RSQRBRACKET          : 16 16 26 27 30 31 31 75 76
SEMICOLON            : 1 8 22 29 30 31 49 50 111 112 114 117 122 123 124 135 136 138
SQRT                 : 79
STRING               : 47
VOID                 : 18
WHILE                : 125
WRITE                : 117
error                : 

Nonterminals, with rules where they appear

assignment0          : 5 129
attr_access0         : 74 92 101
attributes           : 12 33 34
block0               : 114 115 125
block1               : 126 127
class0               : 2
class1               : 8
class2               : 8
class3               : 8
complex_type         : 25
condition0           : 107 131
condition1           : 114
const_var            : 71
constructor          : 8
data_access          : 33 36
decl_id_def          : 22
declaration0         : 4 140
declaration1         : 22
declaration2         : 26
empty                : 6 11 13 15 21 28 35 37 39 41 44 54 57 62 66 77 80 87 89 93 116 121 128 142
exp0                 : 26 27 30 31 31 60 61 70 75 76 90 99
exp1                 : 59
expression0          : 29 30 31 50 58 85 114 118 123 125
expression1          : 90 91 92
expression2          : 94
expression3          : 95 96 97 98
factor               : 63
function0            : 3 36
function1            : 16
function2            : 16 19 20
function_block0      : 16 32
function_block1      : 42 43
function_call        : 72 103 111 135
function_call_params0 : 84 88 138
function_call_params1 : 85 86 87
function_statement   : 43
global_scope         : 1
id_def               : 8
logic_and0           : 52 56
logic_and1           : 55
logic_operand        : 55
logic_or0            : 53
logic_or1            : 52
main0                : 1
main1                : 139 140 141
main_scope           : 139
method_call0         : 73 112 136
methods              : 14 36
object_assignment    : 130
params0              : 16 32 40
params1              : 38
power0               : 67 68 69 78 79
power1               : 75
power2               : 70 71 72 73 74 75
reading              : 109 133
return               : 110 134
routine0             : 0
routine1             : 1 2 3 4 5
simple_assignment    : 20 34 106
simple_declaration   : 19 33
statement            : 127 141
term0                : 59 64 65
term1                : 63
type                 : 17 24 26 38 49
while                : 113 137
writing0             : 108 132
writing1             : 117 120
writing2             : 118 119

Parsing method: LALR

state 0

    (0) S' -> . routine0
    (1) routine0 -> . ROUTINE ID SEMICOLON global_scope routine1 main0

    ROUTINE         shift and go to state 2

    routine0                       shift and go to state 1

state 1

    (0) S' -> routine0 .



state 2

    (1) routine0 -> ROUTINE . ID SEMICOLON global_scope routine1 main0

    ID              shift and go to state 3


state 3

    (1) routine0 -> ROUTINE ID . SEMICOLON global_scope routine1 main0

    SEMICOLON       shift and go to state 4


state 4

    (1) routine0 -> ROUTINE ID SEMICOLON . global_scope routine1 main0
    (7) global_scope -> .

    CLASS           reduce using rule 7 (global_scope -> .)
    DEF             reduce using rule 7 (global_scope -> .)
    ID              reduce using rule 7 (global_scope -> .)
    MAIN            reduce using rule 7 (global_scope -> .)

    global_scope                   shift and go to state 5

state 5

    (1) routine0 -> ROUTINE ID SEMICOLON global_scope . routine1 main0
    (2) routine1 -> . class0 routine1
    (3) routine1 -> . function0 routine1
    (4) routine1 -> . declaration0 routine1
    (5) routine1 -> . assignment0 routine1
    (6) routine1 -> . empty
    (8) class0 -> . CLASS id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON
    (16) function0 -> . DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0
    (22) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (29) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (30) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (31) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (144) empty -> .
    (23) decl_id_def -> . ID

    CLASS           shift and go to state 13
    DEF             shift and go to state 14
    ID              shift and go to state 6
    MAIN            reduce using rule 144 (empty -> .)

    routine1                       shift and go to state 7
    class0                         shift and go to state 8
    function0                      shift and go to state 9
    declaration0                   shift and go to state 10
    assignment0                    shift and go to state 11
    empty                          shift and go to state 12
    decl_id_def                    shift and go to state 15

state 6

    (29) assignment0 -> ID . EQUALS expression0 SEMICOLON
    (30) assignment0 -> ID . LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (31) assignment0 -> ID . LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (23) decl_id_def -> ID .

    EQUALS          shift and go to state 16
    LSQRBRACKET     shift and go to state 17
    COLON           reduce using rule 23 (decl_id_def -> ID .)


state 7

    (1) routine0 -> ROUTINE ID SEMICOLON global_scope routine1 . main0
    (139) main0 -> . MAIN main_scope LBRACKET main1 RBRACKET

    MAIN            shift and go to state 19

    main0                          shift and go to state 18

state 8

    (2) routine1 -> class0 . routine1
    (2) routine1 -> . class0 routine1
    (3) routine1 -> . function0 routine1
    (4) routine1 -> . declaration0 routine1
    (5) routine1 -> . assignment0 routine1
    (6) routine1 -> . empty
    (8) class0 -> . CLASS id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON
    (16) function0 -> . DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0
    (22) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (29) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (30) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (31) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (144) empty -> .
    (23) decl_id_def -> . ID

    CLASS           shift and go to state 13
    DEF             shift and go to state 14
    ID              shift and go to state 6
    MAIN            reduce using rule 144 (empty -> .)

    class0                         shift and go to state 8
    routine1                       shift and go to state 20
    function0                      shift and go to state 9
    declaration0                   shift and go to state 10
    assignment0                    shift and go to state 11
    empty                          shift and go to state 12
    decl_id_def                    shift and go to state 15

state 9

    (3) routine1 -> function0 . routine1
    (2) routine1 -> . class0 routine1
    (3) routine1 -> . function0 routine1
    (4) routine1 -> . declaration0 routine1
    (5) routine1 -> . assignment0 routine1
    (6) routine1 -> . empty
    (8) class0 -> . CLASS id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON
    (16) function0 -> . DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0
    (22) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (29) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (30) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (31) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (144) empty -> .
    (23) decl_id_def -> . ID

    CLASS           shift and go to state 13
    DEF             shift and go to state 14
    ID              shift and go to state 6
    MAIN            reduce using rule 144 (empty -> .)

    function0                      shift and go to state 9
    routine1                       shift and go to state 21
    class0                         shift and go to state 8
    declaration0                   shift and go to state 10
    assignment0                    shift and go to state 11
    empty                          shift and go to state 12
    decl_id_def                    shift and go to state 15

state 10

    (4) routine1 -> declaration0 . routine1
    (2) routine1 -> . class0 routine1
    (3) routine1 -> . function0 routine1
    (4) routine1 -> . declaration0 routine1
    (5) routine1 -> . assignment0 routine1
    (6) routine1 -> . empty
    (8) class0 -> . CLASS id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON
    (16) function0 -> . DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0
    (22) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (29) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (30) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (31) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (144) empty -> .
    (23) decl_id_def -> . ID

    CLASS           shift and go to state 13
    DEF             shift and go to state 14
    ID              shift and go to state 6
    MAIN            reduce using rule 144 (empty -> .)

    declaration0                   shift and go to state 10
    routine1                       shift and go to state 22
    class0                         shift and go to state 8
    function0                      shift and go to state 9
    assignment0                    shift and go to state 11
    empty                          shift and go to state 12
    decl_id_def                    shift and go to state 15

state 11

    (5) routine1 -> assignment0 . routine1
    (2) routine1 -> . class0 routine1
    (3) routine1 -> . function0 routine1
    (4) routine1 -> . declaration0 routine1
    (5) routine1 -> . assignment0 routine1
    (6) routine1 -> . empty
    (8) class0 -> . CLASS id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON
    (16) function0 -> . DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0
    (22) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (29) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (30) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (31) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (144) empty -> .
    (23) decl_id_def -> . ID

    CLASS           shift and go to state 13
    DEF             shift and go to state 14
    ID              shift and go to state 6
    MAIN            reduce using rule 144 (empty -> .)

    assignment0                    shift and go to state 11
    routine1                       shift and go to state 23
    class0                         shift and go to state 8
    function0                      shift and go to state 9
    declaration0                   shift and go to state 10
    empty                          shift and go to state 12
    decl_id_def                    shift and go to state 15

state 12

    (6) routine1 -> empty .

    MAIN            reduce using rule 6 (routine1 -> empty .)


state 13

    (8) class0 -> CLASS . id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON
    (9) id_def -> . ID

    ID              shift and go to state 25

    id_def                         shift and go to state 24

state 14

    (16) function0 -> DEF . ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0

    ID              shift and go to state 26


state 15

    (22) declaration0 -> decl_id_def . COLON declaration1 SEMICOLON

    COLON           shift and go to state 27


state 16

    (29) assignment0 -> ID EQUALS . expression0 SEMICOLON
    (90) expression0 -> . exp0 expression1
    (91) expression0 -> . CONST_BOOL expression1
    (92) expression0 -> . attr_access0 expression1
    (59) exp0 -> . term0 exp1
    (102) attr_access0 -> . ID DOT ID
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 31
    ID              shift and go to state 28
    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    expression0                    shift and go to state 29
    exp0                           shift and go to state 30
    attr_access0                   shift and go to state 32
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41

state 17

    (30) assignment0 -> ID LSQRBRACKET . exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (31) assignment0 -> ID LSQRBRACKET . exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (59) exp0 -> . term0 exp1
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (102) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    ID              shift and go to state 44
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    exp0                           shift and go to state 45
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41
    attr_access0                   shift and go to state 46

state 18

    (1) routine0 -> ROUTINE ID SEMICOLON global_scope routine1 main0 .

    $end            reduce using rule 1 (routine0 -> ROUTINE ID SEMICOLON global_scope routine1 main0 .)


state 19

    (139) main0 -> MAIN . main_scope LBRACKET main1 RBRACKET
    (143) main_scope -> .

    LBRACKET        reduce using rule 143 (main_scope -> .)

    main_scope                     shift and go to state 47

state 20

    (2) routine1 -> class0 routine1 .

    MAIN            reduce using rule 2 (routine1 -> class0 routine1 .)


state 21

    (3) routine1 -> function0 routine1 .

    MAIN            reduce using rule 3 (routine1 -> function0 routine1 .)


state 22

    (4) routine1 -> declaration0 routine1 .

    MAIN            reduce using rule 4 (routine1 -> declaration0 routine1 .)


state 23

    (5) routine1 -> assignment0 routine1 .

    MAIN            reduce using rule 5 (routine1 -> assignment0 routine1 .)


state 24

    (8) class0 -> CLASS id_def . class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON
    (10) class1 -> . COLON ID
    (11) class1 -> . empty
    (144) empty -> .

    COLON           shift and go to state 49
    LBRACKET        reduce using rule 144 (empty -> .)

    class1                         shift and go to state 48
    empty                          shift and go to state 50

state 25

    (9) id_def -> ID .

    COLON           reduce using rule 9 (id_def -> ID .)
    LBRACKET        reduce using rule 9 (id_def -> ID .)


state 26

    (16) function0 -> DEF ID . LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0

    LPAREN          shift and go to state 51


state 27

    (22) declaration0 -> decl_id_def COLON . declaration1 SEMICOLON
    (24) declaration1 -> . type
    (25) declaration1 -> . complex_type
    (26) declaration1 -> . type LSQRBRACKET exp0 RSQRBRACKET declaration2
    (45) type -> . INT
    (46) type -> . FLOAT
    (47) type -> . STRING
    (48) type -> . BOOL
    (51) complex_type -> . ID

    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    STRING          shift and go to state 57
    BOOL            shift and go to state 58
    ID              shift and go to state 59

    declaration1                   shift and go to state 52
    type                           shift and go to state 53
    complex_type                   shift and go to state 54

state 28

    (102) attr_access0 -> ID . DOT ID
    (75) power0 -> ID . LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (83) const_var -> ID .
    (84) function_call -> ID . LPAREN function_call_params0 RPAREN
    (103) method_call0 -> ID . DOT function_call

    DOT             shift and go to state 60
    LSQRBRACKET     shift and go to state 61
    POWER           reduce using rule 83 (const_var -> ID .)
    SQRT            reduce using rule 83 (const_var -> ID .)
    MULTIPLY        reduce using rule 83 (const_var -> ID .)
    DIVIDE          reduce using rule 83 (const_var -> ID .)
    PLUS            reduce using rule 83 (const_var -> ID .)
    MINUS           reduce using rule 83 (const_var -> ID .)
    LTHAN           reduce using rule 83 (const_var -> ID .)
    GTHAN           reduce using rule 83 (const_var -> ID .)
    DIFFERENT       reduce using rule 83 (const_var -> ID .)
    EQUIVALENT      reduce using rule 83 (const_var -> ID .)
    SEMICOLON       reduce using rule 83 (const_var -> ID .)
    COMMA           reduce using rule 83 (const_var -> ID .)
    RPAREN          reduce using rule 83 (const_var -> ID .)
    LPAREN          shift and go to state 62


state 29

    (29) assignment0 -> ID EQUALS expression0 . SEMICOLON

    SEMICOLON       shift and go to state 63


state 30

    (90) expression0 -> exp0 . expression1
    (93) expression1 -> . empty
    (94) expression1 -> . expression2
    (144) empty -> .
    (95) expression2 -> . LTHAN expression3
    (96) expression2 -> . GTHAN expression3
    (97) expression2 -> . DIFFERENT expression3
    (98) expression2 -> . EQUIVALENT expression3

    SEMICOLON       reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAREN          reduce using rule 144 (empty -> .)
    LTHAN           shift and go to state 67
    GTHAN           shift and go to state 68
    DIFFERENT       shift and go to state 69
    EQUIVALENT      shift and go to state 70

    expression1                    shift and go to state 64
    empty                          shift and go to state 65
    expression2                    shift and go to state 66

state 31

    (91) expression0 -> CONST_BOOL . expression1
    (93) expression1 -> . empty
    (94) expression1 -> . expression2
    (144) empty -> .
    (95) expression2 -> . LTHAN expression3
    (96) expression2 -> . GTHAN expression3
    (97) expression2 -> . DIFFERENT expression3
    (98) expression2 -> . EQUIVALENT expression3

    SEMICOLON       reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAREN          reduce using rule 144 (empty -> .)
    LTHAN           shift and go to state 67
    GTHAN           shift and go to state 68
    DIFFERENT       shift and go to state 69
    EQUIVALENT      shift and go to state 70

    expression1                    shift and go to state 71
    empty                          shift and go to state 65
    expression2                    shift and go to state 66

state 32

    (92) expression0 -> attr_access0 . expression1
    (74) power0 -> attr_access0 . power2
    (93) expression1 -> . empty
    (94) expression1 -> . expression2
    (78) power2 -> . POWER power0
    (79) power2 -> . SQRT power0
    (80) power2 -> . empty
    (144) empty -> .
    (95) expression2 -> . LTHAN expression3
    (96) expression2 -> . GTHAN expression3
    (97) expression2 -> . DIFFERENT expression3
    (98) expression2 -> . EQUIVALENT expression3

  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for EQUIVALENT resolved as shift
    POWER           shift and go to state 75
    SQRT            shift and go to state 76
    SEMICOLON       reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAREN          reduce using rule 144 (empty -> .)
    MULTIPLY        reduce using rule 144 (empty -> .)
    DIVIDE          reduce using rule 144 (empty -> .)
    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)
    LTHAN           shift and go to state 67
    GTHAN           shift and go to state 68
    DIFFERENT       shift and go to state 69
    EQUIVALENT      shift and go to state 70

  ! LTHAN           [ reduce using rule 144 (empty -> .) ]
  ! GTHAN           [ reduce using rule 144 (empty -> .) ]
  ! DIFFERENT       [ reduce using rule 144 (empty -> .) ]
  ! EQUIVALENT      [ reduce using rule 144 (empty -> .) ]

    expression1                    shift and go to state 72
    power2                         shift and go to state 73
    empty                          shift and go to state 74
    expression2                    shift and go to state 66

state 33

    (59) exp0 -> term0 . exp1
    (60) exp1 -> . PLUS exp0
    (61) exp1 -> . MINUS exp0
    (62) exp1 -> . empty
    (144) empty -> .

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LTHAN           reduce using rule 144 (empty -> .)
    GTHAN           reduce using rule 144 (empty -> .)
    DIFFERENT       reduce using rule 144 (empty -> .)
    EQUIVALENT      reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    RSQRBRACKET     reduce using rule 144 (empty -> .)
    RPAREN          reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)

    exp1                           shift and go to state 77
    empty                          shift and go to state 80

state 34

    (63) term0 -> factor . term1
    (64) term1 -> . MULTIPLY term0
    (65) term1 -> . DIVIDE term0
    (66) term1 -> . empty
    (144) empty -> .

    MULTIPLY        shift and go to state 82
    DIVIDE          shift and go to state 83
    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)
    LTHAN           reduce using rule 144 (empty -> .)
    GTHAN           reduce using rule 144 (empty -> .)
    DIFFERENT       reduce using rule 144 (empty -> .)
    EQUIVALENT      reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    RSQRBRACKET     reduce using rule 144 (empty -> .)
    RPAREN          reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)

    term1                          shift and go to state 81
    empty                          shift and go to state 84

state 35

    (67) factor -> PLUS . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (102) attr_access0 -> . ID DOT ID

    LPAREN          shift and go to state 38
    ID              shift and go to state 44
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    power0                         shift and go to state 85
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41
    attr_access0                   shift and go to state 46

state 36

    (69) factor -> power0 .

    MULTIPLY        reduce using rule 69 (factor -> power0 .)
    DIVIDE          reduce using rule 69 (factor -> power0 .)
    PLUS            reduce using rule 69 (factor -> power0 .)
    MINUS           reduce using rule 69 (factor -> power0 .)
    LTHAN           reduce using rule 69 (factor -> power0 .)
    GTHAN           reduce using rule 69 (factor -> power0 .)
    DIFFERENT       reduce using rule 69 (factor -> power0 .)
    EQUIVALENT      reduce using rule 69 (factor -> power0 .)
    SEMICOLON       reduce using rule 69 (factor -> power0 .)
    RSQRBRACKET     reduce using rule 69 (factor -> power0 .)
    RPAREN          reduce using rule 69 (factor -> power0 .)
    COMMA           reduce using rule 69 (factor -> power0 .)


state 37

    (68) factor -> MINUS . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (102) attr_access0 -> . ID DOT ID

    LPAREN          shift and go to state 38
    ID              shift and go to state 44
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    power0                         shift and go to state 86
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41
    attr_access0                   shift and go to state 46

state 38

    (70) power0 -> LPAREN . exp0 RPAREN power2
    (59) exp0 -> . term0 exp1
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (102) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    ID              shift and go to state 44
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    exp0                           shift and go to state 87
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41
    attr_access0                   shift and go to state 46

state 39

    (71) power0 -> const_var . power2
    (78) power2 -> . POWER power0
    (79) power2 -> . SQRT power0
    (80) power2 -> . empty
    (144) empty -> .

    POWER           shift and go to state 75
    SQRT            shift and go to state 76
    MULTIPLY        reduce using rule 144 (empty -> .)
    DIVIDE          reduce using rule 144 (empty -> .)
    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)
    LTHAN           reduce using rule 144 (empty -> .)
    GTHAN           reduce using rule 144 (empty -> .)
    DIFFERENT       reduce using rule 144 (empty -> .)
    EQUIVALENT      reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    RSQRBRACKET     reduce using rule 144 (empty -> .)
    RPAREN          reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)

    power2                         shift and go to state 88
    empty                          shift and go to state 89

state 40

    (72) power0 -> function_call . power2
    (78) power2 -> . POWER power0
    (79) power2 -> . SQRT power0
    (80) power2 -> . empty
    (144) empty -> .

    POWER           shift and go to state 75
    SQRT            shift and go to state 76
    MULTIPLY        reduce using rule 144 (empty -> .)
    DIVIDE          reduce using rule 144 (empty -> .)
    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)
    LTHAN           reduce using rule 144 (empty -> .)
    GTHAN           reduce using rule 144 (empty -> .)
    DIFFERENT       reduce using rule 144 (empty -> .)
    EQUIVALENT      reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    RSQRBRACKET     reduce using rule 144 (empty -> .)
    RPAREN          reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)

    power2                         shift and go to state 90
    empty                          shift and go to state 89

state 41

    (73) power0 -> method_call0 . power2
    (78) power2 -> . POWER power0
    (79) power2 -> . SQRT power0
    (80) power2 -> . empty
    (144) empty -> .

    POWER           shift and go to state 75
    SQRT            shift and go to state 76
    MULTIPLY        reduce using rule 144 (empty -> .)
    DIVIDE          reduce using rule 144 (empty -> .)
    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)
    LTHAN           reduce using rule 144 (empty -> .)
    GTHAN           reduce using rule 144 (empty -> .)
    DIFFERENT       reduce using rule 144 (empty -> .)
    EQUIVALENT      reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    RSQRBRACKET     reduce using rule 144 (empty -> .)
    RPAREN          reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)

    power2                         shift and go to state 91
    empty                          shift and go to state 89

state 42

    (81) const_var -> CONST_INT .

    POWER           reduce using rule 81 (const_var -> CONST_INT .)
    SQRT            reduce using rule 81 (const_var -> CONST_INT .)
    MULTIPLY        reduce using rule 81 (const_var -> CONST_INT .)
    DIVIDE          reduce using rule 81 (const_var -> CONST_INT .)
    PLUS            reduce using rule 81 (const_var -> CONST_INT .)
    MINUS           reduce using rule 81 (const_var -> CONST_INT .)
    LTHAN           reduce using rule 81 (const_var -> CONST_INT .)
    GTHAN           reduce using rule 81 (const_var -> CONST_INT .)
    DIFFERENT       reduce using rule 81 (const_var -> CONST_INT .)
    EQUIVALENT      reduce using rule 81 (const_var -> CONST_INT .)
    SEMICOLON       reduce using rule 81 (const_var -> CONST_INT .)
    RSQRBRACKET     reduce using rule 81 (const_var -> CONST_INT .)
    RPAREN          reduce using rule 81 (const_var -> CONST_INT .)
    COMMA           reduce using rule 81 (const_var -> CONST_INT .)


state 43

    (82) const_var -> CONST_FLOAT .

    POWER           reduce using rule 82 (const_var -> CONST_FLOAT .)
    SQRT            reduce using rule 82 (const_var -> CONST_FLOAT .)
    MULTIPLY        reduce using rule 82 (const_var -> CONST_FLOAT .)
    DIVIDE          reduce using rule 82 (const_var -> CONST_FLOAT .)
    PLUS            reduce using rule 82 (const_var -> CONST_FLOAT .)
    MINUS           reduce using rule 82 (const_var -> CONST_FLOAT .)
    LTHAN           reduce using rule 82 (const_var -> CONST_FLOAT .)
    GTHAN           reduce using rule 82 (const_var -> CONST_FLOAT .)
    DIFFERENT       reduce using rule 82 (const_var -> CONST_FLOAT .)
    EQUIVALENT      reduce using rule 82 (const_var -> CONST_FLOAT .)
    SEMICOLON       reduce using rule 82 (const_var -> CONST_FLOAT .)
    RSQRBRACKET     reduce using rule 82 (const_var -> CONST_FLOAT .)
    RPAREN          reduce using rule 82 (const_var -> CONST_FLOAT .)
    COMMA           reduce using rule 82 (const_var -> CONST_FLOAT .)


state 44

    (75) power0 -> ID . LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (83) const_var -> ID .
    (84) function_call -> ID . LPAREN function_call_params0 RPAREN
    (103) method_call0 -> ID . DOT function_call
    (102) attr_access0 -> ID . DOT ID

    LSQRBRACKET     shift and go to state 61
    POWER           reduce using rule 83 (const_var -> ID .)
    SQRT            reduce using rule 83 (const_var -> ID .)
    MULTIPLY        reduce using rule 83 (const_var -> ID .)
    DIVIDE          reduce using rule 83 (const_var -> ID .)
    PLUS            reduce using rule 83 (const_var -> ID .)
    MINUS           reduce using rule 83 (const_var -> ID .)
    RSQRBRACKET     reduce using rule 83 (const_var -> ID .)
    LTHAN           reduce using rule 83 (const_var -> ID .)
    GTHAN           reduce using rule 83 (const_var -> ID .)
    DIFFERENT       reduce using rule 83 (const_var -> ID .)
    EQUIVALENT      reduce using rule 83 (const_var -> ID .)
    SEMICOLON       reduce using rule 83 (const_var -> ID .)
    RPAREN          reduce using rule 83 (const_var -> ID .)
    COMMA           reduce using rule 83 (const_var -> ID .)
    LPAREN          shift and go to state 62
    DOT             shift and go to state 92


state 45

    (30) assignment0 -> ID LSQRBRACKET exp0 . RSQRBRACKET EQUALS expression0 SEMICOLON
    (31) assignment0 -> ID LSQRBRACKET exp0 . RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON

    RSQRBRACKET     shift and go to state 93


state 46

    (74) power0 -> attr_access0 . power2
    (78) power2 -> . POWER power0
    (79) power2 -> . SQRT power0
    (80) power2 -> . empty
    (144) empty -> .

    POWER           shift and go to state 75
    SQRT            shift and go to state 76
    MULTIPLY        reduce using rule 144 (empty -> .)
    DIVIDE          reduce using rule 144 (empty -> .)
    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)
    LTHAN           reduce using rule 144 (empty -> .)
    GTHAN           reduce using rule 144 (empty -> .)
    DIFFERENT       reduce using rule 144 (empty -> .)
    EQUIVALENT      reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    RSQRBRACKET     reduce using rule 144 (empty -> .)
    RPAREN          reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)

    power2                         shift and go to state 73
    empty                          shift and go to state 89

state 47

    (139) main0 -> MAIN main_scope . LBRACKET main1 RBRACKET

    LBRACKET        shift and go to state 94


state 48

    (8) class0 -> CLASS id_def class1 . LBRACKET class2 constructor class3 RBRACKET SEMICOLON

    LBRACKET        shift and go to state 95


state 49

    (10) class1 -> COLON . ID

    ID              shift and go to state 96


state 50

    (11) class1 -> empty .

    LBRACKET        reduce using rule 11 (class1 -> empty .)


state 51

    (16) function0 -> DEF ID LPAREN . params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0
    (38) params0 -> . type ID params1
    (39) params0 -> . empty
    (45) type -> . INT
    (46) type -> . FLOAT
    (47) type -> . STRING
    (48) type -> . BOOL
    (144) empty -> .

    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    STRING          shift and go to state 57
    BOOL            shift and go to state 58
    RPAREN          reduce using rule 144 (empty -> .)

    params0                        shift and go to state 97
    type                           shift and go to state 98
    empty                          shift and go to state 99

state 52

    (22) declaration0 -> decl_id_def COLON declaration1 . SEMICOLON

    SEMICOLON       shift and go to state 100


state 53

    (24) declaration1 -> type .
    (26) declaration1 -> type . LSQRBRACKET exp0 RSQRBRACKET declaration2

    SEMICOLON       reduce using rule 24 (declaration1 -> type .)
    LSQRBRACKET     shift and go to state 101


state 54

    (25) declaration1 -> complex_type .

    SEMICOLON       reduce using rule 25 (declaration1 -> complex_type .)


state 55

    (45) type -> INT .

    LSQRBRACKET     reduce using rule 45 (type -> INT .)
    SEMICOLON       reduce using rule 45 (type -> INT .)
    ID              reduce using rule 45 (type -> INT .)


state 56

    (46) type -> FLOAT .

    LSQRBRACKET     reduce using rule 46 (type -> FLOAT .)
    SEMICOLON       reduce using rule 46 (type -> FLOAT .)
    ID              reduce using rule 46 (type -> FLOAT .)


state 57

    (47) type -> STRING .

    LSQRBRACKET     reduce using rule 47 (type -> STRING .)
    SEMICOLON       reduce using rule 47 (type -> STRING .)
    ID              reduce using rule 47 (type -> STRING .)


state 58

    (48) type -> BOOL .

    LSQRBRACKET     reduce using rule 48 (type -> BOOL .)
    SEMICOLON       reduce using rule 48 (type -> BOOL .)
    ID              reduce using rule 48 (type -> BOOL .)


state 59

    (51) complex_type -> ID .

    SEMICOLON       reduce using rule 51 (complex_type -> ID .)


state 60

    (102) attr_access0 -> ID DOT . ID
    (103) method_call0 -> ID DOT . function_call
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN

    ID              shift and go to state 102

    function_call                  shift and go to state 103

state 61

    (75) power0 -> ID LSQRBRACKET . exp0 RSQRBRACKET power1 power2
    (59) exp0 -> . term0 exp1
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (102) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    ID              shift and go to state 44
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    exp0                           shift and go to state 104
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41
    attr_access0                   shift and go to state 46

state 62

    (84) function_call -> ID LPAREN . function_call_params0 RPAREN
    (85) function_call_params0 -> . expression0 function_call_params1
    (86) function_call_params0 -> . CONST_STRING function_call_params1
    (87) function_call_params0 -> . empty function_call_params1
    (90) expression0 -> . exp0 expression1
    (91) expression0 -> . CONST_BOOL expression1
    (92) expression0 -> . attr_access0 expression1
    (144) empty -> .
    (59) exp0 -> . term0 exp1
    (102) attr_access0 -> . ID DOT ID
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call

    CONST_STRING    shift and go to state 107
    CONST_BOOL      shift and go to state 31
    COMMA           reduce using rule 144 (empty -> .)
    RPAREN          reduce using rule 144 (empty -> .)
    ID              shift and go to state 28
    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    function_call_params0          shift and go to state 105
    expression0                    shift and go to state 106
    empty                          shift and go to state 108
    exp0                           shift and go to state 30
    attr_access0                   shift and go to state 32
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41

state 63

    (29) assignment0 -> ID EQUALS expression0 SEMICOLON .

    CLASS           reduce using rule 29 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    DEF             reduce using rule 29 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    ID              reduce using rule 29 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    MAIN            reduce using rule 29 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    IF              reduce using rule 29 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    WRITE           reduce using rule 29 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    READ            reduce using rule 29 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    RETURN          reduce using rule 29 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    WHILE           reduce using rule 29 (assignment0 -> ID EQUALS expression0 SEMICOLON .)
    RBRACKET        reduce using rule 29 (assignment0 -> ID EQUALS expression0 SEMICOLON .)


state 64

    (90) expression0 -> exp0 expression1 .

    SEMICOLON       reduce using rule 90 (expression0 -> exp0 expression1 .)
    COMMA           reduce using rule 90 (expression0 -> exp0 expression1 .)
    RPAREN          reduce using rule 90 (expression0 -> exp0 expression1 .)


state 65

    (93) expression1 -> empty .

    SEMICOLON       reduce using rule 93 (expression1 -> empty .)
    COMMA           reduce using rule 93 (expression1 -> empty .)
    RPAREN          reduce using rule 93 (expression1 -> empty .)


state 66

    (94) expression1 -> expression2 .

    SEMICOLON       reduce using rule 94 (expression1 -> expression2 .)
    COMMA           reduce using rule 94 (expression1 -> expression2 .)
    RPAREN          reduce using rule 94 (expression1 -> expression2 .)


state 67

    (95) expression2 -> LTHAN . expression3
    (99) expression3 -> . exp0
    (100) expression3 -> . CONST_BOOL
    (101) expression3 -> . attr_access0
    (59) exp0 -> . term0 exp1
    (102) attr_access0 -> . ID DOT ID
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 111
    ID              shift and go to state 28
    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    expression3                    shift and go to state 109
    exp0                           shift and go to state 110
    attr_access0                   shift and go to state 112
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41

state 68

    (96) expression2 -> GTHAN . expression3
    (99) expression3 -> . exp0
    (100) expression3 -> . CONST_BOOL
    (101) expression3 -> . attr_access0
    (59) exp0 -> . term0 exp1
    (102) attr_access0 -> . ID DOT ID
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 111
    ID              shift and go to state 28
    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    expression3                    shift and go to state 113
    exp0                           shift and go to state 110
    attr_access0                   shift and go to state 112
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41

state 69

    (97) expression2 -> DIFFERENT . expression3
    (99) expression3 -> . exp0
    (100) expression3 -> . CONST_BOOL
    (101) expression3 -> . attr_access0
    (59) exp0 -> . term0 exp1
    (102) attr_access0 -> . ID DOT ID
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 111
    ID              shift and go to state 28
    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    expression3                    shift and go to state 114
    exp0                           shift and go to state 110
    attr_access0                   shift and go to state 112
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41

state 70

    (98) expression2 -> EQUIVALENT . expression3
    (99) expression3 -> . exp0
    (100) expression3 -> . CONST_BOOL
    (101) expression3 -> . attr_access0
    (59) exp0 -> . term0 exp1
    (102) attr_access0 -> . ID DOT ID
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 111
    ID              shift and go to state 28
    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    expression3                    shift and go to state 115
    exp0                           shift and go to state 110
    attr_access0                   shift and go to state 112
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41

state 71

    (91) expression0 -> CONST_BOOL expression1 .

    SEMICOLON       reduce using rule 91 (expression0 -> CONST_BOOL expression1 .)
    COMMA           reduce using rule 91 (expression0 -> CONST_BOOL expression1 .)
    RPAREN          reduce using rule 91 (expression0 -> CONST_BOOL expression1 .)


state 72

    (92) expression0 -> attr_access0 expression1 .

    SEMICOLON       reduce using rule 92 (expression0 -> attr_access0 expression1 .)
    COMMA           reduce using rule 92 (expression0 -> attr_access0 expression1 .)
    RPAREN          reduce using rule 92 (expression0 -> attr_access0 expression1 .)


state 73

    (74) power0 -> attr_access0 power2 .

    MULTIPLY        reduce using rule 74 (power0 -> attr_access0 power2 .)
    DIVIDE          reduce using rule 74 (power0 -> attr_access0 power2 .)
    PLUS            reduce using rule 74 (power0 -> attr_access0 power2 .)
    MINUS           reduce using rule 74 (power0 -> attr_access0 power2 .)
    LTHAN           reduce using rule 74 (power0 -> attr_access0 power2 .)
    GTHAN           reduce using rule 74 (power0 -> attr_access0 power2 .)
    DIFFERENT       reduce using rule 74 (power0 -> attr_access0 power2 .)
    EQUIVALENT      reduce using rule 74 (power0 -> attr_access0 power2 .)
    SEMICOLON       reduce using rule 74 (power0 -> attr_access0 power2 .)
    RSQRBRACKET     reduce using rule 74 (power0 -> attr_access0 power2 .)
    RPAREN          reduce using rule 74 (power0 -> attr_access0 power2 .)
    COMMA           reduce using rule 74 (power0 -> attr_access0 power2 .)


state 74

    (93) expression1 -> empty .
    (80) power2 -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 80 (power2 -> empty .)
  ! reduce/reduce conflict for COMMA resolved using rule 80 (power2 -> empty .)
  ! reduce/reduce conflict for RPAREN resolved using rule 80 (power2 -> empty .)
    MULTIPLY        reduce using rule 80 (power2 -> empty .)
    DIVIDE          reduce using rule 80 (power2 -> empty .)
    PLUS            reduce using rule 80 (power2 -> empty .)
    MINUS           reduce using rule 80 (power2 -> empty .)
    LTHAN           reduce using rule 80 (power2 -> empty .)
    GTHAN           reduce using rule 80 (power2 -> empty .)
    DIFFERENT       reduce using rule 80 (power2 -> empty .)
    EQUIVALENT      reduce using rule 80 (power2 -> empty .)
    SEMICOLON       reduce using rule 80 (power2 -> empty .)
    COMMA           reduce using rule 80 (power2 -> empty .)
    RPAREN          reduce using rule 80 (power2 -> empty .)

  ! SEMICOLON       [ reduce using rule 93 (expression1 -> empty .) ]
  ! COMMA           [ reduce using rule 93 (expression1 -> empty .) ]
  ! RPAREN          [ reduce using rule 93 (expression1 -> empty .) ]


state 75

    (78) power2 -> POWER . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (102) attr_access0 -> . ID DOT ID

    LPAREN          shift and go to state 38
    ID              shift and go to state 44
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    power0                         shift and go to state 116
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41
    attr_access0                   shift and go to state 46

state 76

    (79) power2 -> SQRT . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (102) attr_access0 -> . ID DOT ID

    LPAREN          shift and go to state 38
    ID              shift and go to state 44
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    power0                         shift and go to state 117
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41
    attr_access0                   shift and go to state 46

state 77

    (59) exp0 -> term0 exp1 .

    LTHAN           reduce using rule 59 (exp0 -> term0 exp1 .)
    GTHAN           reduce using rule 59 (exp0 -> term0 exp1 .)
    DIFFERENT       reduce using rule 59 (exp0 -> term0 exp1 .)
    EQUIVALENT      reduce using rule 59 (exp0 -> term0 exp1 .)
    SEMICOLON       reduce using rule 59 (exp0 -> term0 exp1 .)
    RSQRBRACKET     reduce using rule 59 (exp0 -> term0 exp1 .)
    RPAREN          reduce using rule 59 (exp0 -> term0 exp1 .)
    COMMA           reduce using rule 59 (exp0 -> term0 exp1 .)


state 78

    (60) exp1 -> PLUS . exp0
    (59) exp0 -> . term0 exp1
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (102) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    ID              shift and go to state 44
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    exp0                           shift and go to state 118
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41
    attr_access0                   shift and go to state 46

state 79

    (61) exp1 -> MINUS . exp0
    (59) exp0 -> . term0 exp1
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (102) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    ID              shift and go to state 44
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    exp0                           shift and go to state 119
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41
    attr_access0                   shift and go to state 46

state 80

    (62) exp1 -> empty .

    LTHAN           reduce using rule 62 (exp1 -> empty .)
    GTHAN           reduce using rule 62 (exp1 -> empty .)
    DIFFERENT       reduce using rule 62 (exp1 -> empty .)
    EQUIVALENT      reduce using rule 62 (exp1 -> empty .)
    SEMICOLON       reduce using rule 62 (exp1 -> empty .)
    RSQRBRACKET     reduce using rule 62 (exp1 -> empty .)
    RPAREN          reduce using rule 62 (exp1 -> empty .)
    COMMA           reduce using rule 62 (exp1 -> empty .)


state 81

    (63) term0 -> factor term1 .

    PLUS            reduce using rule 63 (term0 -> factor term1 .)
    MINUS           reduce using rule 63 (term0 -> factor term1 .)
    LTHAN           reduce using rule 63 (term0 -> factor term1 .)
    GTHAN           reduce using rule 63 (term0 -> factor term1 .)
    DIFFERENT       reduce using rule 63 (term0 -> factor term1 .)
    EQUIVALENT      reduce using rule 63 (term0 -> factor term1 .)
    SEMICOLON       reduce using rule 63 (term0 -> factor term1 .)
    RSQRBRACKET     reduce using rule 63 (term0 -> factor term1 .)
    RPAREN          reduce using rule 63 (term0 -> factor term1 .)
    COMMA           reduce using rule 63 (term0 -> factor term1 .)


state 82

    (64) term1 -> MULTIPLY . term0
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (102) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    ID              shift and go to state 44
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    term0                          shift and go to state 120
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41
    attr_access0                   shift and go to state 46

state 83

    (65) term1 -> DIVIDE . term0
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (102) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    ID              shift and go to state 44
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    term0                          shift and go to state 121
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41
    attr_access0                   shift and go to state 46

state 84

    (66) term1 -> empty .

    PLUS            reduce using rule 66 (term1 -> empty .)
    MINUS           reduce using rule 66 (term1 -> empty .)
    LTHAN           reduce using rule 66 (term1 -> empty .)
    GTHAN           reduce using rule 66 (term1 -> empty .)
    DIFFERENT       reduce using rule 66 (term1 -> empty .)
    EQUIVALENT      reduce using rule 66 (term1 -> empty .)
    SEMICOLON       reduce using rule 66 (term1 -> empty .)
    RSQRBRACKET     reduce using rule 66 (term1 -> empty .)
    RPAREN          reduce using rule 66 (term1 -> empty .)
    COMMA           reduce using rule 66 (term1 -> empty .)


state 85

    (67) factor -> PLUS power0 .

    MULTIPLY        reduce using rule 67 (factor -> PLUS power0 .)
    DIVIDE          reduce using rule 67 (factor -> PLUS power0 .)
    PLUS            reduce using rule 67 (factor -> PLUS power0 .)
    MINUS           reduce using rule 67 (factor -> PLUS power0 .)
    LTHAN           reduce using rule 67 (factor -> PLUS power0 .)
    GTHAN           reduce using rule 67 (factor -> PLUS power0 .)
    DIFFERENT       reduce using rule 67 (factor -> PLUS power0 .)
    EQUIVALENT      reduce using rule 67 (factor -> PLUS power0 .)
    SEMICOLON       reduce using rule 67 (factor -> PLUS power0 .)
    RSQRBRACKET     reduce using rule 67 (factor -> PLUS power0 .)
    RPAREN          reduce using rule 67 (factor -> PLUS power0 .)
    COMMA           reduce using rule 67 (factor -> PLUS power0 .)


state 86

    (68) factor -> MINUS power0 .

    MULTIPLY        reduce using rule 68 (factor -> MINUS power0 .)
    DIVIDE          reduce using rule 68 (factor -> MINUS power0 .)
    PLUS            reduce using rule 68 (factor -> MINUS power0 .)
    MINUS           reduce using rule 68 (factor -> MINUS power0 .)
    LTHAN           reduce using rule 68 (factor -> MINUS power0 .)
    GTHAN           reduce using rule 68 (factor -> MINUS power0 .)
    DIFFERENT       reduce using rule 68 (factor -> MINUS power0 .)
    EQUIVALENT      reduce using rule 68 (factor -> MINUS power0 .)
    SEMICOLON       reduce using rule 68 (factor -> MINUS power0 .)
    RSQRBRACKET     reduce using rule 68 (factor -> MINUS power0 .)
    RPAREN          reduce using rule 68 (factor -> MINUS power0 .)
    COMMA           reduce using rule 68 (factor -> MINUS power0 .)


state 87

    (70) power0 -> LPAREN exp0 . RPAREN power2

    RPAREN          shift and go to state 122


state 88

    (71) power0 -> const_var power2 .

    MULTIPLY        reduce using rule 71 (power0 -> const_var power2 .)
    DIVIDE          reduce using rule 71 (power0 -> const_var power2 .)
    PLUS            reduce using rule 71 (power0 -> const_var power2 .)
    MINUS           reduce using rule 71 (power0 -> const_var power2 .)
    LTHAN           reduce using rule 71 (power0 -> const_var power2 .)
    GTHAN           reduce using rule 71 (power0 -> const_var power2 .)
    DIFFERENT       reduce using rule 71 (power0 -> const_var power2 .)
    EQUIVALENT      reduce using rule 71 (power0 -> const_var power2 .)
    SEMICOLON       reduce using rule 71 (power0 -> const_var power2 .)
    RSQRBRACKET     reduce using rule 71 (power0 -> const_var power2 .)
    RPAREN          reduce using rule 71 (power0 -> const_var power2 .)
    COMMA           reduce using rule 71 (power0 -> const_var power2 .)


state 89

    (80) power2 -> empty .

    MULTIPLY        reduce using rule 80 (power2 -> empty .)
    DIVIDE          reduce using rule 80 (power2 -> empty .)
    PLUS            reduce using rule 80 (power2 -> empty .)
    MINUS           reduce using rule 80 (power2 -> empty .)
    LTHAN           reduce using rule 80 (power2 -> empty .)
    GTHAN           reduce using rule 80 (power2 -> empty .)
    DIFFERENT       reduce using rule 80 (power2 -> empty .)
    EQUIVALENT      reduce using rule 80 (power2 -> empty .)
    SEMICOLON       reduce using rule 80 (power2 -> empty .)
    RSQRBRACKET     reduce using rule 80 (power2 -> empty .)
    RPAREN          reduce using rule 80 (power2 -> empty .)
    COMMA           reduce using rule 80 (power2 -> empty .)


state 90

    (72) power0 -> function_call power2 .

    MULTIPLY        reduce using rule 72 (power0 -> function_call power2 .)
    DIVIDE          reduce using rule 72 (power0 -> function_call power2 .)
    PLUS            reduce using rule 72 (power0 -> function_call power2 .)
    MINUS           reduce using rule 72 (power0 -> function_call power2 .)
    LTHAN           reduce using rule 72 (power0 -> function_call power2 .)
    GTHAN           reduce using rule 72 (power0 -> function_call power2 .)
    DIFFERENT       reduce using rule 72 (power0 -> function_call power2 .)
    EQUIVALENT      reduce using rule 72 (power0 -> function_call power2 .)
    SEMICOLON       reduce using rule 72 (power0 -> function_call power2 .)
    RSQRBRACKET     reduce using rule 72 (power0 -> function_call power2 .)
    RPAREN          reduce using rule 72 (power0 -> function_call power2 .)
    COMMA           reduce using rule 72 (power0 -> function_call power2 .)


state 91

    (73) power0 -> method_call0 power2 .

    MULTIPLY        reduce using rule 73 (power0 -> method_call0 power2 .)
    DIVIDE          reduce using rule 73 (power0 -> method_call0 power2 .)
    PLUS            reduce using rule 73 (power0 -> method_call0 power2 .)
    MINUS           reduce using rule 73 (power0 -> method_call0 power2 .)
    LTHAN           reduce using rule 73 (power0 -> method_call0 power2 .)
    GTHAN           reduce using rule 73 (power0 -> method_call0 power2 .)
    DIFFERENT       reduce using rule 73 (power0 -> method_call0 power2 .)
    EQUIVALENT      reduce using rule 73 (power0 -> method_call0 power2 .)
    SEMICOLON       reduce using rule 73 (power0 -> method_call0 power2 .)
    RSQRBRACKET     reduce using rule 73 (power0 -> method_call0 power2 .)
    RPAREN          reduce using rule 73 (power0 -> method_call0 power2 .)
    COMMA           reduce using rule 73 (power0 -> method_call0 power2 .)


state 92

    (103) method_call0 -> ID DOT . function_call
    (102) attr_access0 -> ID DOT . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN

    ID              shift and go to state 102

    function_call                  shift and go to state 103

state 93

    (30) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET . EQUALS expression0 SEMICOLON
    (31) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET . LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON

    EQUALS          shift and go to state 124
    LSQRBRACKET     shift and go to state 123


state 94

    (139) main0 -> MAIN main_scope LBRACKET . main1 RBRACKET
    (140) main1 -> . declaration0 main1
    (141) main1 -> . statement main1
    (142) main1 -> . empty
    (22) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (129) statement -> . assignment0
    (130) statement -> . object_assignment
    (131) statement -> . condition0
    (132) statement -> . writing0
    (133) statement -> . reading
    (134) statement -> . return
    (135) statement -> . function_call SEMICOLON
    (136) statement -> . method_call0 SEMICOLON
    (137) statement -> . while
    (144) empty -> .
    (23) decl_id_def -> . ID
    (29) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (30) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (31) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (138) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (114) condition0 -> . IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON
    (117) writing0 -> . WRITE LPAREN writing1 RPAREN SEMICOLON
    (122) reading -> . READ ID SEMICOLON
    (123) return -> . RETURN expression0 SEMICOLON
    (124) return -> . RETURN SEMICOLON
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (125) while -> . WHILE LPAREN expression0 RPAREN block0

    RBRACKET        reduce using rule 144 (empty -> .)
    ID              shift and go to state 138
    IF              shift and go to state 139
    WRITE           shift and go to state 140
    READ            shift and go to state 141
    RETURN          shift and go to state 142
    WHILE           shift and go to state 143

    main1                          shift and go to state 125
    declaration0                   shift and go to state 126
    statement                      shift and go to state 127
    empty                          shift and go to state 128
    decl_id_def                    shift and go to state 15
    assignment0                    shift and go to state 129
    object_assignment              shift and go to state 130
    condition0                     shift and go to state 131
    writing0                       shift and go to state 132
    reading                        shift and go to state 133
    return                         shift and go to state 134
    function_call                  shift and go to state 135
    method_call0                   shift and go to state 136
    while                          shift and go to state 137

state 95

    (8) class0 -> CLASS id_def class1 LBRACKET . class2 constructor class3 RBRACKET SEMICOLON
    (12) class2 -> . attributes
    (13) class2 -> . empty
    (33) attributes -> . data_access simple_declaration attributes
    (34) attributes -> . simple_assignment attributes
    (35) attributes -> . empty
    (144) empty -> .
    (104) data_access -> . PRIVATE
    (105) data_access -> . PUBLIC
    (50) simple_assignment -> . ID EQUALS expression0 SEMICOLON

    CONSTRUCT       reduce using rule 144 (empty -> .)
    PRIVATE         shift and go to state 149
    PUBLIC          shift and go to state 150
    ID              shift and go to state 151

    class2                         shift and go to state 144
    attributes                     shift and go to state 145
    empty                          shift and go to state 146
    data_access                    shift and go to state 147
    simple_assignment              shift and go to state 148

state 96

    (10) class1 -> COLON ID .

    LBRACKET        reduce using rule 10 (class1 -> COLON ID .)


state 97

    (16) function0 -> DEF ID LPAREN params0 . RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0

    RPAREN          shift and go to state 152


state 98

    (38) params0 -> type . ID params1

    ID              shift and go to state 153


state 99

    (39) params0 -> empty .

    RPAREN          reduce using rule 39 (params0 -> empty .)


state 100

    (22) declaration0 -> decl_id_def COLON declaration1 SEMICOLON .

    CLASS           reduce using rule 22 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    DEF             reduce using rule 22 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    ID              reduce using rule 22 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    MAIN            reduce using rule 22 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    IF              reduce using rule 22 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    WRITE           reduce using rule 22 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    READ            reduce using rule 22 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    RETURN          reduce using rule 22 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    WHILE           reduce using rule 22 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)
    RBRACKET        reduce using rule 22 (declaration0 -> decl_id_def COLON declaration1 SEMICOLON .)


state 101

    (26) declaration1 -> type LSQRBRACKET . exp0 RSQRBRACKET declaration2
    (59) exp0 -> . term0 exp1
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (102) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    ID              shift and go to state 44
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    exp0                           shift and go to state 154
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41
    attr_access0                   shift and go to state 46

state 102

    (102) attr_access0 -> ID DOT ID .
    (84) function_call -> ID . LPAREN function_call_params0 RPAREN

    POWER           reduce using rule 102 (attr_access0 -> ID DOT ID .)
    SQRT            reduce using rule 102 (attr_access0 -> ID DOT ID .)
    LTHAN           reduce using rule 102 (attr_access0 -> ID DOT ID .)
    GTHAN           reduce using rule 102 (attr_access0 -> ID DOT ID .)
    DIFFERENT       reduce using rule 102 (attr_access0 -> ID DOT ID .)
    EQUIVALENT      reduce using rule 102 (attr_access0 -> ID DOT ID .)
    SEMICOLON       reduce using rule 102 (attr_access0 -> ID DOT ID .)
    MULTIPLY        reduce using rule 102 (attr_access0 -> ID DOT ID .)
    DIVIDE          reduce using rule 102 (attr_access0 -> ID DOT ID .)
    PLUS            reduce using rule 102 (attr_access0 -> ID DOT ID .)
    MINUS           reduce using rule 102 (attr_access0 -> ID DOT ID .)
    RSQRBRACKET     reduce using rule 102 (attr_access0 -> ID DOT ID .)
    RPAREN          reduce using rule 102 (attr_access0 -> ID DOT ID .)
    COMMA           reduce using rule 102 (attr_access0 -> ID DOT ID .)
    LPAREN          shift and go to state 62


state 103

    (103) method_call0 -> ID DOT function_call .

    POWER           reduce using rule 103 (method_call0 -> ID DOT function_call .)
    SQRT            reduce using rule 103 (method_call0 -> ID DOT function_call .)
    MULTIPLY        reduce using rule 103 (method_call0 -> ID DOT function_call .)
    DIVIDE          reduce using rule 103 (method_call0 -> ID DOT function_call .)
    PLUS            reduce using rule 103 (method_call0 -> ID DOT function_call .)
    MINUS           reduce using rule 103 (method_call0 -> ID DOT function_call .)
    LTHAN           reduce using rule 103 (method_call0 -> ID DOT function_call .)
    GTHAN           reduce using rule 103 (method_call0 -> ID DOT function_call .)
    DIFFERENT       reduce using rule 103 (method_call0 -> ID DOT function_call .)
    EQUIVALENT      reduce using rule 103 (method_call0 -> ID DOT function_call .)
    SEMICOLON       reduce using rule 103 (method_call0 -> ID DOT function_call .)
    RSQRBRACKET     reduce using rule 103 (method_call0 -> ID DOT function_call .)
    RPAREN          reduce using rule 103 (method_call0 -> ID DOT function_call .)
    COMMA           reduce using rule 103 (method_call0 -> ID DOT function_call .)


state 104

    (75) power0 -> ID LSQRBRACKET exp0 . RSQRBRACKET power1 power2

    RSQRBRACKET     shift and go to state 155


state 105

    (84) function_call -> ID LPAREN function_call_params0 . RPAREN

    RPAREN          shift and go to state 156


state 106

    (85) function_call_params0 -> expression0 . function_call_params1
    (88) function_call_params1 -> . COMMA function_call_params0
    (89) function_call_params1 -> . empty
    (144) empty -> .

    COMMA           shift and go to state 158
    RPAREN          reduce using rule 144 (empty -> .)

    function_call_params1          shift and go to state 157
    empty                          shift and go to state 159

state 107

    (86) function_call_params0 -> CONST_STRING . function_call_params1
    (88) function_call_params1 -> . COMMA function_call_params0
    (89) function_call_params1 -> . empty
    (144) empty -> .

    COMMA           shift and go to state 158
    RPAREN          reduce using rule 144 (empty -> .)

    function_call_params1          shift and go to state 160
    empty                          shift and go to state 159

state 108

    (87) function_call_params0 -> empty . function_call_params1
    (88) function_call_params1 -> . COMMA function_call_params0
    (89) function_call_params1 -> . empty
    (144) empty -> .

    COMMA           shift and go to state 158
    RPAREN          reduce using rule 144 (empty -> .)

    empty                          shift and go to state 159
    function_call_params1          shift and go to state 161

state 109

    (95) expression2 -> LTHAN expression3 .

    SEMICOLON       reduce using rule 95 (expression2 -> LTHAN expression3 .)
    COMMA           reduce using rule 95 (expression2 -> LTHAN expression3 .)
    RPAREN          reduce using rule 95 (expression2 -> LTHAN expression3 .)


state 110

    (99) expression3 -> exp0 .

    SEMICOLON       reduce using rule 99 (expression3 -> exp0 .)
    COMMA           reduce using rule 99 (expression3 -> exp0 .)
    RPAREN          reduce using rule 99 (expression3 -> exp0 .)


state 111

    (100) expression3 -> CONST_BOOL .

    SEMICOLON       reduce using rule 100 (expression3 -> CONST_BOOL .)
    COMMA           reduce using rule 100 (expression3 -> CONST_BOOL .)
    RPAREN          reduce using rule 100 (expression3 -> CONST_BOOL .)


state 112

    (101) expression3 -> attr_access0 .
    (74) power0 -> attr_access0 . power2
    (78) power2 -> . POWER power0
    (79) power2 -> . SQRT power0
    (80) power2 -> . empty
    (144) empty -> .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 101 (expression3 -> attr_access0 .)
  ! reduce/reduce conflict for COMMA resolved using rule 101 (expression3 -> attr_access0 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 101 (expression3 -> attr_access0 .)
    SEMICOLON       reduce using rule 101 (expression3 -> attr_access0 .)
    COMMA           reduce using rule 101 (expression3 -> attr_access0 .)
    RPAREN          reduce using rule 101 (expression3 -> attr_access0 .)
    POWER           shift and go to state 75
    SQRT            shift and go to state 76
    MULTIPLY        reduce using rule 144 (empty -> .)
    DIVIDE          reduce using rule 144 (empty -> .)
    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)

  ! SEMICOLON       [ reduce using rule 144 (empty -> .) ]
  ! COMMA           [ reduce using rule 144 (empty -> .) ]
  ! RPAREN          [ reduce using rule 144 (empty -> .) ]

    power2                         shift and go to state 73
    empty                          shift and go to state 89

state 113

    (96) expression2 -> GTHAN expression3 .

    SEMICOLON       reduce using rule 96 (expression2 -> GTHAN expression3 .)
    COMMA           reduce using rule 96 (expression2 -> GTHAN expression3 .)
    RPAREN          reduce using rule 96 (expression2 -> GTHAN expression3 .)


state 114

    (97) expression2 -> DIFFERENT expression3 .

    SEMICOLON       reduce using rule 97 (expression2 -> DIFFERENT expression3 .)
    COMMA           reduce using rule 97 (expression2 -> DIFFERENT expression3 .)
    RPAREN          reduce using rule 97 (expression2 -> DIFFERENT expression3 .)


state 115

    (98) expression2 -> EQUIVALENT expression3 .

    SEMICOLON       reduce using rule 98 (expression2 -> EQUIVALENT expression3 .)
    COMMA           reduce using rule 98 (expression2 -> EQUIVALENT expression3 .)
    RPAREN          reduce using rule 98 (expression2 -> EQUIVALENT expression3 .)


state 116

    (78) power2 -> POWER power0 .

    MULTIPLY        reduce using rule 78 (power2 -> POWER power0 .)
    DIVIDE          reduce using rule 78 (power2 -> POWER power0 .)
    PLUS            reduce using rule 78 (power2 -> POWER power0 .)
    MINUS           reduce using rule 78 (power2 -> POWER power0 .)
    LTHAN           reduce using rule 78 (power2 -> POWER power0 .)
    GTHAN           reduce using rule 78 (power2 -> POWER power0 .)
    DIFFERENT       reduce using rule 78 (power2 -> POWER power0 .)
    EQUIVALENT      reduce using rule 78 (power2 -> POWER power0 .)
    SEMICOLON       reduce using rule 78 (power2 -> POWER power0 .)
    COMMA           reduce using rule 78 (power2 -> POWER power0 .)
    RPAREN          reduce using rule 78 (power2 -> POWER power0 .)
    RSQRBRACKET     reduce using rule 78 (power2 -> POWER power0 .)


state 117

    (79) power2 -> SQRT power0 .

    MULTIPLY        reduce using rule 79 (power2 -> SQRT power0 .)
    DIVIDE          reduce using rule 79 (power2 -> SQRT power0 .)
    PLUS            reduce using rule 79 (power2 -> SQRT power0 .)
    MINUS           reduce using rule 79 (power2 -> SQRT power0 .)
    LTHAN           reduce using rule 79 (power2 -> SQRT power0 .)
    GTHAN           reduce using rule 79 (power2 -> SQRT power0 .)
    DIFFERENT       reduce using rule 79 (power2 -> SQRT power0 .)
    EQUIVALENT      reduce using rule 79 (power2 -> SQRT power0 .)
    SEMICOLON       reduce using rule 79 (power2 -> SQRT power0 .)
    COMMA           reduce using rule 79 (power2 -> SQRT power0 .)
    RPAREN          reduce using rule 79 (power2 -> SQRT power0 .)
    RSQRBRACKET     reduce using rule 79 (power2 -> SQRT power0 .)


state 118

    (60) exp1 -> PLUS exp0 .

    LTHAN           reduce using rule 60 (exp1 -> PLUS exp0 .)
    GTHAN           reduce using rule 60 (exp1 -> PLUS exp0 .)
    DIFFERENT       reduce using rule 60 (exp1 -> PLUS exp0 .)
    EQUIVALENT      reduce using rule 60 (exp1 -> PLUS exp0 .)
    SEMICOLON       reduce using rule 60 (exp1 -> PLUS exp0 .)
    RSQRBRACKET     reduce using rule 60 (exp1 -> PLUS exp0 .)
    RPAREN          reduce using rule 60 (exp1 -> PLUS exp0 .)
    COMMA           reduce using rule 60 (exp1 -> PLUS exp0 .)


state 119

    (61) exp1 -> MINUS exp0 .

    LTHAN           reduce using rule 61 (exp1 -> MINUS exp0 .)
    GTHAN           reduce using rule 61 (exp1 -> MINUS exp0 .)
    DIFFERENT       reduce using rule 61 (exp1 -> MINUS exp0 .)
    EQUIVALENT      reduce using rule 61 (exp1 -> MINUS exp0 .)
    SEMICOLON       reduce using rule 61 (exp1 -> MINUS exp0 .)
    RSQRBRACKET     reduce using rule 61 (exp1 -> MINUS exp0 .)
    RPAREN          reduce using rule 61 (exp1 -> MINUS exp0 .)
    COMMA           reduce using rule 61 (exp1 -> MINUS exp0 .)


state 120

    (64) term1 -> MULTIPLY term0 .

    PLUS            reduce using rule 64 (term1 -> MULTIPLY term0 .)
    MINUS           reduce using rule 64 (term1 -> MULTIPLY term0 .)
    LTHAN           reduce using rule 64 (term1 -> MULTIPLY term0 .)
    GTHAN           reduce using rule 64 (term1 -> MULTIPLY term0 .)
    DIFFERENT       reduce using rule 64 (term1 -> MULTIPLY term0 .)
    EQUIVALENT      reduce using rule 64 (term1 -> MULTIPLY term0 .)
    SEMICOLON       reduce using rule 64 (term1 -> MULTIPLY term0 .)
    RSQRBRACKET     reduce using rule 64 (term1 -> MULTIPLY term0 .)
    RPAREN          reduce using rule 64 (term1 -> MULTIPLY term0 .)
    COMMA           reduce using rule 64 (term1 -> MULTIPLY term0 .)


state 121

    (65) term1 -> DIVIDE term0 .

    PLUS            reduce using rule 65 (term1 -> DIVIDE term0 .)
    MINUS           reduce using rule 65 (term1 -> DIVIDE term0 .)
    LTHAN           reduce using rule 65 (term1 -> DIVIDE term0 .)
    GTHAN           reduce using rule 65 (term1 -> DIVIDE term0 .)
    DIFFERENT       reduce using rule 65 (term1 -> DIVIDE term0 .)
    EQUIVALENT      reduce using rule 65 (term1 -> DIVIDE term0 .)
    SEMICOLON       reduce using rule 65 (term1 -> DIVIDE term0 .)
    RSQRBRACKET     reduce using rule 65 (term1 -> DIVIDE term0 .)
    RPAREN          reduce using rule 65 (term1 -> DIVIDE term0 .)
    COMMA           reduce using rule 65 (term1 -> DIVIDE term0 .)


state 122

    (70) power0 -> LPAREN exp0 RPAREN . power2
    (78) power2 -> . POWER power0
    (79) power2 -> . SQRT power0
    (80) power2 -> . empty
    (144) empty -> .

    POWER           shift and go to state 75
    SQRT            shift and go to state 76
    MULTIPLY        reduce using rule 144 (empty -> .)
    DIVIDE          reduce using rule 144 (empty -> .)
    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)
    LTHAN           reduce using rule 144 (empty -> .)
    GTHAN           reduce using rule 144 (empty -> .)
    DIFFERENT       reduce using rule 144 (empty -> .)
    EQUIVALENT      reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    RSQRBRACKET     reduce using rule 144 (empty -> .)
    RPAREN          reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)

    power2                         shift and go to state 162
    empty                          shift and go to state 89

state 123

    (31) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET . exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (59) exp0 -> . term0 exp1
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (102) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    ID              shift and go to state 44
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    exp0                           shift and go to state 163
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41
    attr_access0                   shift and go to state 46

state 124

    (30) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS . expression0 SEMICOLON
    (90) expression0 -> . exp0 expression1
    (91) expression0 -> . CONST_BOOL expression1
    (92) expression0 -> . attr_access0 expression1
    (59) exp0 -> . term0 exp1
    (102) attr_access0 -> . ID DOT ID
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 31
    ID              shift and go to state 28
    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    exp0                           shift and go to state 30
    expression0                    shift and go to state 164
    attr_access0                   shift and go to state 32
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41

state 125

    (139) main0 -> MAIN main_scope LBRACKET main1 . RBRACKET

    RBRACKET        shift and go to state 165


state 126

    (140) main1 -> declaration0 . main1
    (140) main1 -> . declaration0 main1
    (141) main1 -> . statement main1
    (142) main1 -> . empty
    (22) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (129) statement -> . assignment0
    (130) statement -> . object_assignment
    (131) statement -> . condition0
    (132) statement -> . writing0
    (133) statement -> . reading
    (134) statement -> . return
    (135) statement -> . function_call SEMICOLON
    (136) statement -> . method_call0 SEMICOLON
    (137) statement -> . while
    (144) empty -> .
    (23) decl_id_def -> . ID
    (29) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (30) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (31) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (138) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (114) condition0 -> . IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON
    (117) writing0 -> . WRITE LPAREN writing1 RPAREN SEMICOLON
    (122) reading -> . READ ID SEMICOLON
    (123) return -> . RETURN expression0 SEMICOLON
    (124) return -> . RETURN SEMICOLON
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (125) while -> . WHILE LPAREN expression0 RPAREN block0

    RBRACKET        reduce using rule 144 (empty -> .)
    ID              shift and go to state 138
    IF              shift and go to state 139
    WRITE           shift and go to state 140
    READ            shift and go to state 141
    RETURN          shift and go to state 142
    WHILE           shift and go to state 143

    declaration0                   shift and go to state 126
    main1                          shift and go to state 166
    statement                      shift and go to state 127
    empty                          shift and go to state 128
    decl_id_def                    shift and go to state 15
    assignment0                    shift and go to state 129
    object_assignment              shift and go to state 130
    condition0                     shift and go to state 131
    writing0                       shift and go to state 132
    reading                        shift and go to state 133
    return                         shift and go to state 134
    function_call                  shift and go to state 135
    method_call0                   shift and go to state 136
    while                          shift and go to state 137

state 127

    (141) main1 -> statement . main1
    (140) main1 -> . declaration0 main1
    (141) main1 -> . statement main1
    (142) main1 -> . empty
    (22) declaration0 -> . decl_id_def COLON declaration1 SEMICOLON
    (129) statement -> . assignment0
    (130) statement -> . object_assignment
    (131) statement -> . condition0
    (132) statement -> . writing0
    (133) statement -> . reading
    (134) statement -> . return
    (135) statement -> . function_call SEMICOLON
    (136) statement -> . method_call0 SEMICOLON
    (137) statement -> . while
    (144) empty -> .
    (23) decl_id_def -> . ID
    (29) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (30) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (31) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (138) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (114) condition0 -> . IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON
    (117) writing0 -> . WRITE LPAREN writing1 RPAREN SEMICOLON
    (122) reading -> . READ ID SEMICOLON
    (123) return -> . RETURN expression0 SEMICOLON
    (124) return -> . RETURN SEMICOLON
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (125) while -> . WHILE LPAREN expression0 RPAREN block0

    RBRACKET        reduce using rule 144 (empty -> .)
    ID              shift and go to state 138
    IF              shift and go to state 139
    WRITE           shift and go to state 140
    READ            shift and go to state 141
    RETURN          shift and go to state 142
    WHILE           shift and go to state 143

    statement                      shift and go to state 127
    main1                          shift and go to state 167
    declaration0                   shift and go to state 126
    empty                          shift and go to state 128
    decl_id_def                    shift and go to state 15
    assignment0                    shift and go to state 129
    object_assignment              shift and go to state 130
    condition0                     shift and go to state 131
    writing0                       shift and go to state 132
    reading                        shift and go to state 133
    return                         shift and go to state 134
    function_call                  shift and go to state 135
    method_call0                   shift and go to state 136
    while                          shift and go to state 137

state 128

    (142) main1 -> empty .

    RBRACKET        reduce using rule 142 (main1 -> empty .)


state 129

    (129) statement -> assignment0 .

    ID              reduce using rule 129 (statement -> assignment0 .)
    IF              reduce using rule 129 (statement -> assignment0 .)
    WRITE           reduce using rule 129 (statement -> assignment0 .)
    READ            reduce using rule 129 (statement -> assignment0 .)
    RETURN          reduce using rule 129 (statement -> assignment0 .)
    WHILE           reduce using rule 129 (statement -> assignment0 .)
    RBRACKET        reduce using rule 129 (statement -> assignment0 .)


state 130

    (130) statement -> object_assignment .

    ID              reduce using rule 130 (statement -> object_assignment .)
    IF              reduce using rule 130 (statement -> object_assignment .)
    WRITE           reduce using rule 130 (statement -> object_assignment .)
    READ            reduce using rule 130 (statement -> object_assignment .)
    RETURN          reduce using rule 130 (statement -> object_assignment .)
    WHILE           reduce using rule 130 (statement -> object_assignment .)
    RBRACKET        reduce using rule 130 (statement -> object_assignment .)


state 131

    (131) statement -> condition0 .

    ID              reduce using rule 131 (statement -> condition0 .)
    IF              reduce using rule 131 (statement -> condition0 .)
    WRITE           reduce using rule 131 (statement -> condition0 .)
    READ            reduce using rule 131 (statement -> condition0 .)
    RETURN          reduce using rule 131 (statement -> condition0 .)
    WHILE           reduce using rule 131 (statement -> condition0 .)
    RBRACKET        reduce using rule 131 (statement -> condition0 .)


state 132

    (132) statement -> writing0 .

    ID              reduce using rule 132 (statement -> writing0 .)
    IF              reduce using rule 132 (statement -> writing0 .)
    WRITE           reduce using rule 132 (statement -> writing0 .)
    READ            reduce using rule 132 (statement -> writing0 .)
    RETURN          reduce using rule 132 (statement -> writing0 .)
    WHILE           reduce using rule 132 (statement -> writing0 .)
    RBRACKET        reduce using rule 132 (statement -> writing0 .)


state 133

    (133) statement -> reading .

    ID              reduce using rule 133 (statement -> reading .)
    IF              reduce using rule 133 (statement -> reading .)
    WRITE           reduce using rule 133 (statement -> reading .)
    READ            reduce using rule 133 (statement -> reading .)
    RETURN          reduce using rule 133 (statement -> reading .)
    WHILE           reduce using rule 133 (statement -> reading .)
    RBRACKET        reduce using rule 133 (statement -> reading .)


state 134

    (134) statement -> return .

    ID              reduce using rule 134 (statement -> return .)
    IF              reduce using rule 134 (statement -> return .)
    WRITE           reduce using rule 134 (statement -> return .)
    READ            reduce using rule 134 (statement -> return .)
    RETURN          reduce using rule 134 (statement -> return .)
    WHILE           reduce using rule 134 (statement -> return .)
    RBRACKET        reduce using rule 134 (statement -> return .)


state 135

    (135) statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 168


state 136

    (136) statement -> method_call0 . SEMICOLON

    SEMICOLON       shift and go to state 169


state 137

    (137) statement -> while .

    ID              reduce using rule 137 (statement -> while .)
    IF              reduce using rule 137 (statement -> while .)
    WRITE           reduce using rule 137 (statement -> while .)
    READ            reduce using rule 137 (statement -> while .)
    RETURN          reduce using rule 137 (statement -> while .)
    WHILE           reduce using rule 137 (statement -> while .)
    RBRACKET        reduce using rule 137 (statement -> while .)


state 138

    (23) decl_id_def -> ID .
    (29) assignment0 -> ID . EQUALS expression0 SEMICOLON
    (30) assignment0 -> ID . LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (31) assignment0 -> ID . LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (138) object_assignment -> ID . EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (84) function_call -> ID . LPAREN function_call_params0 RPAREN
    (103) method_call0 -> ID . DOT function_call

    COLON           reduce using rule 23 (decl_id_def -> ID .)
    EQUALS          shift and go to state 170
    LSQRBRACKET     shift and go to state 17
    LPAREN          shift and go to state 62
    DOT             shift and go to state 171


state 139

    (114) condition0 -> IF . LPAREN expression0 RPAREN block0 condition1 SEMICOLON

    LPAREN          shift and go to state 172


state 140

    (117) writing0 -> WRITE . LPAREN writing1 RPAREN SEMICOLON

    LPAREN          shift and go to state 173


state 141

    (122) reading -> READ . ID SEMICOLON

    ID              shift and go to state 174


state 142

    (123) return -> RETURN . expression0 SEMICOLON
    (124) return -> RETURN . SEMICOLON
    (90) expression0 -> . exp0 expression1
    (91) expression0 -> . CONST_BOOL expression1
    (92) expression0 -> . attr_access0 expression1
    (59) exp0 -> . term0 exp1
    (102) attr_access0 -> . ID DOT ID
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call

    SEMICOLON       shift and go to state 176
    CONST_BOOL      shift and go to state 31
    ID              shift and go to state 28
    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    expression0                    shift and go to state 175
    exp0                           shift and go to state 30
    attr_access0                   shift and go to state 32
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41

state 143

    (125) while -> WHILE . LPAREN expression0 RPAREN block0

    LPAREN          shift and go to state 177


state 144

    (8) class0 -> CLASS id_def class1 LBRACKET class2 . constructor class3 RBRACKET SEMICOLON
    (32) constructor -> . CONSTRUCT ID LPAREN params0 RPAREN function_block0

    CONSTRUCT       shift and go to state 179

    constructor                    shift and go to state 178

state 145

    (12) class2 -> attributes .

    CONSTRUCT       reduce using rule 12 (class2 -> attributes .)


state 146

    (13) class2 -> empty .
    (35) attributes -> empty .

  ! reduce/reduce conflict for CONSTRUCT resolved using rule 13 (class2 -> empty .)
    CONSTRUCT       reduce using rule 13 (class2 -> empty .)

  ! CONSTRUCT       [ reduce using rule 35 (attributes -> empty .) ]


state 147

    (33) attributes -> data_access . simple_declaration attributes
    (49) simple_declaration -> . ID COLON type SEMICOLON

    ID              shift and go to state 181

    simple_declaration             shift and go to state 180

state 148

    (34) attributes -> simple_assignment . attributes
    (33) attributes -> . data_access simple_declaration attributes
    (34) attributes -> . simple_assignment attributes
    (35) attributes -> . empty
    (104) data_access -> . PRIVATE
    (105) data_access -> . PUBLIC
    (50) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (144) empty -> .

    PRIVATE         shift and go to state 149
    PUBLIC          shift and go to state 150
    ID              shift and go to state 151
    CONSTRUCT       reduce using rule 144 (empty -> .)

    simple_assignment              shift and go to state 148
    attributes                     shift and go to state 182
    data_access                    shift and go to state 147
    empty                          shift and go to state 183

state 149

    (104) data_access -> PRIVATE .

    ID              reduce using rule 104 (data_access -> PRIVATE .)
    DEF             reduce using rule 104 (data_access -> PRIVATE .)


state 150

    (105) data_access -> PUBLIC .

    ID              reduce using rule 105 (data_access -> PUBLIC .)
    DEF             reduce using rule 105 (data_access -> PUBLIC .)


state 151

    (50) simple_assignment -> ID . EQUALS expression0 SEMICOLON

    EQUALS          shift and go to state 184


state 152

    (16) function0 -> DEF ID LPAREN params0 RPAREN . ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0

    ARROW           shift and go to state 185


state 153

    (38) params0 -> type ID . params1
    (40) params1 -> . COMMA params0
    (41) params1 -> . empty
    (144) empty -> .

    COMMA           shift and go to state 187
    RPAREN          reduce using rule 144 (empty -> .)

    params1                        shift and go to state 186
    empty                          shift and go to state 188

state 154

    (26) declaration1 -> type LSQRBRACKET exp0 . RSQRBRACKET declaration2

    RSQRBRACKET     shift and go to state 189


state 155

    (75) power0 -> ID LSQRBRACKET exp0 RSQRBRACKET . power1 power2
    (76) power1 -> . LSQRBRACKET exp0 RSQRBRACKET
    (77) power1 -> . empty
    (144) empty -> .

    LSQRBRACKET     shift and go to state 190
    POWER           reduce using rule 144 (empty -> .)
    SQRT            reduce using rule 144 (empty -> .)
    MULTIPLY        reduce using rule 144 (empty -> .)
    DIVIDE          reduce using rule 144 (empty -> .)
    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)
    LTHAN           reduce using rule 144 (empty -> .)
    GTHAN           reduce using rule 144 (empty -> .)
    DIFFERENT       reduce using rule 144 (empty -> .)
    EQUIVALENT      reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    RSQRBRACKET     reduce using rule 144 (empty -> .)
    RPAREN          reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)

    power1                         shift and go to state 191
    empty                          shift and go to state 192

state 156

    (84) function_call -> ID LPAREN function_call_params0 RPAREN .

    POWER           reduce using rule 84 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    SQRT            reduce using rule 84 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    MULTIPLY        reduce using rule 84 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    DIVIDE          reduce using rule 84 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    PLUS            reduce using rule 84 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    MINUS           reduce using rule 84 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    LTHAN           reduce using rule 84 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    GTHAN           reduce using rule 84 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    DIFFERENT       reduce using rule 84 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    EQUIVALENT      reduce using rule 84 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    SEMICOLON       reduce using rule 84 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    RSQRBRACKET     reduce using rule 84 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    RPAREN          reduce using rule 84 (function_call -> ID LPAREN function_call_params0 RPAREN .)
    COMMA           reduce using rule 84 (function_call -> ID LPAREN function_call_params0 RPAREN .)


state 157

    (85) function_call_params0 -> expression0 function_call_params1 .

    RPAREN          reduce using rule 85 (function_call_params0 -> expression0 function_call_params1 .)


state 158

    (88) function_call_params1 -> COMMA . function_call_params0
    (85) function_call_params0 -> . expression0 function_call_params1
    (86) function_call_params0 -> . CONST_STRING function_call_params1
    (87) function_call_params0 -> . empty function_call_params1
    (90) expression0 -> . exp0 expression1
    (91) expression0 -> . CONST_BOOL expression1
    (92) expression0 -> . attr_access0 expression1
    (144) empty -> .
    (59) exp0 -> . term0 exp1
    (102) attr_access0 -> . ID DOT ID
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call

    CONST_STRING    shift and go to state 107
    CONST_BOOL      shift and go to state 31
    COMMA           reduce using rule 144 (empty -> .)
    RPAREN          reduce using rule 144 (empty -> .)
    ID              shift and go to state 28
    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    function_call_params0          shift and go to state 193
    expression0                    shift and go to state 106
    empty                          shift and go to state 108
    exp0                           shift and go to state 30
    attr_access0                   shift and go to state 32
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41

state 159

    (89) function_call_params1 -> empty .

    RPAREN          reduce using rule 89 (function_call_params1 -> empty .)


state 160

    (86) function_call_params0 -> CONST_STRING function_call_params1 .

    RPAREN          reduce using rule 86 (function_call_params0 -> CONST_STRING function_call_params1 .)


state 161

    (87) function_call_params0 -> empty function_call_params1 .

    RPAREN          reduce using rule 87 (function_call_params0 -> empty function_call_params1 .)


state 162

    (70) power0 -> LPAREN exp0 RPAREN power2 .

    MULTIPLY        reduce using rule 70 (power0 -> LPAREN exp0 RPAREN power2 .)
    DIVIDE          reduce using rule 70 (power0 -> LPAREN exp0 RPAREN power2 .)
    PLUS            reduce using rule 70 (power0 -> LPAREN exp0 RPAREN power2 .)
    MINUS           reduce using rule 70 (power0 -> LPAREN exp0 RPAREN power2 .)
    LTHAN           reduce using rule 70 (power0 -> LPAREN exp0 RPAREN power2 .)
    GTHAN           reduce using rule 70 (power0 -> LPAREN exp0 RPAREN power2 .)
    DIFFERENT       reduce using rule 70 (power0 -> LPAREN exp0 RPAREN power2 .)
    EQUIVALENT      reduce using rule 70 (power0 -> LPAREN exp0 RPAREN power2 .)
    SEMICOLON       reduce using rule 70 (power0 -> LPAREN exp0 RPAREN power2 .)
    RSQRBRACKET     reduce using rule 70 (power0 -> LPAREN exp0 RPAREN power2 .)
    RPAREN          reduce using rule 70 (power0 -> LPAREN exp0 RPAREN power2 .)
    COMMA           reduce using rule 70 (power0 -> LPAREN exp0 RPAREN power2 .)


state 163

    (31) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 . RSQRBRACKET EQUALS expression0 SEMICOLON

    RSQRBRACKET     shift and go to state 194


state 164

    (30) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 . SEMICOLON

    SEMICOLON       shift and go to state 195


state 165

    (139) main0 -> MAIN main_scope LBRACKET main1 RBRACKET .

    $end            reduce using rule 139 (main0 -> MAIN main_scope LBRACKET main1 RBRACKET .)


state 166

    (140) main1 -> declaration0 main1 .

    RBRACKET        reduce using rule 140 (main1 -> declaration0 main1 .)


state 167

    (141) main1 -> statement main1 .

    RBRACKET        reduce using rule 141 (main1 -> statement main1 .)


state 168

    (135) statement -> function_call SEMICOLON .

    ID              reduce using rule 135 (statement -> function_call SEMICOLON .)
    IF              reduce using rule 135 (statement -> function_call SEMICOLON .)
    WRITE           reduce using rule 135 (statement -> function_call SEMICOLON .)
    READ            reduce using rule 135 (statement -> function_call SEMICOLON .)
    RETURN          reduce using rule 135 (statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 135 (statement -> function_call SEMICOLON .)
    RBRACKET        reduce using rule 135 (statement -> function_call SEMICOLON .)


state 169

    (136) statement -> method_call0 SEMICOLON .

    ID              reduce using rule 136 (statement -> method_call0 SEMICOLON .)
    IF              reduce using rule 136 (statement -> method_call0 SEMICOLON .)
    WRITE           reduce using rule 136 (statement -> method_call0 SEMICOLON .)
    READ            reduce using rule 136 (statement -> method_call0 SEMICOLON .)
    RETURN          reduce using rule 136 (statement -> method_call0 SEMICOLON .)
    WHILE           reduce using rule 136 (statement -> method_call0 SEMICOLON .)
    RBRACKET        reduce using rule 136 (statement -> method_call0 SEMICOLON .)


state 170

    (29) assignment0 -> ID EQUALS . expression0 SEMICOLON
    (138) object_assignment -> ID EQUALS . NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (90) expression0 -> . exp0 expression1
    (91) expression0 -> . CONST_BOOL expression1
    (92) expression0 -> . attr_access0 expression1
    (59) exp0 -> . term0 exp1
    (102) attr_access0 -> . ID DOT ID
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call

    NEW             shift and go to state 196
    CONST_BOOL      shift and go to state 31
    ID              shift and go to state 28
    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    expression0                    shift and go to state 29
    exp0                           shift and go to state 30
    attr_access0                   shift and go to state 32
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41

state 171

    (103) method_call0 -> ID DOT . function_call
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN

    ID              shift and go to state 197

    function_call                  shift and go to state 103

state 172

    (114) condition0 -> IF LPAREN . expression0 RPAREN block0 condition1 SEMICOLON
    (90) expression0 -> . exp0 expression1
    (91) expression0 -> . CONST_BOOL expression1
    (92) expression0 -> . attr_access0 expression1
    (59) exp0 -> . term0 exp1
    (102) attr_access0 -> . ID DOT ID
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 31
    ID              shift and go to state 28
    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    expression0                    shift and go to state 198
    exp0                           shift and go to state 30
    attr_access0                   shift and go to state 32
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41

state 173

    (117) writing0 -> WRITE LPAREN . writing1 RPAREN SEMICOLON
    (118) writing1 -> . expression0 writing2
    (119) writing1 -> . CONST_STRING writing2
    (90) expression0 -> . exp0 expression1
    (91) expression0 -> . CONST_BOOL expression1
    (92) expression0 -> . attr_access0 expression1
    (59) exp0 -> . term0 exp1
    (102) attr_access0 -> . ID DOT ID
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call

    CONST_STRING    shift and go to state 201
    CONST_BOOL      shift and go to state 31
    ID              shift and go to state 28
    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    writing1                       shift and go to state 199
    expression0                    shift and go to state 200
    exp0                           shift and go to state 30
    attr_access0                   shift and go to state 32
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41

state 174

    (122) reading -> READ ID . SEMICOLON

    SEMICOLON       shift and go to state 202


state 175

    (123) return -> RETURN expression0 . SEMICOLON

    SEMICOLON       shift and go to state 203


state 176

    (124) return -> RETURN SEMICOLON .

    ID              reduce using rule 124 (return -> RETURN SEMICOLON .)
    IF              reduce using rule 124 (return -> RETURN SEMICOLON .)
    WRITE           reduce using rule 124 (return -> RETURN SEMICOLON .)
    READ            reduce using rule 124 (return -> RETURN SEMICOLON .)
    RETURN          reduce using rule 124 (return -> RETURN SEMICOLON .)
    WHILE           reduce using rule 124 (return -> RETURN SEMICOLON .)
    RBRACKET        reduce using rule 124 (return -> RETURN SEMICOLON .)


state 177

    (125) while -> WHILE LPAREN . expression0 RPAREN block0
    (90) expression0 -> . exp0 expression1
    (91) expression0 -> . CONST_BOOL expression1
    (92) expression0 -> . attr_access0 expression1
    (59) exp0 -> . term0 exp1
    (102) attr_access0 -> . ID DOT ID
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 31
    ID              shift and go to state 28
    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    expression0                    shift and go to state 204
    exp0                           shift and go to state 30
    attr_access0                   shift and go to state 32
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41

state 178

    (8) class0 -> CLASS id_def class1 LBRACKET class2 constructor . class3 RBRACKET SEMICOLON
    (14) class3 -> . methods
    (15) class3 -> . empty
    (36) methods -> . data_access function0 methods
    (37) methods -> . empty
    (144) empty -> .
    (104) data_access -> . PRIVATE
    (105) data_access -> . PUBLIC

    RBRACKET        reduce using rule 144 (empty -> .)
    PRIVATE         shift and go to state 149
    PUBLIC          shift and go to state 150

    class3                         shift and go to state 205
    methods                        shift and go to state 206
    empty                          shift and go to state 207
    data_access                    shift and go to state 208

state 179

    (32) constructor -> CONSTRUCT . ID LPAREN params0 RPAREN function_block0

    ID              shift and go to state 209


state 180

    (33) attributes -> data_access simple_declaration . attributes
    (33) attributes -> . data_access simple_declaration attributes
    (34) attributes -> . simple_assignment attributes
    (35) attributes -> . empty
    (104) data_access -> . PRIVATE
    (105) data_access -> . PUBLIC
    (50) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (144) empty -> .

    PRIVATE         shift and go to state 149
    PUBLIC          shift and go to state 150
    ID              shift and go to state 151
    CONSTRUCT       reduce using rule 144 (empty -> .)

    data_access                    shift and go to state 147
    attributes                     shift and go to state 210
    simple_assignment              shift and go to state 148
    empty                          shift and go to state 183

state 181

    (49) simple_declaration -> ID . COLON type SEMICOLON

    COLON           shift and go to state 211


state 182

    (34) attributes -> simple_assignment attributes .

    CONSTRUCT       reduce using rule 34 (attributes -> simple_assignment attributes .)


state 183

    (35) attributes -> empty .

    CONSTRUCT       reduce using rule 35 (attributes -> empty .)


state 184

    (50) simple_assignment -> ID EQUALS . expression0 SEMICOLON
    (90) expression0 -> . exp0 expression1
    (91) expression0 -> . CONST_BOOL expression1
    (92) expression0 -> . attr_access0 expression1
    (59) exp0 -> . term0 exp1
    (102) attr_access0 -> . ID DOT ID
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 31
    ID              shift and go to state 28
    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    expression0                    shift and go to state 212
    exp0                           shift and go to state 30
    attr_access0                   shift and go to state 32
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41

state 185

    (16) function0 -> DEF ID LPAREN params0 RPAREN ARROW . function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0
    (17) function1 -> . type
    (18) function1 -> . VOID
    (45) type -> . INT
    (46) type -> . FLOAT
    (47) type -> . STRING
    (48) type -> . BOOL

    VOID            shift and go to state 215
    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    STRING          shift and go to state 57
    BOOL            shift and go to state 58

    function1                      shift and go to state 213
    type                           shift and go to state 214

state 186

    (38) params0 -> type ID params1 .

    RPAREN          reduce using rule 38 (params0 -> type ID params1 .)


state 187

    (40) params1 -> COMMA . params0
    (38) params0 -> . type ID params1
    (39) params0 -> . empty
    (45) type -> . INT
    (46) type -> . FLOAT
    (47) type -> . STRING
    (48) type -> . BOOL
    (144) empty -> .

    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    STRING          shift and go to state 57
    BOOL            shift and go to state 58
    RPAREN          reduce using rule 144 (empty -> .)

    params0                        shift and go to state 216
    type                           shift and go to state 98
    empty                          shift and go to state 99

state 188

    (41) params1 -> empty .

    RPAREN          reduce using rule 41 (params1 -> empty .)


state 189

    (26) declaration1 -> type LSQRBRACKET exp0 RSQRBRACKET . declaration2
    (27) declaration2 -> . LSQRBRACKET exp0 RSQRBRACKET
    (28) declaration2 -> . empty
    (144) empty -> .

    LSQRBRACKET     shift and go to state 217
    SEMICOLON       reduce using rule 144 (empty -> .)

    declaration2                   shift and go to state 218
    empty                          shift and go to state 219

state 190

    (76) power1 -> LSQRBRACKET . exp0 RSQRBRACKET
    (59) exp0 -> . term0 exp1
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (102) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    ID              shift and go to state 44
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    exp0                           shift and go to state 220
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41
    attr_access0                   shift and go to state 46

state 191

    (75) power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 . power2
    (78) power2 -> . POWER power0
    (79) power2 -> . SQRT power0
    (80) power2 -> . empty
    (144) empty -> .

    POWER           shift and go to state 75
    SQRT            shift and go to state 76
    MULTIPLY        reduce using rule 144 (empty -> .)
    DIVIDE          reduce using rule 144 (empty -> .)
    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)
    LTHAN           reduce using rule 144 (empty -> .)
    GTHAN           reduce using rule 144 (empty -> .)
    DIFFERENT       reduce using rule 144 (empty -> .)
    EQUIVALENT      reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    RSQRBRACKET     reduce using rule 144 (empty -> .)
    RPAREN          reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)

    power2                         shift and go to state 221
    empty                          shift and go to state 89

state 192

    (77) power1 -> empty .

    POWER           reduce using rule 77 (power1 -> empty .)
    SQRT            reduce using rule 77 (power1 -> empty .)
    MULTIPLY        reduce using rule 77 (power1 -> empty .)
    DIVIDE          reduce using rule 77 (power1 -> empty .)
    PLUS            reduce using rule 77 (power1 -> empty .)
    MINUS           reduce using rule 77 (power1 -> empty .)
    LTHAN           reduce using rule 77 (power1 -> empty .)
    GTHAN           reduce using rule 77 (power1 -> empty .)
    DIFFERENT       reduce using rule 77 (power1 -> empty .)
    EQUIVALENT      reduce using rule 77 (power1 -> empty .)
    SEMICOLON       reduce using rule 77 (power1 -> empty .)
    RSQRBRACKET     reduce using rule 77 (power1 -> empty .)
    RPAREN          reduce using rule 77 (power1 -> empty .)
    COMMA           reduce using rule 77 (power1 -> empty .)


state 193

    (88) function_call_params1 -> COMMA function_call_params0 .

    RPAREN          reduce using rule 88 (function_call_params1 -> COMMA function_call_params0 .)


state 194

    (31) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET . EQUALS expression0 SEMICOLON

    EQUALS          shift and go to state 222


state 195

    (30) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .

    CLASS           reduce using rule 30 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    DEF             reduce using rule 30 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    ID              reduce using rule 30 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    MAIN            reduce using rule 30 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    IF              reduce using rule 30 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    WRITE           reduce using rule 30 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    READ            reduce using rule 30 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    RETURN          reduce using rule 30 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    WHILE           reduce using rule 30 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    RBRACKET        reduce using rule 30 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)


state 196

    (138) object_assignment -> ID EQUALS NEW . ID LPAREN function_call_params0 RPAREN SEMICOLON

    ID              shift and go to state 223


state 197

    (84) function_call -> ID . LPAREN function_call_params0 RPAREN

    LPAREN          shift and go to state 62


state 198

    (114) condition0 -> IF LPAREN expression0 . RPAREN block0 condition1 SEMICOLON

    RPAREN          shift and go to state 224


state 199

    (117) writing0 -> WRITE LPAREN writing1 . RPAREN SEMICOLON

    RPAREN          shift and go to state 225


state 200

    (118) writing1 -> expression0 . writing2
    (120) writing2 -> . COMMA writing1
    (121) writing2 -> . empty
    (144) empty -> .

    COMMA           shift and go to state 227
    RPAREN          reduce using rule 144 (empty -> .)

    writing2                       shift and go to state 226
    empty                          shift and go to state 228

state 201

    (119) writing1 -> CONST_STRING . writing2
    (120) writing2 -> . COMMA writing1
    (121) writing2 -> . empty
    (144) empty -> .

    COMMA           shift and go to state 227
    RPAREN          reduce using rule 144 (empty -> .)

    writing2                       shift and go to state 229
    empty                          shift and go to state 228

state 202

    (122) reading -> READ ID SEMICOLON .

    ID              reduce using rule 122 (reading -> READ ID SEMICOLON .)
    IF              reduce using rule 122 (reading -> READ ID SEMICOLON .)
    WRITE           reduce using rule 122 (reading -> READ ID SEMICOLON .)
    READ            reduce using rule 122 (reading -> READ ID SEMICOLON .)
    RETURN          reduce using rule 122 (reading -> READ ID SEMICOLON .)
    WHILE           reduce using rule 122 (reading -> READ ID SEMICOLON .)
    RBRACKET        reduce using rule 122 (reading -> READ ID SEMICOLON .)


state 203

    (123) return -> RETURN expression0 SEMICOLON .

    ID              reduce using rule 123 (return -> RETURN expression0 SEMICOLON .)
    IF              reduce using rule 123 (return -> RETURN expression0 SEMICOLON .)
    WRITE           reduce using rule 123 (return -> RETURN expression0 SEMICOLON .)
    READ            reduce using rule 123 (return -> RETURN expression0 SEMICOLON .)
    RETURN          reduce using rule 123 (return -> RETURN expression0 SEMICOLON .)
    WHILE           reduce using rule 123 (return -> RETURN expression0 SEMICOLON .)
    RBRACKET        reduce using rule 123 (return -> RETURN expression0 SEMICOLON .)


state 204

    (125) while -> WHILE LPAREN expression0 . RPAREN block0

    RPAREN          shift and go to state 230


state 205

    (8) class0 -> CLASS id_def class1 LBRACKET class2 constructor class3 . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 231


state 206

    (14) class3 -> methods .

    RBRACKET        reduce using rule 14 (class3 -> methods .)


state 207

    (15) class3 -> empty .
    (37) methods -> empty .

  ! reduce/reduce conflict for RBRACKET resolved using rule 15 (class3 -> empty .)
    RBRACKET        reduce using rule 15 (class3 -> empty .)

  ! RBRACKET        [ reduce using rule 37 (methods -> empty .) ]


state 208

    (36) methods -> data_access . function0 methods
    (16) function0 -> . DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0

    DEF             shift and go to state 14

    function0                      shift and go to state 232

state 209

    (32) constructor -> CONSTRUCT ID . LPAREN params0 RPAREN function_block0

    LPAREN          shift and go to state 233


state 210

    (33) attributes -> data_access simple_declaration attributes .

    CONSTRUCT       reduce using rule 33 (attributes -> data_access simple_declaration attributes .)


state 211

    (49) simple_declaration -> ID COLON . type SEMICOLON
    (45) type -> . INT
    (46) type -> . FLOAT
    (47) type -> . STRING
    (48) type -> . BOOL

    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    STRING          shift and go to state 57
    BOOL            shift and go to state 58

    type                           shift and go to state 234

state 212

    (50) simple_assignment -> ID EQUALS expression0 . SEMICOLON

    SEMICOLON       shift and go to state 235


state 213

    (16) function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 . LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0

    LSQRBRACKET     shift and go to state 236


state 214

    (17) function1 -> type .

    LSQRBRACKET     reduce using rule 17 (function1 -> type .)


state 215

    (18) function1 -> VOID .

    LSQRBRACKET     reduce using rule 18 (function1 -> VOID .)


state 216

    (40) params1 -> COMMA params0 .

    RPAREN          reduce using rule 40 (params1 -> COMMA params0 .)


state 217

    (27) declaration2 -> LSQRBRACKET . exp0 RSQRBRACKET
    (59) exp0 -> . term0 exp1
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (102) attr_access0 -> . ID DOT ID

    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    ID              shift and go to state 44
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    exp0                           shift and go to state 237
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41
    attr_access0                   shift and go to state 46

state 218

    (26) declaration1 -> type LSQRBRACKET exp0 RSQRBRACKET declaration2 .

    SEMICOLON       reduce using rule 26 (declaration1 -> type LSQRBRACKET exp0 RSQRBRACKET declaration2 .)


state 219

    (28) declaration2 -> empty .

    SEMICOLON       reduce using rule 28 (declaration2 -> empty .)


state 220

    (76) power1 -> LSQRBRACKET exp0 . RSQRBRACKET

    RSQRBRACKET     shift and go to state 238


state 221

    (75) power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .

    MULTIPLY        reduce using rule 75 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    DIVIDE          reduce using rule 75 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    PLUS            reduce using rule 75 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    MINUS           reduce using rule 75 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    LTHAN           reduce using rule 75 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    GTHAN           reduce using rule 75 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    DIFFERENT       reduce using rule 75 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    EQUIVALENT      reduce using rule 75 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    SEMICOLON       reduce using rule 75 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    RSQRBRACKET     reduce using rule 75 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    RPAREN          reduce using rule 75 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)
    COMMA           reduce using rule 75 (power0 -> ID LSQRBRACKET exp0 RSQRBRACKET power1 power2 .)


state 222

    (31) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS . expression0 SEMICOLON
    (90) expression0 -> . exp0 expression1
    (91) expression0 -> . CONST_BOOL expression1
    (92) expression0 -> . attr_access0 expression1
    (59) exp0 -> . term0 exp1
    (102) attr_access0 -> . ID DOT ID
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call

    CONST_BOOL      shift and go to state 31
    ID              shift and go to state 28
    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    exp0                           shift and go to state 30
    expression0                    shift and go to state 239
    attr_access0                   shift and go to state 32
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41

state 223

    (138) object_assignment -> ID EQUALS NEW ID . LPAREN function_call_params0 RPAREN SEMICOLON

    LPAREN          shift and go to state 240


state 224

    (114) condition0 -> IF LPAREN expression0 RPAREN . block0 condition1 SEMICOLON
    (126) block0 -> . LBRACKET block1 RBRACKET

    LBRACKET        shift and go to state 242

    block0                         shift and go to state 241

state 225

    (117) writing0 -> WRITE LPAREN writing1 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 243


state 226

    (118) writing1 -> expression0 writing2 .

    RPAREN          reduce using rule 118 (writing1 -> expression0 writing2 .)


state 227

    (120) writing2 -> COMMA . writing1
    (118) writing1 -> . expression0 writing2
    (119) writing1 -> . CONST_STRING writing2
    (90) expression0 -> . exp0 expression1
    (91) expression0 -> . CONST_BOOL expression1
    (92) expression0 -> . attr_access0 expression1
    (59) exp0 -> . term0 exp1
    (102) attr_access0 -> . ID DOT ID
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call

    CONST_STRING    shift and go to state 201
    CONST_BOOL      shift and go to state 31
    ID              shift and go to state 28
    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    writing1                       shift and go to state 244
    expression0                    shift and go to state 200
    exp0                           shift and go to state 30
    attr_access0                   shift and go to state 32
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41

state 228

    (121) writing2 -> empty .

    RPAREN          reduce using rule 121 (writing2 -> empty .)


state 229

    (119) writing1 -> CONST_STRING writing2 .

    RPAREN          reduce using rule 119 (writing1 -> CONST_STRING writing2 .)


state 230

    (125) while -> WHILE LPAREN expression0 RPAREN . block0
    (126) block0 -> . LBRACKET block1 RBRACKET

    LBRACKET        shift and go to state 242

    block0                         shift and go to state 245

state 231

    (8) class0 -> CLASS id_def class1 LBRACKET class2 constructor class3 RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 246


state 232

    (36) methods -> data_access function0 . methods
    (36) methods -> . data_access function0 methods
    (37) methods -> . empty
    (104) data_access -> . PRIVATE
    (105) data_access -> . PUBLIC
    (144) empty -> .

    PRIVATE         shift and go to state 149
    PUBLIC          shift and go to state 150
    RBRACKET        reduce using rule 144 (empty -> .)

    data_access                    shift and go to state 208
    methods                        shift and go to state 247
    empty                          shift and go to state 248

state 233

    (32) constructor -> CONSTRUCT ID LPAREN . params0 RPAREN function_block0
    (38) params0 -> . type ID params1
    (39) params0 -> . empty
    (45) type -> . INT
    (46) type -> . FLOAT
    (47) type -> . STRING
    (48) type -> . BOOL
    (144) empty -> .

    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    STRING          shift and go to state 57
    BOOL            shift and go to state 58
    RPAREN          reduce using rule 144 (empty -> .)

    params0                        shift and go to state 249
    type                           shift and go to state 98
    empty                          shift and go to state 99

state 234

    (49) simple_declaration -> ID COLON type . SEMICOLON

    SEMICOLON       shift and go to state 250


state 235

    (50) simple_assignment -> ID EQUALS expression0 SEMICOLON .

    PRIVATE         reduce using rule 50 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    PUBLIC          reduce using rule 50 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    ID              reduce using rule 50 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    CONSTRUCT       reduce using rule 50 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    RSQRBRACKET     reduce using rule 50 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    IF              reduce using rule 50 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    WRITE           reduce using rule 50 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    READ            reduce using rule 50 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    RETURN          reduce using rule 50 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    WHILE           reduce using rule 50 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)
    RBRACKET        reduce using rule 50 (simple_assignment -> ID EQUALS expression0 SEMICOLON .)


state 236

    (16) function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET . LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0

    LSQRBRACKET     shift and go to state 251


state 237

    (27) declaration2 -> LSQRBRACKET exp0 . RSQRBRACKET

    RSQRBRACKET     shift and go to state 252


state 238

    (76) power1 -> LSQRBRACKET exp0 RSQRBRACKET .

    POWER           reduce using rule 76 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    SQRT            reduce using rule 76 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    MULTIPLY        reduce using rule 76 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    DIVIDE          reduce using rule 76 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    PLUS            reduce using rule 76 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    MINUS           reduce using rule 76 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    LTHAN           reduce using rule 76 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    GTHAN           reduce using rule 76 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    DIFFERENT       reduce using rule 76 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    EQUIVALENT      reduce using rule 76 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    SEMICOLON       reduce using rule 76 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    RSQRBRACKET     reduce using rule 76 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    RPAREN          reduce using rule 76 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)
    COMMA           reduce using rule 76 (power1 -> LSQRBRACKET exp0 RSQRBRACKET .)


state 239

    (31) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 . SEMICOLON

    SEMICOLON       shift and go to state 253


state 240

    (138) object_assignment -> ID EQUALS NEW ID LPAREN . function_call_params0 RPAREN SEMICOLON
    (85) function_call_params0 -> . expression0 function_call_params1
    (86) function_call_params0 -> . CONST_STRING function_call_params1
    (87) function_call_params0 -> . empty function_call_params1
    (90) expression0 -> . exp0 expression1
    (91) expression0 -> . CONST_BOOL expression1
    (92) expression0 -> . attr_access0 expression1
    (144) empty -> .
    (59) exp0 -> . term0 exp1
    (102) attr_access0 -> . ID DOT ID
    (63) term0 -> . factor term1
    (67) factor -> . PLUS power0
    (68) factor -> . MINUS power0
    (69) factor -> . power0
    (70) power0 -> . LPAREN exp0 RPAREN power2
    (71) power0 -> . const_var power2
    (72) power0 -> . function_call power2
    (73) power0 -> . method_call0 power2
    (74) power0 -> . attr_access0 power2
    (75) power0 -> . ID LSQRBRACKET exp0 RSQRBRACKET power1 power2
    (81) const_var -> . CONST_INT
    (82) const_var -> . CONST_FLOAT
    (83) const_var -> . ID
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call

    CONST_STRING    shift and go to state 107
    CONST_BOOL      shift and go to state 31
    COMMA           reduce using rule 144 (empty -> .)
    RPAREN          reduce using rule 144 (empty -> .)
    ID              shift and go to state 28
    PLUS            shift and go to state 35
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 38
    CONST_INT       shift and go to state 42
    CONST_FLOAT     shift and go to state 43

    function_call_params0          shift and go to state 254
    expression0                    shift and go to state 106
    empty                          shift and go to state 108
    exp0                           shift and go to state 30
    attr_access0                   shift and go to state 32
    term0                          shift and go to state 33
    factor                         shift and go to state 34
    power0                         shift and go to state 36
    const_var                      shift and go to state 39
    function_call                  shift and go to state 40
    method_call0                   shift and go to state 41

state 241

    (114) condition0 -> IF LPAREN expression0 RPAREN block0 . condition1 SEMICOLON
    (115) condition1 -> . ELSE block0
    (116) condition1 -> . empty
    (144) empty -> .

    ELSE            shift and go to state 256
    SEMICOLON       reduce using rule 144 (empty -> .)

    condition1                     shift and go to state 255
    empty                          shift and go to state 257

state 242

    (126) block0 -> LBRACKET . block1 RBRACKET
    (127) block1 -> . statement block1
    (128) block1 -> . empty
    (129) statement -> . assignment0
    (130) statement -> . object_assignment
    (131) statement -> . condition0
    (132) statement -> . writing0
    (133) statement -> . reading
    (134) statement -> . return
    (135) statement -> . function_call SEMICOLON
    (136) statement -> . method_call0 SEMICOLON
    (137) statement -> . while
    (144) empty -> .
    (29) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (30) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (31) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (138) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (114) condition0 -> . IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON
    (117) writing0 -> . WRITE LPAREN writing1 RPAREN SEMICOLON
    (122) reading -> . READ ID SEMICOLON
    (123) return -> . RETURN expression0 SEMICOLON
    (124) return -> . RETURN SEMICOLON
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (125) while -> . WHILE LPAREN expression0 RPAREN block0

    RBRACKET        reduce using rule 144 (empty -> .)
    ID              shift and go to state 261
    IF              shift and go to state 139
    WRITE           shift and go to state 140
    READ            shift and go to state 141
    RETURN          shift and go to state 142
    WHILE           shift and go to state 143

    block1                         shift and go to state 258
    statement                      shift and go to state 259
    empty                          shift and go to state 260
    assignment0                    shift and go to state 129
    object_assignment              shift and go to state 130
    condition0                     shift and go to state 131
    writing0                       shift and go to state 132
    reading                        shift and go to state 133
    return                         shift and go to state 134
    function_call                  shift and go to state 135
    method_call0                   shift and go to state 136
    while                          shift and go to state 137

state 243

    (117) writing0 -> WRITE LPAREN writing1 RPAREN SEMICOLON .

    ID              reduce using rule 117 (writing0 -> WRITE LPAREN writing1 RPAREN SEMICOLON .)
    IF              reduce using rule 117 (writing0 -> WRITE LPAREN writing1 RPAREN SEMICOLON .)
    WRITE           reduce using rule 117 (writing0 -> WRITE LPAREN writing1 RPAREN SEMICOLON .)
    READ            reduce using rule 117 (writing0 -> WRITE LPAREN writing1 RPAREN SEMICOLON .)
    RETURN          reduce using rule 117 (writing0 -> WRITE LPAREN writing1 RPAREN SEMICOLON .)
    WHILE           reduce using rule 117 (writing0 -> WRITE LPAREN writing1 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 117 (writing0 -> WRITE LPAREN writing1 RPAREN SEMICOLON .)


state 244

    (120) writing2 -> COMMA writing1 .

    RPAREN          reduce using rule 120 (writing2 -> COMMA writing1 .)


state 245

    (125) while -> WHILE LPAREN expression0 RPAREN block0 .

    ID              reduce using rule 125 (while -> WHILE LPAREN expression0 RPAREN block0 .)
    IF              reduce using rule 125 (while -> WHILE LPAREN expression0 RPAREN block0 .)
    WRITE           reduce using rule 125 (while -> WHILE LPAREN expression0 RPAREN block0 .)
    READ            reduce using rule 125 (while -> WHILE LPAREN expression0 RPAREN block0 .)
    RETURN          reduce using rule 125 (while -> WHILE LPAREN expression0 RPAREN block0 .)
    WHILE           reduce using rule 125 (while -> WHILE LPAREN expression0 RPAREN block0 .)
    RBRACKET        reduce using rule 125 (while -> WHILE LPAREN expression0 RPAREN block0 .)


state 246

    (8) class0 -> CLASS id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON .

    CLASS           reduce using rule 8 (class0 -> CLASS id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON .)
    DEF             reduce using rule 8 (class0 -> CLASS id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON .)
    ID              reduce using rule 8 (class0 -> CLASS id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON .)
    MAIN            reduce using rule 8 (class0 -> CLASS id_def class1 LBRACKET class2 constructor class3 RBRACKET SEMICOLON .)


state 247

    (36) methods -> data_access function0 methods .

    RBRACKET        reduce using rule 36 (methods -> data_access function0 methods .)


state 248

    (37) methods -> empty .

    RBRACKET        reduce using rule 37 (methods -> empty .)


state 249

    (32) constructor -> CONSTRUCT ID LPAREN params0 . RPAREN function_block0

    RPAREN          shift and go to state 262


state 250

    (49) simple_declaration -> ID COLON type SEMICOLON .

    PRIVATE         reduce using rule 49 (simple_declaration -> ID COLON type SEMICOLON .)
    PUBLIC          reduce using rule 49 (simple_declaration -> ID COLON type SEMICOLON .)
    ID              reduce using rule 49 (simple_declaration -> ID COLON type SEMICOLON .)
    CONSTRUCT       reduce using rule 49 (simple_declaration -> ID COLON type SEMICOLON .)
    RSQRBRACKET     reduce using rule 49 (simple_declaration -> ID COLON type SEMICOLON .)


state 251

    (16) function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET . function2 RSQRBRACKET RSQRBRACKET function_block0
    (19) function2 -> . simple_declaration function2
    (20) function2 -> . simple_assignment function2
    (21) function2 -> . empty
    (49) simple_declaration -> . ID COLON type SEMICOLON
    (50) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (144) empty -> .

    ID              shift and go to state 263
    RSQRBRACKET     reduce using rule 144 (empty -> .)

    function2                      shift and go to state 264
    simple_declaration             shift and go to state 265
    simple_assignment              shift and go to state 266
    empty                          shift and go to state 267

state 252

    (27) declaration2 -> LSQRBRACKET exp0 RSQRBRACKET .

    SEMICOLON       reduce using rule 27 (declaration2 -> LSQRBRACKET exp0 RSQRBRACKET .)


state 253

    (31) assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .

    CLASS           reduce using rule 31 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    DEF             reduce using rule 31 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    ID              reduce using rule 31 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    MAIN            reduce using rule 31 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    IF              reduce using rule 31 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    WRITE           reduce using rule 31 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    READ            reduce using rule 31 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    RETURN          reduce using rule 31 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    WHILE           reduce using rule 31 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)
    RBRACKET        reduce using rule 31 (assignment0 -> ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON .)


state 254

    (138) object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 . RPAREN SEMICOLON

    RPAREN          shift and go to state 268


state 255

    (114) condition0 -> IF LPAREN expression0 RPAREN block0 condition1 . SEMICOLON

    SEMICOLON       shift and go to state 269


state 256

    (115) condition1 -> ELSE . block0
    (126) block0 -> . LBRACKET block1 RBRACKET

    LBRACKET        shift and go to state 242

    block0                         shift and go to state 270

state 257

    (116) condition1 -> empty .

    SEMICOLON       reduce using rule 116 (condition1 -> empty .)


state 258

    (126) block0 -> LBRACKET block1 . RBRACKET

    RBRACKET        shift and go to state 271


state 259

    (127) block1 -> statement . block1
    (127) block1 -> . statement block1
    (128) block1 -> . empty
    (129) statement -> . assignment0
    (130) statement -> . object_assignment
    (131) statement -> . condition0
    (132) statement -> . writing0
    (133) statement -> . reading
    (134) statement -> . return
    (135) statement -> . function_call SEMICOLON
    (136) statement -> . method_call0 SEMICOLON
    (137) statement -> . while
    (144) empty -> .
    (29) assignment0 -> . ID EQUALS expression0 SEMICOLON
    (30) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (31) assignment0 -> . ID LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (138) object_assignment -> . ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (114) condition0 -> . IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON
    (117) writing0 -> . WRITE LPAREN writing1 RPAREN SEMICOLON
    (122) reading -> . READ ID SEMICOLON
    (123) return -> . RETURN expression0 SEMICOLON
    (124) return -> . RETURN SEMICOLON
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (125) while -> . WHILE LPAREN expression0 RPAREN block0

    RBRACKET        reduce using rule 144 (empty -> .)
    ID              shift and go to state 261
    IF              shift and go to state 139
    WRITE           shift and go to state 140
    READ            shift and go to state 141
    RETURN          shift and go to state 142
    WHILE           shift and go to state 143

    statement                      shift and go to state 259
    block1                         shift and go to state 272
    empty                          shift and go to state 260
    assignment0                    shift and go to state 129
    object_assignment              shift and go to state 130
    condition0                     shift and go to state 131
    writing0                       shift and go to state 132
    reading                        shift and go to state 133
    return                         shift and go to state 134
    function_call                  shift and go to state 135
    method_call0                   shift and go to state 136
    while                          shift and go to state 137

state 260

    (128) block1 -> empty .

    RBRACKET        reduce using rule 128 (block1 -> empty .)


state 261

    (29) assignment0 -> ID . EQUALS expression0 SEMICOLON
    (30) assignment0 -> ID . LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (31) assignment0 -> ID . LSQRBRACKET exp0 RSQRBRACKET LSQRBRACKET exp0 RSQRBRACKET EQUALS expression0 SEMICOLON
    (138) object_assignment -> ID . EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON
    (84) function_call -> ID . LPAREN function_call_params0 RPAREN
    (103) method_call0 -> ID . DOT function_call

    EQUALS          shift and go to state 170
    LSQRBRACKET     shift and go to state 17
    LPAREN          shift and go to state 62
    DOT             shift and go to state 171


state 262

    (32) constructor -> CONSTRUCT ID LPAREN params0 RPAREN . function_block0
    (42) function_block0 -> . LBRACKET function_block1 RBRACKET

    LBRACKET        shift and go to state 274

    function_block0                shift and go to state 273

state 263

    (49) simple_declaration -> ID . COLON type SEMICOLON
    (50) simple_assignment -> ID . EQUALS expression0 SEMICOLON

    COLON           shift and go to state 211
    EQUALS          shift and go to state 184


state 264

    (16) function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 . RSQRBRACKET RSQRBRACKET function_block0

    RSQRBRACKET     shift and go to state 275


state 265

    (19) function2 -> simple_declaration . function2
    (19) function2 -> . simple_declaration function2
    (20) function2 -> . simple_assignment function2
    (21) function2 -> . empty
    (49) simple_declaration -> . ID COLON type SEMICOLON
    (50) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (144) empty -> .

    ID              shift and go to state 263
    RSQRBRACKET     reduce using rule 144 (empty -> .)

    simple_declaration             shift and go to state 265
    function2                      shift and go to state 276
    simple_assignment              shift and go to state 266
    empty                          shift and go to state 267

state 266

    (20) function2 -> simple_assignment . function2
    (19) function2 -> . simple_declaration function2
    (20) function2 -> . simple_assignment function2
    (21) function2 -> . empty
    (49) simple_declaration -> . ID COLON type SEMICOLON
    (50) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (144) empty -> .

    ID              shift and go to state 263
    RSQRBRACKET     reduce using rule 144 (empty -> .)

    simple_assignment              shift and go to state 266
    function2                      shift and go to state 277
    simple_declaration             shift and go to state 265
    empty                          shift and go to state 267

state 267

    (21) function2 -> empty .

    RSQRBRACKET     reduce using rule 21 (function2 -> empty .)


state 268

    (138) object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 278


state 269

    (114) condition0 -> IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON .

    ID              reduce using rule 114 (condition0 -> IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON .)
    IF              reduce using rule 114 (condition0 -> IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON .)
    WRITE           reduce using rule 114 (condition0 -> IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON .)
    READ            reduce using rule 114 (condition0 -> IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON .)
    RETURN          reduce using rule 114 (condition0 -> IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON .)
    WHILE           reduce using rule 114 (condition0 -> IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON .)
    RBRACKET        reduce using rule 114 (condition0 -> IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON .)


state 270

    (115) condition1 -> ELSE block0 .

    SEMICOLON       reduce using rule 115 (condition1 -> ELSE block0 .)


state 271

    (126) block0 -> LBRACKET block1 RBRACKET .

    ELSE            reduce using rule 126 (block0 -> LBRACKET block1 RBRACKET .)
    SEMICOLON       reduce using rule 126 (block0 -> LBRACKET block1 RBRACKET .)
    ID              reduce using rule 126 (block0 -> LBRACKET block1 RBRACKET .)
    IF              reduce using rule 126 (block0 -> LBRACKET block1 RBRACKET .)
    WRITE           reduce using rule 126 (block0 -> LBRACKET block1 RBRACKET .)
    READ            reduce using rule 126 (block0 -> LBRACKET block1 RBRACKET .)
    RETURN          reduce using rule 126 (block0 -> LBRACKET block1 RBRACKET .)
    WHILE           reduce using rule 126 (block0 -> LBRACKET block1 RBRACKET .)
    RBRACKET        reduce using rule 126 (block0 -> LBRACKET block1 RBRACKET .)


state 272

    (127) block1 -> statement block1 .

    RBRACKET        reduce using rule 127 (block1 -> statement block1 .)


state 273

    (32) constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0 .

    PRIVATE         reduce using rule 32 (constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0 .)
    PUBLIC          reduce using rule 32 (constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0 .)
    RBRACKET        reduce using rule 32 (constructor -> CONSTRUCT ID LPAREN params0 RPAREN function_block0 .)


state 274

    (42) function_block0 -> LBRACKET . function_block1 RBRACKET
    (43) function_block1 -> . function_statement function_block1
    (44) function_block1 -> . empty
    (106) function_statement -> . simple_assignment
    (107) function_statement -> . condition0
    (108) function_statement -> . writing0
    (109) function_statement -> . reading
    (110) function_statement -> . return
    (111) function_statement -> . function_call SEMICOLON
    (112) function_statement -> . method_call0 SEMICOLON
    (113) function_statement -> . while
    (144) empty -> .
    (50) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (114) condition0 -> . IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON
    (117) writing0 -> . WRITE LPAREN writing1 RPAREN SEMICOLON
    (122) reading -> . READ ID SEMICOLON
    (123) return -> . RETURN expression0 SEMICOLON
    (124) return -> . RETURN SEMICOLON
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (125) while -> . WHILE LPAREN expression0 RPAREN block0

    RBRACKET        reduce using rule 144 (empty -> .)
    ID              shift and go to state 290
    IF              shift and go to state 139
    WRITE           shift and go to state 140
    READ            shift and go to state 141
    RETURN          shift and go to state 142
    WHILE           shift and go to state 143

    function_block1                shift and go to state 279
    function_statement             shift and go to state 280
    empty                          shift and go to state 281
    simple_assignment              shift and go to state 282
    condition0                     shift and go to state 283
    writing0                       shift and go to state 284
    reading                        shift and go to state 285
    return                         shift and go to state 286
    function_call                  shift and go to state 287
    method_call0                   shift and go to state 288
    while                          shift and go to state 289

state 275

    (16) function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET . RSQRBRACKET function_block0

    RSQRBRACKET     shift and go to state 291


state 276

    (19) function2 -> simple_declaration function2 .

    RSQRBRACKET     reduce using rule 19 (function2 -> simple_declaration function2 .)


state 277

    (20) function2 -> simple_assignment function2 .

    RSQRBRACKET     reduce using rule 20 (function2 -> simple_assignment function2 .)


state 278

    (138) object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .

    ID              reduce using rule 138 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    IF              reduce using rule 138 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    WRITE           reduce using rule 138 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    READ            reduce using rule 138 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    RETURN          reduce using rule 138 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    WHILE           reduce using rule 138 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 138 (object_assignment -> ID EQUALS NEW ID LPAREN function_call_params0 RPAREN SEMICOLON .)


state 279

    (42) function_block0 -> LBRACKET function_block1 . RBRACKET

    RBRACKET        shift and go to state 292


state 280

    (43) function_block1 -> function_statement . function_block1
    (43) function_block1 -> . function_statement function_block1
    (44) function_block1 -> . empty
    (106) function_statement -> . simple_assignment
    (107) function_statement -> . condition0
    (108) function_statement -> . writing0
    (109) function_statement -> . reading
    (110) function_statement -> . return
    (111) function_statement -> . function_call SEMICOLON
    (112) function_statement -> . method_call0 SEMICOLON
    (113) function_statement -> . while
    (144) empty -> .
    (50) simple_assignment -> . ID EQUALS expression0 SEMICOLON
    (114) condition0 -> . IF LPAREN expression0 RPAREN block0 condition1 SEMICOLON
    (117) writing0 -> . WRITE LPAREN writing1 RPAREN SEMICOLON
    (122) reading -> . READ ID SEMICOLON
    (123) return -> . RETURN expression0 SEMICOLON
    (124) return -> . RETURN SEMICOLON
    (84) function_call -> . ID LPAREN function_call_params0 RPAREN
    (103) method_call0 -> . ID DOT function_call
    (125) while -> . WHILE LPAREN expression0 RPAREN block0

    RBRACKET        reduce using rule 144 (empty -> .)
    ID              shift and go to state 290
    IF              shift and go to state 139
    WRITE           shift and go to state 140
    READ            shift and go to state 141
    RETURN          shift and go to state 142
    WHILE           shift and go to state 143

    function_statement             shift and go to state 280
    function_block1                shift and go to state 293
    empty                          shift and go to state 281
    simple_assignment              shift and go to state 282
    condition0                     shift and go to state 283
    writing0                       shift and go to state 284
    reading                        shift and go to state 285
    return                         shift and go to state 286
    function_call                  shift and go to state 287
    method_call0                   shift and go to state 288
    while                          shift and go to state 289

state 281

    (44) function_block1 -> empty .

    RBRACKET        reduce using rule 44 (function_block1 -> empty .)


state 282

    (106) function_statement -> simple_assignment .

    ID              reduce using rule 106 (function_statement -> simple_assignment .)
    IF              reduce using rule 106 (function_statement -> simple_assignment .)
    WRITE           reduce using rule 106 (function_statement -> simple_assignment .)
    READ            reduce using rule 106 (function_statement -> simple_assignment .)
    RETURN          reduce using rule 106 (function_statement -> simple_assignment .)
    WHILE           reduce using rule 106 (function_statement -> simple_assignment .)
    RBRACKET        reduce using rule 106 (function_statement -> simple_assignment .)


state 283

    (107) function_statement -> condition0 .

    ID              reduce using rule 107 (function_statement -> condition0 .)
    IF              reduce using rule 107 (function_statement -> condition0 .)
    WRITE           reduce using rule 107 (function_statement -> condition0 .)
    READ            reduce using rule 107 (function_statement -> condition0 .)
    RETURN          reduce using rule 107 (function_statement -> condition0 .)
    WHILE           reduce using rule 107 (function_statement -> condition0 .)
    RBRACKET        reduce using rule 107 (function_statement -> condition0 .)


state 284

    (108) function_statement -> writing0 .

    ID              reduce using rule 108 (function_statement -> writing0 .)
    IF              reduce using rule 108 (function_statement -> writing0 .)
    WRITE           reduce using rule 108 (function_statement -> writing0 .)
    READ            reduce using rule 108 (function_statement -> writing0 .)
    RETURN          reduce using rule 108 (function_statement -> writing0 .)
    WHILE           reduce using rule 108 (function_statement -> writing0 .)
    RBRACKET        reduce using rule 108 (function_statement -> writing0 .)


state 285

    (109) function_statement -> reading .

    ID              reduce using rule 109 (function_statement -> reading .)
    IF              reduce using rule 109 (function_statement -> reading .)
    WRITE           reduce using rule 109 (function_statement -> reading .)
    READ            reduce using rule 109 (function_statement -> reading .)
    RETURN          reduce using rule 109 (function_statement -> reading .)
    WHILE           reduce using rule 109 (function_statement -> reading .)
    RBRACKET        reduce using rule 109 (function_statement -> reading .)


state 286

    (110) function_statement -> return .

    ID              reduce using rule 110 (function_statement -> return .)
    IF              reduce using rule 110 (function_statement -> return .)
    WRITE           reduce using rule 110 (function_statement -> return .)
    READ            reduce using rule 110 (function_statement -> return .)
    RETURN          reduce using rule 110 (function_statement -> return .)
    WHILE           reduce using rule 110 (function_statement -> return .)
    RBRACKET        reduce using rule 110 (function_statement -> return .)


state 287

    (111) function_statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 294


state 288

    (112) function_statement -> method_call0 . SEMICOLON

    SEMICOLON       shift and go to state 295


state 289

    (113) function_statement -> while .

    ID              reduce using rule 113 (function_statement -> while .)
    IF              reduce using rule 113 (function_statement -> while .)
    WRITE           reduce using rule 113 (function_statement -> while .)
    READ            reduce using rule 113 (function_statement -> while .)
    RETURN          reduce using rule 113 (function_statement -> while .)
    WHILE           reduce using rule 113 (function_statement -> while .)
    RBRACKET        reduce using rule 113 (function_statement -> while .)


state 290

    (50) simple_assignment -> ID . EQUALS expression0 SEMICOLON
    (84) function_call -> ID . LPAREN function_call_params0 RPAREN
    (103) method_call0 -> ID . DOT function_call

    EQUALS          shift and go to state 184
    LPAREN          shift and go to state 62
    DOT             shift and go to state 171


state 291

    (16) function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET . function_block0
    (42) function_block0 -> . LBRACKET function_block1 RBRACKET

    LBRACKET        shift and go to state 274

    function_block0                shift and go to state 296

state 292

    (42) function_block0 -> LBRACKET function_block1 RBRACKET .

    PRIVATE         reduce using rule 42 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    PUBLIC          reduce using rule 42 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    RBRACKET        reduce using rule 42 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    CLASS           reduce using rule 42 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    DEF             reduce using rule 42 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    ID              reduce using rule 42 (function_block0 -> LBRACKET function_block1 RBRACKET .)
    MAIN            reduce using rule 42 (function_block0 -> LBRACKET function_block1 RBRACKET .)


state 293

    (43) function_block1 -> function_statement function_block1 .

    RBRACKET        reduce using rule 43 (function_block1 -> function_statement function_block1 .)


state 294

    (111) function_statement -> function_call SEMICOLON .

    ID              reduce using rule 111 (function_statement -> function_call SEMICOLON .)
    IF              reduce using rule 111 (function_statement -> function_call SEMICOLON .)
    WRITE           reduce using rule 111 (function_statement -> function_call SEMICOLON .)
    READ            reduce using rule 111 (function_statement -> function_call SEMICOLON .)
    RETURN          reduce using rule 111 (function_statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 111 (function_statement -> function_call SEMICOLON .)
    RBRACKET        reduce using rule 111 (function_statement -> function_call SEMICOLON .)


state 295

    (112) function_statement -> method_call0 SEMICOLON .

    ID              reduce using rule 112 (function_statement -> method_call0 SEMICOLON .)
    IF              reduce using rule 112 (function_statement -> method_call0 SEMICOLON .)
    WRITE           reduce using rule 112 (function_statement -> method_call0 SEMICOLON .)
    READ            reduce using rule 112 (function_statement -> method_call0 SEMICOLON .)
    RETURN          reduce using rule 112 (function_statement -> method_call0 SEMICOLON .)
    WHILE           reduce using rule 112 (function_statement -> method_call0 SEMICOLON .)
    RBRACKET        reduce using rule 112 (function_statement -> method_call0 SEMICOLON .)


state 296

    (16) function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0 .

    CLASS           reduce using rule 16 (function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0 .)
    DEF             reduce using rule 16 (function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0 .)
    ID              reduce using rule 16 (function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0 .)
    MAIN            reduce using rule 16 (function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0 .)
    PRIVATE         reduce using rule 16 (function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0 .)
    PUBLIC          reduce using rule 16 (function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0 .)
    RBRACKET        reduce using rule 16 (function0 -> DEF ID LPAREN params0 RPAREN ARROW function1 LSQRBRACKET LSQRBRACKET function2 RSQRBRACKET RSQRBRACKET function_block0 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LTHAN in state 32 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 32 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 32 resolved as shift
WARNING: shift/reduce conflict for EQUIVALENT in state 32 resolved as shift
WARNING: reduce/reduce conflict in state 74 resolved using rule (power2 -> empty)
WARNING: rejected rule (expression1 -> empty) in state 74
WARNING: reduce/reduce conflict in state 112 resolved using rule (expression3 -> attr_access0)
WARNING: rejected rule (empty -> <empty>) in state 112
WARNING: reduce/reduce conflict in state 146 resolved using rule (class2 -> empty)
WARNING: rejected rule (attributes -> empty) in state 146
WARNING: reduce/reduce conflict in state 207 resolved using rule (class3 -> empty)
WARNING: rejected rule (methods -> empty) in state 207
