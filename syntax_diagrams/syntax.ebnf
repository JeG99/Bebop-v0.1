ROUTINE = routine id ';' {[CLASS | FUNCTION | DECLARATION | ASSIGNMENT | OBJECT_ASSIGNMENT]} MAIN.

TYPE = int | float | string | bool.

COMPLEX_TYPE = id.

CLASS = class id [EXTENSION] '{' [ATTRIBUTES] CONSTRUCTOR [METHODS] '}' ';'.

EXTENSION = DATA_ACCESS id {',' DATA_ACCESS id}.

ATTRIBUTES = (DATA_ACCESS SIMPLE_DECLARATION | SIMPLE_ASSIGNMENT) {(DATA_ACCESS SIMPLE_DECLARATION | SIMPLE_ASSIGNMENT)}.

CONSTRUCTOR = construct id '(' PARAMS ')' FUNCTION_BLOCK.

METHODS = DATA_ACCESS function {DATA_ACCESS function}.

DATA_ACCESS = private | public.

FUNCTION = def id '(' PARAMS ')' '-' '>' (TYPE | void) '[' '[' {SIMPLE_DECLARATIONS | SIMPLE_ASSIGNMENT} ']' ']' FUNCTION_BLOCK.

PARAMS = [(TYPE id {',' TYPE id})].

FUNCTION_CALL = id '(' FUNCTION_CALL_PARAMS ')'.

FUNCTION_CALL_PARAMS = [(EXPRESSION | string)] {',' [(EXPRESSION | string)]}.

BLOCK = '{' [STATEMENT {STATEMENT}] '}'.

FUNCTION_BLOCK = '{' [FUNCTION_STATEMENT {FUNCTION_STATEMENT}] '}'.

FUNCTION_STATEMENTS = SIMPLE_ASSIGNMENT | CONDITION | WRITING | READING | RETURN | FUNCTION_CALL ';' | METHOD_CALL ';' | WHILE.

STATEMENT = ASSIGNMENT | OBJECT_ASSIGNMENT | CONDITION | WRITING | READING | RETURN | FUNCTION_CALL ';' | METHOD_CALL ';' | WHILE.

RETURN = return [EXPRESSION] ';'.

SIMPLE_DECLARATION = id ':' TYPE ';'.

DECLARATION = id ':' (TYPE | COMPLEX_TYPE | (TYPE '[' EXP ']' ['[' EXP ']'])) ';'.

SIMPLE_ASSIGNMENT = id '=' EXPRESSION ';'.

ASSIGNMENT = id ['[' EXP ']' ['[' EXP ']']] '=' EXPRESSION ';'.

OBJECT_ASSIGNMENT = id '=' new id '(' FUNCTION_CALL_PARAMS ')' ';'.

WHILE = while '(' EXPRESSION ')' BLOCK.

WRITING = '<' '<' '<' '(' (EXPRESSION | string) {',' (EXPRESSION | string)} ')' ';'.

READING = '>' '>' '>' id ';'.

CONDITION = if '(' EXPRESSION ')' BLOCK [else BLOCK] ';'.

LOGIC_OR =  LOGIC_AND {'||' LOGIC_AND}.

LOGIC_AND = LOGIC_OPERAND {'&&' LOGIC_OPERAND}.

LOGIC_OPERAND = ['!'] EXPRESSION.

EXPRESSION = (EXP | BOOL | ATTR_ACCESS) ( | ('<' | '>' | '<>' | '==') (EXP | BOOL | ATTR_ACCESS)).

EXP = TERM {('+' | '-') TERM}.

TERM = (FACTOR) {('*' | '/') FACTOR}.

FACTOR = ['+' | '-'] POWER.

POWER = ('(' EXP ')' | CONS_VAR | FUNCTION_CALL | METHOD_CALL | ATTR_ACCESS | id '[' EXP ']' ['[' EXP ']']) {('**' | '|/') ('(' EXP ')' | CONS_VAR | FUNCTION_CALL | METHOD_CALL | ATTR_ACCESS | id '[' EXP ']' ['[' EXP ']'])}.

CONST_VAR = id | cons_int | cons_float.

MAIN = main '{' [(DECLARATION | STATEMENT) {(DECLARATION | STATEMENT)}] '}'.

METHOD_CALL = id '.' {id '.'} FUNCTION_CALL.

ATTR_ACCESS = id '.' id {'.' id}.