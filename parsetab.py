
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA DIFFERENT DIVIDE ELSE EQUALS FLOAT FLOAT_CTE GTHAN ID IF INT INT_CTE LBRACKET LPAREN LTHAN MINUS PLUS PRINT PROGRAM RBRACKET RPAREN SEMICOLON STRING TIMES VAR\n    program : PROGRAM ID SEMICOLON VAR vars block\n            | PROGRAM ID SEMICOLON block\n    \n    vars : vars0 vars \n         | vars0\n    \n    vars0 : ID vars1\n    vars1 : COMMA ID vars1 \n          | vars2   \n    vars2 : COLON type SEMICOLON\n    \n    type : INT\n         | FLOAT\n    \n    block : LBRACKET statement RBRACKET\n    \n    statement : asignation statement\n              | condition0 statement\n              | writing0 statement\n              | empty\n    \n    asignation : ID EQUALS expression SEMICOLON\n    \n    writing0 : PRINT LPAREN writing1 RPAREN SEMICOLON\n    writing1 : expression writing2\n             | STRING writing2\n    writing2 : writing1 \n             | empty\n        \n    expression : exp0 relop0\n    \n    relop0 : relop1 exp0\n           | empty\n    relop1 : LTHAN\n           | GTHAN\n           | DIFFERENT \n    \n    exp0 : term0 exp1\n    exp1 : PLUS exp0\n         | MINUS exp0\n         | empty\n    \n    condition0 : IF LPAREN expression RPAREN block condition1 \n    condition1 : ELSE block condition1\n               | empty\n        \n    term0 : factor term1\n    term1 : DIVIDE term0\n          | TIMES term0\n          | empty\n    \n    factor : LPAREN expression RPAREN\n           | PLUS var_cte\n           | MINUS var_cte\n           | var_cte\n    \n    var_cte : INT_CTE\n            | FLOAT_CTE\n            | ID\n    \n    empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,6,23,25,],[0,-2,-1,-11,]),'ID':([2,5,7,10,12,13,14,19,20,21,25,29,30,31,36,38,39,40,41,42,43,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,77,78,79,80,81,82,83,84,85,87,88,89,],[3,8,16,8,16,16,16,-5,32,-7,-11,36,36,36,-45,-46,-46,-46,36,36,-42,36,-43,-44,36,36,-6,-8,-16,-22,36,-24,-25,-26,-27,-28,36,36,-31,-35,36,36,-38,-40,-41,-23,-29,-30,-36,-37,-39,-46,-17,-32,-34,-46,-33,]),'SEMICOLON':([3,33,34,35,36,37,38,39,40,43,45,46,54,56,60,63,64,67,69,70,72,77,78,79,80,81,82,],[4,52,-9,-10,-45,53,-46,-46,-46,-42,-43,-44,-22,-24,-28,-31,-35,-38,-40,-41,84,-23,-29,-30,-36,-37,-39,]),'VAR':([4,],[5,]),'LBRACKET':([4,9,10,19,21,24,51,52,71,86,],[7,7,-4,-5,-7,-3,-6,-8,7,7,]),'IF':([7,12,13,14,25,53,83,84,85,87,88,89,],[17,17,17,17,-11,-16,-46,-17,-32,-34,-46,-33,]),'PRINT':([7,12,13,14,25,53,83,84,85,87,88,89,],[18,18,18,18,-11,-16,-46,-17,-32,-34,-46,-33,]),'RBRACKET':([7,11,12,13,14,15,25,26,27,28,53,83,84,85,87,88,89,],[-46,25,-46,-46,-46,-15,-11,-12,-13,-14,-16,-46,-17,-32,-34,-46,-33,]),'COMMA':([8,32,],[20,20,]),'COLON':([8,32,],[22,22,]),'EQUALS':([16,],[29,]),'LPAREN':([17,18,29,30,31,36,38,39,40,41,43,45,46,49,50,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,77,78,79,80,81,82,],[30,31,41,41,41,-45,-46,-46,-46,41,-42,-43,-44,41,41,-22,41,-24,-25,-26,-27,-28,41,41,-31,-35,41,41,-38,-40,-41,-23,-29,-30,-36,-37,-39,]),'INT':([22,],[34,]),'FLOAT':([22,],[35,]),'ELSE':([25,83,88,],[-11,86,86,]),'PLUS':([29,30,31,36,38,39,40,41,43,45,46,49,50,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,77,78,79,80,81,82,],[42,42,42,-45,-46,61,-46,42,-42,-43,-44,42,42,-22,42,-24,-25,-26,-27,-28,42,42,-31,-35,42,42,-38,-40,-41,-23,-29,-30,-36,-37,-39,]),'MINUS':([29,30,31,36,38,39,40,41,43,45,46,49,50,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,77,78,79,80,81,82,],[44,44,44,-45,-46,62,-46,44,-42,-43,-44,44,44,-22,44,-24,-25,-26,-27,-28,44,44,-31,-35,44,44,-38,-40,-41,-23,-29,-30,-36,-37,-39,]),'INT_CTE':([29,30,31,36,38,39,40,41,42,43,44,45,46,49,50,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,77,78,79,80,81,82,],[45,45,45,-45,-46,-46,-46,45,45,-42,45,-43,-44,45,45,-22,45,-24,-25,-26,-27,-28,45,45,-31,-35,45,45,-38,-40,-41,-23,-29,-30,-36,-37,-39,]),'FLOAT_CTE':([29,30,31,36,38,39,40,41,42,43,44,45,46,49,50,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,77,78,79,80,81,82,],[46,46,46,-45,-46,-46,-46,46,46,-42,46,-43,-44,46,46,-22,46,-24,-25,-26,-27,-28,46,46,-31,-35,46,46,-38,-40,-41,-23,-29,-30,-36,-37,-39,]),'STRING':([31,36,38,39,40,43,45,46,49,50,54,56,60,63,64,67,69,70,77,78,79,80,81,82,],[50,-45,-46,-46,-46,-42,-43,-44,50,50,-22,-24,-28,-31,-35,-38,-40,-41,-23,-29,-30,-36,-37,-39,]),'DIVIDE':([36,40,43,45,46,69,70,82,],[-45,65,-42,-43,-44,-40,-41,-39,]),'TIMES':([36,40,43,45,46,69,70,82,],[-45,66,-42,-43,-44,-40,-41,-39,]),'LTHAN':([36,38,39,40,43,45,46,60,63,64,67,69,70,78,79,80,81,82,],[-45,57,-46,-46,-42,-43,-44,-28,-31,-35,-38,-40,-41,-29,-30,-36,-37,-39,]),'GTHAN':([36,38,39,40,43,45,46,60,63,64,67,69,70,78,79,80,81,82,],[-45,58,-46,-46,-42,-43,-44,-28,-31,-35,-38,-40,-41,-29,-30,-36,-37,-39,]),'DIFFERENT':([36,38,39,40,43,45,46,60,63,64,67,69,70,78,79,80,81,82,],[-45,59,-46,-46,-42,-43,-44,-28,-31,-35,-38,-40,-41,-29,-30,-36,-37,-39,]),'RPAREN':([36,38,39,40,43,45,46,47,48,49,50,54,56,60,63,64,67,68,69,70,73,74,75,76,77,78,79,80,81,82,],[-45,-46,-46,-46,-42,-43,-44,71,72,-46,-46,-22,-24,-28,-31,-35,-38,82,-40,-41,-18,-20,-21,-19,-23,-29,-30,-36,-37,-39,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,9,71,86,],[6,23,83,88,]),'vars':([5,10,],[9,24,]),'vars0':([5,10,],[10,10,]),'statement':([7,12,13,14,],[11,26,27,28,]),'asignation':([7,12,13,14,],[12,12,12,12,]),'condition0':([7,12,13,14,],[13,13,13,13,]),'writing0':([7,12,13,14,],[14,14,14,14,]),'empty':([7,12,13,14,38,39,40,49,50,83,88,],[15,15,15,15,56,63,67,75,75,87,87,]),'vars1':([8,32,],[19,51,]),'vars2':([8,32,],[21,21,]),'type':([22,],[33,]),'expression':([29,30,31,41,49,50,],[37,47,49,68,49,49,]),'exp0':([29,30,31,41,49,50,55,61,62,],[38,38,38,38,38,38,77,78,79,]),'term0':([29,30,31,41,49,50,55,61,62,65,66,],[39,39,39,39,39,39,39,39,39,80,81,]),'factor':([29,30,31,41,49,50,55,61,62,65,66,],[40,40,40,40,40,40,40,40,40,40,40,]),'var_cte':([29,30,31,41,42,44,49,50,55,61,62,65,66,],[43,43,43,43,69,70,43,43,43,43,43,43,43,]),'writing1':([31,49,50,],[48,74,74,]),'relop0':([38,],[54,]),'relop1':([38,],[55,]),'exp1':([39,],[60,]),'term1':([40,],[64,]),'writing2':([49,50,],[73,76,]),'condition1':([83,88,],[85,89,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON VAR vars block','program',6,'p_program','pyparser.py',8),
  ('program -> PROGRAM ID SEMICOLON block','program',4,'p_program','pyparser.py',9),
  ('vars -> vars0 vars','vars',2,'p_vars','pyparser.py',15),
  ('vars -> vars0','vars',1,'p_vars','pyparser.py',16),
  ('vars0 -> ID vars1','vars0',2,'p_vars0','pyparser.py',21),
  ('vars1 -> COMMA ID vars1','vars1',3,'p_vars0','pyparser.py',22),
  ('vars1 -> vars2','vars1',1,'p_vars0','pyparser.py',23),
  ('vars2 -> COLON type SEMICOLON','vars2',3,'p_vars0','pyparser.py',24),
  ('type -> INT','type',1,'p_type','pyparser.py',29),
  ('type -> FLOAT','type',1,'p_type','pyparser.py',30),
  ('block -> LBRACKET statement RBRACKET','block',3,'p_block','pyparser.py',35),
  ('statement -> asignation statement','statement',2,'p_statement','pyparser.py',40),
  ('statement -> condition0 statement','statement',2,'p_statement','pyparser.py',41),
  ('statement -> writing0 statement','statement',2,'p_statement','pyparser.py',42),
  ('statement -> empty','statement',1,'p_statement','pyparser.py',43),
  ('asignation -> ID EQUALS expression SEMICOLON','asignation',4,'p_asignation','pyparser.py',48),
  ('writing0 -> PRINT LPAREN writing1 RPAREN SEMICOLON','writing0',5,'p_writing0','pyparser.py',53),
  ('writing1 -> expression writing2','writing1',2,'p_writing0','pyparser.py',54),
  ('writing1 -> STRING writing2','writing1',2,'p_writing0','pyparser.py',55),
  ('writing2 -> writing1','writing2',1,'p_writing0','pyparser.py',56),
  ('writing2 -> empty','writing2',1,'p_writing0','pyparser.py',57),
  ('expression -> exp0 relop0','expression',2,'p_expression','pyparser.py',63),
  ('relop0 -> relop1 exp0','relop0',2,'p_relop','pyparser.py',68),
  ('relop0 -> empty','relop0',1,'p_relop','pyparser.py',69),
  ('relop1 -> LTHAN','relop1',1,'p_relop','pyparser.py',70),
  ('relop1 -> GTHAN','relop1',1,'p_relop','pyparser.py',71),
  ('relop1 -> DIFFERENT','relop1',1,'p_relop','pyparser.py',72),
  ('exp0 -> term0 exp1','exp0',2,'p_exp0','pyparser.py',77),
  ('exp1 -> PLUS exp0','exp1',2,'p_exp0','pyparser.py',78),
  ('exp1 -> MINUS exp0','exp1',2,'p_exp0','pyparser.py',79),
  ('exp1 -> empty','exp1',1,'p_exp0','pyparser.py',80),
  ('condition0 -> IF LPAREN expression RPAREN block condition1','condition0',6,'p_condition0','pyparser.py',85),
  ('condition1 -> ELSE block condition1','condition1',3,'p_condition0','pyparser.py',86),
  ('condition1 -> empty','condition1',1,'p_condition0','pyparser.py',87),
  ('term0 -> factor term1','term0',2,'p_term0','pyparser.py',92),
  ('term1 -> DIVIDE term0','term1',2,'p_term0','pyparser.py',93),
  ('term1 -> TIMES term0','term1',2,'p_term0','pyparser.py',94),
  ('term1 -> empty','term1',1,'p_term0','pyparser.py',95),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','pyparser.py',100),
  ('factor -> PLUS var_cte','factor',2,'p_factor','pyparser.py',101),
  ('factor -> MINUS var_cte','factor',2,'p_factor','pyparser.py',102),
  ('factor -> var_cte','factor',1,'p_factor','pyparser.py',103),
  ('var_cte -> INT_CTE','var_cte',1,'p_var_cte','pyparser.py',108),
  ('var_cte -> FLOAT_CTE','var_cte',1,'p_var_cte','pyparser.py',109),
  ('var_cte -> ID','var_cte',1,'p_var_cte','pyparser.py',110),
  ('empty -> <empty>','empty',0,'p_empty','pyparser.py',115),
]
